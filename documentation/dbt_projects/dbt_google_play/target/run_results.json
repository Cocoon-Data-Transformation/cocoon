{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-08-04T00:41:45.190251Z", "invocation_id": "69dbb5fd-80eb-4170-b548-ca3c84b0ed1c", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.224937Z", "completed_at": "2024-08-04T00:41:33.233734Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.234146Z", "completed_at": "2024-08-04T00:41:33.234160Z"}], "thread_id": "Thread-1", "execution_time": 0.010475873947143555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_app_version_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_crashes_app_version", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_app_version_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.236368Z", "completed_at": "2024-08-04T00:41:33.240590Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.240992Z", "completed_at": "2024-08-04T00:41:33.240999Z"}], "thread_id": "Thread-1", "execution_time": 0.005704641342163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_os_version_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_crashes_os_version", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_os_version_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.242895Z", "completed_at": "2024-08-04T00:41:33.246263Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.246666Z", "completed_at": "2024-08-04T00:41:33.246673Z"}], "thread_id": "Thread-1", "execution_time": 0.004670381546020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_overview_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_crashes_overview", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_overview_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.248755Z", "completed_at": "2024-08-04T00:41:33.251897Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.252279Z", "completed_at": "2024-08-04T00:41:33.252285Z"}], "thread_id": "Thread-1", "execution_time": 0.004510641098022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_app_version_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_installs_app_version", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_app_version_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.254287Z", "completed_at": "2024-08-04T00:41:33.257446Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.257845Z", "completed_at": "2024-08-04T00:41:33.257851Z"}], "thread_id": "Thread-1", "execution_time": 0.004608631134033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_country_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_installs_country", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_country_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.259873Z", "completed_at": "2024-08-04T00:41:33.263012Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.263432Z", "completed_at": "2024-08-04T00:41:33.263439Z"}], "thread_id": "Thread-1", "execution_time": 0.004555702209472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_device_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_installs_device", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_device_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.265296Z", "completed_at": "2024-08-04T00:41:33.269229Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.269638Z", "completed_at": "2024-08-04T00:41:33.269644Z"}], "thread_id": "Thread-1", "execution_time": 0.00522923469543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_os_version_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_installs_os_version", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_os_version_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.271498Z", "completed_at": "2024-08-04T00:41:33.274697Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.275091Z", "completed_at": "2024-08-04T00:41:33.275099Z"}], "thread_id": "Thread-1", "execution_time": 0.004503011703491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_overview_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_installs_overview", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_overview_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.277033Z", "completed_at": "2024-08-04T00:41:33.280250Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.280652Z", "completed_at": "2024-08-04T00:41:33.280658Z"}], "thread_id": "Thread-1", "execution_time": 0.004568576812744141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_app_version_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_ratings_app_version", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_app_version_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.282484Z", "completed_at": "2024-08-04T00:41:33.285750Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.286144Z", "completed_at": "2024-08-04T00:41:33.286150Z"}], "thread_id": "Thread-1", "execution_time": 0.004534006118774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_country_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_ratings_country", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_country_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.288160Z", "completed_at": "2024-08-04T00:41:33.291223Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.291638Z", "completed_at": "2024-08-04T00:41:33.291644Z"}], "thread_id": "Thread-1", "execution_time": 0.004549503326416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_device_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_ratings_device", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_device_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.293464Z", "completed_at": "2024-08-04T00:41:33.297529Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.297928Z", "completed_at": "2024-08-04T00:41:33.297935Z"}], "thread_id": "Thread-1", "execution_time": 0.00534820556640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_os_version_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_ratings_os_version", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_os_version_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.299940Z", "completed_at": "2024-08-04T00:41:33.302977Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.303388Z", "completed_at": "2024-08-04T00:41:33.303397Z"}], "thread_id": "Thread-1", "execution_time": 0.004498720169067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_overview_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_ratings_overview", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_overview_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.305494Z", "completed_at": "2024-08-04T00:41:33.308580Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.308973Z", "completed_at": "2024-08-04T00:41:33.308979Z"}], "thread_id": "Thread-1", "execution_time": 0.0044901371002197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_country_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_store_performance_country", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__store_performance_country_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.310819Z", "completed_at": "2024-08-04T00:41:33.314096Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.314497Z", "completed_at": "2024-08-04T00:41:33.314505Z"}], "thread_id": "Thread-1", "execution_time": 0.004560232162475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_source_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.google_play.stats_store_performance_traffic_source", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__store_performance_source_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.316450Z", "completed_at": "2024-08-04T00:41:33.318054Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:33.318517Z", "completed_at": "2024-08-04T00:41:33.318524Z"}], "thread_id": "Thread-1", "execution_time": 0.0029735565185546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_source.google_play__country_codes", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:33.320468Z", "completed_at": "2024-08-04T00:41:34.142953Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:34.143403Z", "completed_at": "2024-08-04T00:41:34.143416Z"}], "thread_id": "Thread-1", "execution_time": 1.0136895179748535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_app_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_app_version_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as integer) as \n    \n    app_version_code\n    \n , \n    cast(null as integer) as \n    \n    daily_anrs\n    \n , \n    cast(null as integer) as \n    \n    daily_crashes\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        app_version_code,\n        package_name,\n        sum(daily_anrs) as anrs,\n        sum(daily_crashes) as crashes\n    from fields\n    group by 1,2,3\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_app_version"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:34.336116Z", "completed_at": "2024-08-04T00:41:34.920032Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:34.920717Z", "completed_at": "2024-08-04T00:41:34.920733Z"}], "thread_id": "Thread-1", "execution_time": 0.7733845710754395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_os_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_os_version_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as TEXT) as \n    \n    android_os_version\n    \n , \n    cast(null as integer) as \n    \n    daily_anrs\n    \n , \n    cast(null as integer) as \n    \n    daily_crashes\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        android_os_version,\n        package_name,\n        sum(daily_anrs) as anrs,\n        sum(daily_crashes) as crashes\n    from fields\n    group by 1,2,3\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_os_version"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:35.111130Z", "completed_at": "2024-08-04T00:41:35.663056Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:35.663497Z", "completed_at": "2024-08-04T00:41:35.663510Z"}], "thread_id": "Thread-1", "execution_time": 0.7190666198730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_overview", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_overview_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as integer) as \n    \n    daily_anrs\n    \n , \n    cast(null as integer) as \n    \n    daily_crashes\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        package_name,\n        daily_anrs as anrs,\n        daily_crashes as crashes,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_overview"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:35.832059Z", "completed_at": "2024-08-04T00:41:36.354775Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:36.355192Z", "completed_at": "2024-08-04T00:41:36.355206Z"}], "thread_id": "Thread-1", "execution_time": 0.6932415962219238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_app_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_app_version_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as integer) as \n    \n    active_device_installs\n    \n , \n    cast(null as integer) as \n    \n    app_version_code\n    \n , \n    cast(null as integer) as \n    \n    current_device_installs\n    \n , \n    cast(null as integer) as \n    \n    current_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_uninstalls\n    \n , \n    cast(null as integer) as \n    \n    daily_device_upgrades\n    \n , \n    cast(null as integer) as \n    \n    daily_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_user_uninstalls\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as integer) as \n    \n    install_events\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as integer) as \n    \n    total_user_installs\n    \n , \n    cast(null as integer) as \n    \n    uninstall_events\n    \n , \n    cast(null as integer) as \n    \n    update_events\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        app_version_code,\n        package_name,\n        sum(active_device_installs) as active_devices_last_30_days,\n        sum(daily_device_installs) as device_installs,\n        sum(daily_device_uninstalls) as device_uninstalls,\n        sum(daily_device_upgrades) as device_upgrades,\n        sum(daily_user_installs) as user_installs,\n        sum(daily_user_uninstalls) as user_uninstalls,\n        sum(install_events) as install_events,\n        sum(uninstall_events) as uninstall_events,\n        sum(update_events) as update_events\n    from fields\n    group by 1,2,3\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_app_version"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:36.526644Z", "completed_at": "2024-08-04T00:41:37.023973Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:37.024382Z", "completed_at": "2024-08-04T00:41:37.024395Z"}], "thread_id": "Thread-1", "execution_time": 0.6723883152008057, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_country", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_country_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as integer) as \n    \n    active_device_installs\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as integer) as \n    \n    current_device_installs\n    \n , \n    cast(null as integer) as \n    \n    current_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_uninstalls\n    \n , \n    cast(null as integer) as \n    \n    daily_device_upgrades\n    \n , \n    cast(null as integer) as \n    \n    daily_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_user_uninstalls\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as integer) as \n    \n    install_events\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as integer) as \n    \n    total_user_installs\n    \n , \n    cast(null as integer) as \n    \n    uninstall_events\n    \n , \n    cast(null as integer) as \n    \n    update_events\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        country,\n        package_name,\n        sum(active_device_installs) as active_devices_last_30_days,\n        sum(daily_device_installs) as device_installs,\n        sum(daily_device_uninstalls) as device_uninstalls,\n        sum(daily_device_upgrades) as device_upgrades,\n        sum(daily_user_installs) as user_installs,\n        sum(daily_user_uninstalls) as user_uninstalls,\n        sum(install_events) as install_events,\n        sum(uninstall_events) as uninstall_events,\n        sum(update_events) as update_events\n    from fields\n    group by 1,2,3\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_country"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:37.200687Z", "completed_at": "2024-08-04T00:41:37.709295Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:37.709715Z", "completed_at": "2024-08-04T00:41:37.709727Z"}], "thread_id": "Thread-1", "execution_time": 0.6767799854278564, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_device", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_device_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as integer) as \n    \n    active_device_installs\n    \n , \n    cast(null as integer) as \n    \n    current_device_installs\n    \n , \n    cast(null as integer) as \n    \n    current_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_uninstalls\n    \n , \n    cast(null as integer) as \n    \n    daily_device_upgrades\n    \n , \n    cast(null as integer) as \n    \n    daily_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_user_uninstalls\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    device\n    \n , \n    cast(null as integer) as \n    \n    install_events\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as integer) as \n    \n    total_user_installs\n    \n , \n    cast(null as integer) as \n    \n    uninstall_events\n    \n , \n    cast(null as integer) as \n    \n    update_events\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        device, -- device_type\n        package_name,\n        sum(active_device_installs) as active_devices_last_30_days,\n        sum(daily_device_installs) as device_installs,\n        sum(daily_device_uninstalls) as device_uninstalls,\n        sum(daily_device_upgrades) as device_upgrades,\n        sum(daily_user_installs) as user_installs,\n        sum(daily_user_uninstalls) as user_uninstalls,\n        sum(install_events) as install_events,\n        sum(uninstall_events) as uninstall_events,\n        sum(update_events) as update_events\n    from fields\n    group by 1,2,3\n\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_device"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:37.879008Z", "completed_at": "2024-08-04T00:41:38.379392Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:38.379820Z", "completed_at": "2024-08-04T00:41:38.379833Z"}], "thread_id": "Thread-1", "execution_time": 0.7731103897094727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_os_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_os_version_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as integer) as \n    \n    active_device_installs\n    \n , \n    cast(null as TEXT) as \n    \n    android_os_version\n    \n , \n    cast(null as integer) as \n    \n    current_device_installs\n    \n , \n    cast(null as integer) as \n    \n    current_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_uninstalls\n    \n , \n    cast(null as integer) as \n    \n    daily_device_upgrades\n    \n , \n    cast(null as integer) as \n    \n    daily_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_user_uninstalls\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as integer) as \n    \n    install_events\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as integer) as \n    \n    total_user_installs\n    \n , \n    cast(null as integer) as \n    \n    uninstall_events\n    \n , \n    cast(null as integer) as \n    \n    update_events\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        package_name,\n        android_os_version,\n        sum(active_device_installs) as active_devices_last_30_days,\n        sum(daily_device_installs) as device_installs,\n        sum(daily_device_uninstalls) as device_uninstalls,\n        sum(daily_device_upgrades) as device_upgrades,\n        sum(daily_user_installs) as user_installs,\n        sum(daily_user_uninstalls) as user_uninstalls,\n        sum(install_events) as install_events,\n        sum(uninstall_events) as uninstall_events,\n        sum(update_events) as update_events\n    from fields\n    group by 1,2,3\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_os_version"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:38.653661Z", "completed_at": "2024-08-04T00:41:39.154415Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:39.154840Z", "completed_at": "2024-08-04T00:41:39.154854Z"}], "thread_id": "Thread-1", "execution_time": 0.6705336570739746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_overview", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_overview_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as integer) as \n    \n    active_device_installs\n    \n , \n    cast(null as integer) as \n    \n    current_device_installs\n    \n , \n    cast(null as integer) as \n    \n    current_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_device_uninstalls\n    \n , \n    cast(null as integer) as \n    \n    daily_device_upgrades\n    \n , \n    cast(null as integer) as \n    \n    daily_user_installs\n    \n , \n    cast(null as integer) as \n    \n    daily_user_uninstalls\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as integer) as \n    \n    install_events\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as integer) as \n    \n    total_user_installs\n    \n , \n    cast(null as integer) as \n    \n    uninstall_events\n    \n , \n    cast(null as integer) as \n    \n    update_events\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        package_name,\n        active_device_installs as active_devices_last_30_days,\n        daily_device_installs as device_installs,\n        daily_device_uninstalls as device_uninstalls,\n        daily_device_upgrades as device_upgrades,\n        daily_user_installs as user_installs,\n        daily_user_uninstalls as user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_overview"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:39.326247Z", "completed_at": "2024-08-04T00:41:39.837692Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:39.838118Z", "completed_at": "2024-08-04T00:41:39.838131Z"}], "thread_id": "Thread-1", "execution_time": 0.6759529113769531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_app_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_app_version_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as integer) as \n    \n    app_version_code\n    \n , \n    cast(null as TEXT) as \n    \n    daily_average_rating\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as float) as \n    \n    total_average_rating\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        app_version_code,\n        package_name,\n        case when app_version_code is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when app_version_code is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_app_version"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:40.003745Z", "completed_at": "2024-08-04T00:41:40.570970Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:40.571413Z", "completed_at": "2024-08-04T00:41:40.571426Z"}], "thread_id": "Thread-1", "execution_time": 0.7524042129516602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_country", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_country_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as TEXT) as \n    \n    daily_average_rating\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as float) as \n    \n    total_average_rating\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        country,\n        package_name,\n        case when country is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when country is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_country"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:40.757537Z", "completed_at": "2024-08-04T00:41:41.566075Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:41.566490Z", "completed_at": "2024-08-04T00:41:41.566502Z"}], "thread_id": "Thread-1", "execution_time": 0.9883260726928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_device", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_device_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as TEXT) as \n    \n    daily_average_rating\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    device\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as float) as \n    \n    total_average_rating\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        device,\n        package_name,\n        case when device is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when device is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_device"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:41.747913Z", "completed_at": "2024-08-04T00:41:42.387389Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:42.387821Z", "completed_at": "2024-08-04T00:41:42.387835Z"}], "thread_id": "Thread-1", "execution_time": 0.8185808658599854, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_os_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_os_version_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as TEXT) as \n    \n    android_os_version\n    \n , \n    cast(null as TEXT) as \n    \n    daily_average_rating\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as float) as \n    \n    total_average_rating\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        android_os_version,\n        package_name,\n        case when android_os_version is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when android_os_version is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_os_version"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:42.568168Z", "completed_at": "2024-08-04T00:41:43.271109Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:43.271537Z", "completed_at": "2024-08-04T00:41:43.271552Z"}], "thread_id": "Thread-1", "execution_time": 0.8885912895202637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_overview", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_overview_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as TEXT) as \n    \n    daily_average_rating\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as float) as \n    \n    total_average_rating\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        package_name,\n        cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) as average_rating,\n        total_average_rating as rolling_total_average_rating,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_overview"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:43.458430Z", "completed_at": "2024-08-04T00:41:43.999211Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:43.999673Z", "completed_at": "2024-08-04T00:41:43.999687Z"}], "thread_id": "Thread-1", "execution_time": 0.7439842224121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_country", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__store_performance_country_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as TEXT) as \n    \n    country_region\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as integer) as \n    \n    store_listing_acquisitions\n    \n , \n    cast(null as float) as \n    \n    store_listing_conversion_rate\n    \n , \n    cast(null as integer) as \n    \n    store_listing_visitors\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        country_region,\n        package_name,\n        sum(store_listing_acquisitions) as store_listing_acquisitions,\n        avg(store_listing_conversion_rate) as store_listing_conversion_rate,\n        sum(store_listing_visitors) as store_listing_visitors\n    from fields\n    group by 1,2,3\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__store_performance_country"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:44.204047Z", "completed_at": "2024-08-04T00:41:44.756657Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:44.757082Z", "completed_at": "2024-08-04T00:41:44.757095Z"}], "thread_id": "Thread-1", "execution_time": 0.7373085021972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_source", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__store_performance_source_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _file\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    _line\n    \n , \n    cast(null as timestamp) as \n    \n    _modified\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as TEXT) as \n    \n    package_name\n    \n , \n    cast(null as TEXT) as \n    \n    search_term\n    \n , \n    cast(null as integer) as \n    \n    store_listing_acquisitions\n    \n , \n    cast(null as float) as \n    \n    store_listing_conversion_rate\n    \n , \n    cast(null as integer) as \n    \n    store_listing_visitors\n    \n , \n    cast(null as TEXT) as \n    \n    traffic_source\n    \n , \n    cast(null as TEXT) as \n    \n    utm_campaign\n    \n , \n    cast(null as TEXT) as \n    \n    utm_source\n    \n \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(date as date) as date_day,\n        package_name,\n        traffic_source,\n        search_term,\n        utm_campaign,\n        utm_source,\n        store_listing_acquisitions,\n        store_listing_conversion_rate,\n        store_listing_visitors,\n        -- make a surrogate key as the PK involves quite a few columns\n        md5(cast(coalesce(cast(date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(package_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(traffic_source as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(search_term as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(utm_campaign as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(utm_source as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as traffic_source_unique_key,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play_source.stg_google_play__store_performance_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:44.942763Z", "completed_at": "2024-08-04T00:41:44.956338Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:44.956744Z", "completed_at": "2024-08-04T00:41:44.956751Z"}], "thread_id": "Thread-1", "execution_time": 0.015057086944580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_package_name__date_day__app_version_code.b4b6281c58", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, app_version_code\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_app_version\n    group by package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:44.958670Z", "completed_at": "2024-08-04T00:41:44.963164Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:44.963595Z", "completed_at": "2024-08-04T00:41:44.963602Z"}], "thread_id": "Thread-1", "execution_time": 0.005806684494018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_package_name__date_day__android_os_version.d152efda44", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, android_os_version\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_os_version\n    group by package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:44.965463Z", "completed_at": "2024-08-04T00:41:44.969559Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:44.969956Z", "completed_at": "2024-08-04T00:41:44.969962Z"}], "thread_id": "Thread-1", "execution_time": 0.005353689193725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_package_name__date_day.ad50feacd2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_overview\n    group by package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:44.971861Z", "completed_at": "2024-08-04T00:41:44.975925Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:44.976312Z", "completed_at": "2024-08-04T00:41:44.976318Z"}], "thread_id": "Thread-1", "execution_time": 0.005346775054931641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_package_name__date_day__app_version_code.b587170c9a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, app_version_code\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_app_version\n    group by package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:44.978176Z", "completed_at": "2024-08-04T00:41:44.982743Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:44.983140Z", "completed_at": "2024-08-04T00:41:44.983146Z"}], "thread_id": "Thread-1", "execution_time": 0.005832672119140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_package_name__date_day__country.d2d57c88aa", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, country\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_country\n    group by package_name, date_day, country\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:44.985058Z", "completed_at": "2024-08-04T00:41:44.990249Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:44.990647Z", "completed_at": "2024-08-04T00:41:44.990654Z"}], "thread_id": "Thread-1", "execution_time": 0.006462812423706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_package_name__date_day__device.6a55f80f69", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, device\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_device\n    group by package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:44.992520Z", "completed_at": "2024-08-04T00:41:44.996546Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:44.996943Z", "completed_at": "2024-08-04T00:41:44.996950Z"}], "thread_id": "Thread-1", "execution_time": 0.0052738189697265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_package_name__date_day__android_os_version.96f36eb232", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, android_os_version\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_os_version\n    group by package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:44.998822Z", "completed_at": "2024-08-04T00:41:45.002867Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.003257Z", "completed_at": "2024-08-04T00:41:45.003263Z"}], "thread_id": "Thread-1", "execution_time": 0.00530695915222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_package_name__date_day.4440464096", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_overview\n    group by package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.005149Z", "completed_at": "2024-08-04T00:41:45.011030Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.011444Z", "completed_at": "2024-08-04T00:41:45.011450Z"}], "thread_id": "Thread-1", "execution_time": 0.007154226303100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__app_version_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_app_version\n), \n\nratings as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_app_version\n), \n\ncrashes as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_app_version\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 3 columns are the grain of this model\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.app_version_code, ratings.app_version_code, crashes.app_version_code) as app_version_code,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.package_name = ratings.package_name\n        -- choosing an arbitrary negative integer as we can't coalesce with a string like 'null_version_code'. null app version codes will cause fanout\n        and coalesce(install_metrics.app_version_code, -5) = coalesce(ratings.app_version_code, -5) -- this really doesn't happen IRL but let's be safe\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        and coalesce(install_metrics.app_version_code, ratings.app_version_code, -5) = coalesce(crashes.app_version_code, -5)\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by app_version_code, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by app_version_code, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by app_version_code, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        date_day,\n        app_version_code,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by rolling_total_average_rating_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by total_device_installs_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by total_device_uninstalls_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        date_day,\n        app_version_code,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play.google_play__app_version_report"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.013521Z", "completed_at": "2024-08-04T00:41:45.017664Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.018058Z", "completed_at": "2024-08-04T00:41:45.018065Z"}], "thread_id": "Thread-1", "execution_time": 0.0055866241455078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_package_name__date_day__app_version_code.7a62813a6f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, app_version_code\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_app_version\n    group by package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.019951Z", "completed_at": "2024-08-04T00:41:45.024742Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.025137Z", "completed_at": "2024-08-04T00:41:45.025143Z"}], "thread_id": "Thread-1", "execution_time": 0.0060808658599853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_package_name__date_day__country.cc5a8c3e2d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, country\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_country\n    group by package_name, date_day, country\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.026992Z", "completed_at": "2024-08-04T00:41:45.032265Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.032654Z", "completed_at": "2024-08-04T00:41:45.032660Z"}], "thread_id": "Thread-1", "execution_time": 0.006522178649902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__device_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_device\n), \n\nratings as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_device\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\ndevice_join as (\n\n    select \n        -- these 3 columns are the grain of this model\n        coalesce(install_metrics.date_day, ratings.date_day) as date_day,\n        coalesce(install_metrics.device, ratings.device) as device, -- device type\n        coalesce(install_metrics.package_name, ratings.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null device types otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.device, 'null_device') = coalesce(ratings.device, 'null_device') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by device, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by device, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by device, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from device_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        date_day,\n        device,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by rolling_total_average_rating_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by total_device_installs_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by total_device_uninstalls_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        date_day,\n        device,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play.google_play__device_report"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.034651Z", "completed_at": "2024-08-04T00:41:45.038617Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.039011Z", "completed_at": "2024-08-04T00:41:45.039017Z"}], "thread_id": "Thread-1", "execution_time": 0.005331993103027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_package_name__date_day__device.7e5c92c512", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, device\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_device\n    group by package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.040884Z", "completed_at": "2024-08-04T00:41:45.046900Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.047328Z", "completed_at": "2024-08-04T00:41:45.047335Z"}], "thread_id": "Thread-1", "execution_time": 0.0073206424713134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__os_version_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_os_version\n), \n\nratings as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_os_version\n), \n\ncrashes as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_os_version\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 3 columns are the grain of this model\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.android_os_version, ratings.android_os_version, crashes.android_os_version) as android_os_version,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null os versions otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, 'null_os_version') = coalesce(ratings.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, ratings.android_os_version, 'null_os_version') = coalesce(crashes.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by android_os_version, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by android_os_version, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by android_os_version, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by rolling_total_average_rating_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by total_device_installs_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by total_device_uninstalls_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play.google_play__os_version_report"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.049342Z", "completed_at": "2024-08-04T00:41:45.053490Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.053890Z", "completed_at": "2024-08-04T00:41:45.053896Z"}], "thread_id": "Thread-1", "execution_time": 0.005502939224243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_package_name__date_day__android_os_version.3a50c72e4d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, android_os_version\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_os_version\n    group by package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.055770Z", "completed_at": "2024-08-04T00:41:45.060641Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.061035Z", "completed_at": "2024-08-04T00:41:45.061041Z"}], "thread_id": "Thread-1", "execution_time": 0.006141185760498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_package_name__date_day.96f306aea1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_overview\n    group by package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.062875Z", "completed_at": "2024-08-04T00:41:45.071787Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.072175Z", "completed_at": "2024-08-04T00:41:45.072181Z"}], "thread_id": "Thread-1", "execution_time": 0.010146141052246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__country_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_country\n), \n\nratings as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_country\n), \n\nstore_performance as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__store_performance_country\n), \n\ncountry_codes as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.google_play__country_codes\n),\n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\nstore_performance_metrics as (\n\n    select\n        *,\n        sum(store_listing_acquisitions) over (partition by country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance\n), \n\ncountry_join as (\n\n    select \n        -- these 3 columns are the grain of this model\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance_metrics.date_day) as date_day,\n        coalesce(install_metrics.country, ratings.country, store_performance_metrics.country_region) as country,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance_metrics.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance_metrics.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance_metrics.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance_metrics.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except %'s') are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating,\n        store_performance_metrics.total_store_acquisitions,\n        store_performance_metrics.total_store_visitors\n        \n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.country, 'null_country') = coalesce(ratings.country, 'null_country') -- in the source package we aggregate all null country records together into one batch per day\n    full outer join store_performance_metrics\n        on store_performance_metrics.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance_metrics.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n        and coalesce(store_performance_metrics.country_region, 'null_country') = coalesce(install_metrics.country, ratings.country, 'null_country')\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by country, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by country, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by country, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition, sum(case when total_store_acquisitions is null \n                then 0 else 1 end) over (partition by country, package_name order by date_day asc rows unbounded preceding) as total_store_acquisitions_partition, sum(case when total_store_visitors is null \n                then 0 else 1 end) over (partition by country, package_name order by date_day asc rows unbounded preceding) as total_store_visitors_partition\n    from country_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        date_day,\n        country,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions, \n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by rolling_total_average_rating_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by total_device_installs_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by total_device_uninstalls_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls, first_value( total_store_acquisitions ) over (\n            partition by total_store_acquisitions_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions, first_value( total_store_visitors ) over (\n            partition by total_store_visitors_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        date_day,\n        country as country_short,\n        coalesce(country_codes.alternative_country_name, country_codes.country_name) as country_long,\n        country_codes.region,\n        country_codes.sub_region,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round(cast(total_store_acquisitions as numeric(28,6)) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n    left join country_codes\n        on country_codes.country_code_alpha_2 = fill_values.country\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play.google_play__country_report"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.079169Z", "completed_at": "2024-08-04T00:41:45.083634Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.084026Z", "completed_at": "2024-08-04T00:41:45.084032Z"}], "thread_id": "Thread-1", "execution_time": 0.005827188491821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_package_name__date_day__country_region.7ae3285ca5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, country_region\n    from TEST.PUBLIC_google_play_source.stg_google_play__store_performance_country\n    group by package_name, date_day, country_region\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.085886Z", "completed_at": "2024-08-04T00:41:45.094169Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.094564Z", "completed_at": "2024-08-04T00:41:45.094571Z"}], "thread_id": "Thread-1", "execution_time": 0.009537458419799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.not_null_stg_google_play__store_performance_source_traffic_source_unique_key.f2423ab9a8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect traffic_source_unique_key\nfrom TEST.PUBLIC_google_play_source.stg_google_play__store_performance_source\nwhere traffic_source_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.096461Z", "completed_at": "2024-08-04T00:41:45.102324Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.102718Z", "completed_at": "2024-08-04T00:41:45.102724Z"}], "thread_id": "Thread-1", "execution_time": 0.007126569747924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.unique_stg_google_play__store_performance_source_traffic_source_unique_key.c42051d73b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    traffic_source_unique_key as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_google_play_source.stg_google_play__store_performance_source\nwhere traffic_source_unique_key is not null\ngroup by traffic_source_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.104647Z", "completed_at": "2024-08-04T00:41:45.108659Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.109049Z", "completed_at": "2024-08-04T00:41:45.109056Z"}], "thread_id": "Thread-1", "execution_time": 0.0052759647369384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__app_version_report_package_name__date_day__app_version_code.c6b0615e00", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, app_version_code\n    from TEST.PUBLIC_google_play.google_play__app_version_report\n    group by package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.110915Z", "completed_at": "2024-08-04T00:41:45.114912Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.115296Z", "completed_at": "2024-08-04T00:41:45.115302Z"}], "thread_id": "Thread-1", "execution_time": 0.005275249481201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__device_report_package_name__date_day__device.9495601b76", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, device\n    from TEST.PUBLIC_google_play.google_play__device_report\n    group by package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.117183Z", "completed_at": "2024-08-04T00:41:45.121260Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.121655Z", "completed_at": "2024-08-04T00:41:45.121661Z"}], "thread_id": "Thread-1", "execution_time": 0.0053272247314453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__os_version_report_package_name__date_day__android_os_version.631e863e2e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, android_os_version\n    from TEST.PUBLIC_google_play.google_play__os_version_report\n    group by package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.123553Z", "completed_at": "2024-08-04T00:41:45.128776Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.129172Z", "completed_at": "2024-08-04T00:41:45.129178Z"}], "thread_id": "Thread-1", "execution_time": 0.006522178649902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__country_report_package_name__date_day__country_short.0e750ac724", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day, country_short\n    from TEST.PUBLIC_google_play.google_play__country_report\n    group by package_name, date_day, country_short\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.131000Z", "completed_at": "2024-08-04T00:41:45.181141Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.181534Z", "completed_at": "2024-08-04T00:41:45.181543Z"}], "thread_id": "Thread-1", "execution_time": 0.05140185356140137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__overview_report", "compiled": true, "compiled_code": "with  __dbt__cte__int_google_play__store_performance as (\nwith store_performance as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__store_performance_country\n), \n\nstore_performance_rollup as (\n\n    select \n        date_day,\n        package_name,\n        sum(store_listing_acquisitions) as store_listing_acquisitions,\n        sum(store_listing_visitors) as store_listing_visitors\n    from store_performance\n    group by 1,2\n),\n\nstore_performance_metrics as (\n\n    select\n        *,\n        round(store_listing_acquisitions * 1.0 / nullif(store_listing_visitors, 0), 4) as store_listing_conversion_rate,\n        sum(store_listing_acquisitions) over (partition by package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance_rollup\n)\n\nselect *\nfrom store_performance_metrics\n), installs as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_installs_overview\n), \n\nratings as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_ratings_overview\n), \n\ncrashes as (\n\n    select *\n    from TEST.PUBLIC_google_play_source.stg_google_play__stats_crashes_overview\n), \n\nstore_performance as (\n\n    select *\n    from __dbt__cte__int_google_play__store_performance -- country rollup\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\noverview_join as (\n\n    select \n        -- these 2 columns are the grain of this model\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n\n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating. todo: move\n        ratings.rolling_total_average_rating,\n        store_performance.total_store_acquisitions,\n        store_performance.total_store_visitors\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.package_name = ratings.package_name\n    full outer join store_performance\n        on store_performance.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day) = crashes.date_day\n        and coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name) = crashes.package_name\n),\n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition, sum(case when total_store_acquisitions is null \n                then 0 else 1 end) over (partition by package_name order by date_day asc rows unbounded preceding) as total_store_acquisitions_partition, sum(case when total_store_visitors is null \n                then 0 else 1 end) over (partition by package_name order by date_day asc rows unbounded preceding) as total_store_visitors_partition\n    from overview_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        date_day,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by rolling_total_average_rating_partition, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by total_device_installs_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by total_device_uninstalls_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls, first_value( total_store_acquisitions ) over (\n            partition by total_store_acquisitions_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions, first_value( total_store_visitors ) over (\n            partition by total_store_visitors_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        date_day,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round( cast(total_store_acquisitions as numeric(28,6)) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_google_play.google_play__overview_report"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T00:41:45.183800Z", "completed_at": "2024-08-04T00:41:45.188023Z"}, {"name": "execute", "started_at": "2024-08-04T00:41:45.188407Z", "completed_at": "2024-08-04T00:41:45.188413Z"}], "thread_id": "Thread-1", "execution_time": 0.005515098571777344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__overview_report_package_name__date_day.3e94bef4fc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        package_name, date_day\n    from TEST.PUBLIC_google_play.google_play__overview_report\n    group by package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 15.125076532363892, "args": {"write_json": true, "invocation_command": "dbt compile", "empty": false, "log_format": "default", "introspect": true, "log_level": "info", "populate_cache": true, "static_parser": true, "warn_error_options": {"include": [], "exclude": []}, "partial_parse": true, "require_explicit_package_overrides_for_builtin_materializations": true, "indirect_selection": "eager", "which": "compile", "favor_state": false, "require_resource_names_without_spaces": false, "use_colors_file": true, "defer": false, "show_resource_report": false, "macro_debugging": false, "cache_selected_only": false, "quiet": false, "partial_parse_file_diff": true, "vars": {}, "log_format_file": "debug", "project_dir": "/home/zh2408/dbt_projects/dbt_google_play", "enable_legacy_logger": false, "log_level_file": "debug", "print": true, "version_check": true, "source_freshness_run_project_hooks": false, "output": "text", "printer_width": 80, "log_path": "/home/zh2408/dbt_projects/dbt_google_play/logs", "use_colors": true, "profiles_dir": "/home/zh2408/.dbt", "inject_ephemeral_ctes": true, "log_file_max_bytes": 10485760, "send_anonymous_usage_stats": true, "strict_mode": false, "exclude": [], "select": []}}