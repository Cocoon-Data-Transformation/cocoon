model_name,summary,tags
model.shopify.shopify__customer_cohorts,"This SQL query creates customer cohorts based on their first order date and calculates various metrics for each customer on a monthly basis. It joins customer data with order data, calculates lifetime metrics using window functions, and assigns a unique identifier to each customer cohort. The query provides a comprehensive view of customer behavior over time, including order counts, total prices, and line item counts both for individual months and cumulatively.","[""Integration"",""Aggregation"",""Featurization"",""Other""]"
model.shopify.shopify__discounts,"This SQL query integrates data from multiple Shopify-related tables to create a comprehensive view of discounts. It combines information about discount codes, price rules, orders, and abandoned checkouts. The query performs various aggregations to calculate metrics such as total discount amounts, order counts, customer counts, and shipping costs. It also joins these aggregated results with the main discount and price rule data to provide a detailed analysis of discount performance across both completed orders and abandoned checkouts.","[""Integration"",""Aggregation"",""Featurization""]"
model.shopify.shopify__orders,"This SQL query combines and transforms data from multiple Shopify-related tables to create a comprehensive view of orders. It joins order information with related data such as refunds, adjustments, discounts, tags, and fulfillments. The query calculates various aggregates and derived fields, including adjusted totals, discount amounts, and shipping information. It also determines whether each order is from a new or repeat customer based on the order sequence for each customer.","[""Integration"",""Aggregation"",""Featurization"",""Cleaning""]"
model.shopify.shopify__products,"This SQL query integrates data from multiple Shopify-related tables to create a comprehensive view of products. It joins product information with collections, tags, variants, and images. The query also aggregates order line data to add sales-related metrics to each product. It includes various calculations such as quantity sold, subtotal sold, average quantity per order line, total discounts, and taxes. The result is a detailed product report that combines product attributes with sales performance data.","[""Integration"",""Aggregation"",""Featurization""]"
model.shopify.shopify__transactions,"This SQL query integrates data from three Shopify-related tables: transactions, tender transactions, and parent transactions. It creates a unique identifier for each transaction, joins the tables based on transaction IDs and source relations, and calculates exchange rates and currency-adjusted amounts from JSON data in the receipt field. The query enhances the transaction data with payment methods, parent transaction details, and currency exchange information.","[""Integration"",""Featurization"",""Cleaning""]"
model.shopify.shopify__customer_emails,"This SQL query aggregates and integrates customer data from various Shopify-related tables. It calculates lifetime metrics for customers, including order totals, average order values, abandoned checkouts, and various financial metrics (spent, refunded, tax, shipping, etc.). The query joins data from orders, transactions, customer emails, and abandoned checkouts to create a comprehensive customer profile.","[""Integration"",""Aggregation"",""Featurization"",""Cleaning""]"
model.shopify.shopify__daily_shop,"This SQL query creates a daily summary of shop performance metrics, combining order data, abandoned checkout information, and shop details. It calculates various aggregates such as order counts, sales figures, discounts, refunds, and product quantities. The query joins multiple tables to provide a comprehensive daily view of each shop's activities, including both successful orders and abandoned checkouts.","[""Filtering"",""Integration"",""Aggregation"",""Featurization""]"
model.shopify.shopify__customer_email_cohorts,"This SQL query creates customer email cohorts for Shopify data. It combines calendar, customer, and order data to track customer behavior over time. The query calculates monthly and lifetime metrics for each customer, including order count, total price, and line item count. It also assigns a cohort month and a unique customer cohort ID to each record.","[""Integration"",""Aggregation"",""Featurization"",""Other""]"
model.shopify.shopify__customers,"This SQL query integrates customer data from multiple Shopify-related tables to create a comprehensive customer profile. It combines information from orders, transactions, customer tags, and abandoned checkouts. The query calculates various customer metrics such as lifetime spending, order counts, average order value, and abandoned checkout counts. It also includes aggregations of tax, shipping, and discount information across a customer's order history.","[""Integration"",""Aggregation"",""Featurization"",""Cleaning""]"
model.shopify.shopify__inventory_levels,"This SQL query integrates data from multiple Shopify-related tables (inventory levels, items, locations, product variants, orders, refunds, and fulfillments) to create a comprehensive view of inventory and sales performance. It combines inventory data with sales and refund information, calculates various aggregates such as total sales, quantity sold, distinct orders and customers, and fulfillment statuses. The query also includes detailed information about products, variants, and locations, providing a holistic view of inventory across different dimensions.","[""Integration"",""Aggregation"",""Featurization"",""Cleaning""]"
model.shopify.shopify__order_lines,"This SQL query integrates data from multiple Shopify-related tables to create a comprehensive view of order lines. It joins order line data with refund information, product variant details, and tax information. The query calculates net quantities and subtotals after refunds, and includes various product variant attributes. It also aggregates refund and tax data at the order line level.","[""Integration"",""Aggregation"",""Featurization""]"
model.shopify.shopify__customers__order_aggregates,"This SQL query aggregates customer order data from various Shopify-related tables. It calculates customer-level metrics such as first and most recent order dates, average order value, lifetime total spent, refunded amounts, order counts, and various aggregations related to quantity, tax, discounts, and shipping. The query also includes customer tags and filters out certain transaction types. The result provides a comprehensive overview of each customer's purchasing behavior and order history.","[""Filtering"",""Integration"",""Aggregation"",""Featurization""]"
model.shopify.shopify__orders__order_refunds,"This SQL query integrates data from two staging tables: 'stg_shopify__refund' and 'stg_shopify__order_line_refund'. It joins these tables based on the refund_id and source_relation columns, combining information about refunds with their corresponding order line details. The query selects all columns from both tables, providing a comprehensive view of refund information along with associated order line refund data.","[""Integration""]"
model.shopify.int_shopify__daily_orders,"This SQL query performs daily aggregations of Shopify order and order line data. It combines information from orders and order lines, calculating various metrics such as order counts, customer counts, sales totals, discounts, refunds, and product quantities. The query also includes time-based aggregations and creates a comprehensive daily summary of order-related activities and financial metrics.","[""Filtering"",""Integration"",""Aggregation"",""Featurization""]"
model.shopify.int_shopify__daily_abandoned_checkouts,"This SQL query analyzes abandoned checkouts in a Shopify database. It first filters out deleted checkouts, then aggregates daily data on abandoned checkouts, including counts of unique checkouts, customers, and customer emails. The results are grouped by source relation and date.","[""Filtering"",""Featurization"",""Aggregation""]"
model.shopify.int_shopify__customer_email_rollup,"This SQL query creates a rolled-up view of customer data from Shopify. It combines customer information with their tags, groups customers by email address, and aggregates various attributes. The query performs deduplication by using ROW_NUMBER() to identify the most recent customer record for each email. It also cleans the email addresses by converting them to lowercase. The query integrates customer data with customer tags and aggregates multiple fields, including customer IDs, phone numbers, tags, and various timestamps. It also handles boolean fields by taking the maximum value.","[""Cleaning"",""Deduplication"",""Integration"",""Aggregation""]"
model.shopify.int_shopify__discounts__abandoned_checkouts,"This SQL query analyzes abandoned checkouts and their associated discounts in a Shopify dataset. It filters out deleted checkouts and empty discount types, joins relevant tables (abandoned checkouts, discount codes, and shipping lines), aggregates data on discounts, prices, and customer counts, and presents a summary of abandoned checkouts grouped by discount code, type, and source relation.","[""Filtering"",""Integration"",""Aggregation""]"
model.shopify.int_shopify__product__order_line_aggregates,"This SQL query aggregates data from Shopify order lines and orders to create product-level metrics. It calculates various sales statistics for each product, including quantity sold, subtotal, refunds, first and most recent order dates, discounts, taxes, and average quantities and amounts per order line. The query joins order lines with orders and groups the results by product ID and source relation.","[""Integration"",""Aggregation"",""Featurization""]"
model.shopify.int_shopify__emails__order_aggregates,"This SQL query aggregates and analyzes customer order data from Shopify. It combines information from various tables including orders, transactions, customers, and order line aggregates. The query calculates several metrics for each customer email and source relation, such as first and most recent order timestamps, average order value, lifetime total spent, refunded amounts, order counts, and various aggregations related to quantity, tax, discounts, and shipping. The result provides a comprehensive view of customer purchasing behavior and order statistics.","[""Filtering"",""Cleaning"",""Integration"",""Aggregation"",""Featurization""]"
model.shopify.int_shopify__order__shipping_aggregates,"This SQL query calculates shipping-related aggregates for Shopify orders. It joins order shipping line data with order shipping tax line data, then aggregates the shipping price, discounted shipping price, and shipping tax for each order. The result provides a summary of shipping costs and taxes per order.","[""Integration"",""Aggregation""]"
model.shopify.int_shopify__discounts__order_aggregates,"This SQL query aggregates order discount data from Shopify. It joins order discount codes with order details, then calculates various metrics such as average and total discount amounts, total order prices, shipping costs, refund amounts, and counts of unique customers and orders for each discount code. The results are grouped by discount code, type, and source relation.","[""Integration"",""Aggregation""]"
model.shopify.int_shopify__products_with_aggregates,"This SQL query integrates data from multiple Shopify-related tables to create a comprehensive view of products. It joins product information with aggregated data from collections, tags, variants, and images. The query performs several aggregations, including collecting collections and tags into comma-separated lists, counting variants and images, and determining if a product has an image. The result is a detailed product dataset with additional attributes derived from related tables.","[""Integration"",""Aggregation"",""Featurization""]"
model.shopify.shopify__orders__order_line_aggregates,"This SQL query aggregates order-related data from various Shopify tables. It calculates metrics such as line item count, total quantity, total tax, total discount, shipping costs, and shipping taxes for each order. The query joins information from order lines, tax lines, and shipping details to create a comprehensive summary of order aggregates.","[""Integration"",""Aggregation""]"
model.shopify.int_shopify__inventory_level__aggregates,"This SQL query aggregates inventory-related data from Shopify orders, focusing on sales, refunds, and fulfillment statistics. It joins various tables (orders, order lines, fulfillments, and refunds) to create a comprehensive view of inventory movements. The query calculates metrics such as total sales, quantity sold, unique orders and customers, first and last order dates, fulfillment status counts, and refund information. The results are grouped by variant ID, location ID, and source relation.","[""Integration"",""Aggregation"",""Cleaning"",""Featurization""]"
model.shopify.shopify__calendar,"This SQL query generates a calendar table with daily dates from January 1, 2019, up to the current date. It uses a clever bit manipulation technique to create a sequence of numbers, which are then transformed into dates. The result is a filtered list of dates within the specified range.","[""Featurization"",""Filtering"",""Other""]"
model.shopify_source.stg_shopify__abandoned_checkout_shipping_line,"This SQL query performs a data transformation on the 'stg_shopify__abandoned_checkout_shipping_line_tmp' table. It casts various columns to specific data types, renames some columns, and adds a new column 'source_relation'. The query also converts the '_fivetran_synced' timestamp to UTC timezone. The purpose seems to be standardizing and cleaning the data for further use.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__transaction,"This SQL query stages data from a Shopify transactions source table. It casts various fields to specific data types, renames some columns, converts timezone for timestamp fields to UTC, and filters out test transactions. The query prepares the data for further processing or analysis by standardizing the structure and ensuring data quality.","[""Cleaning"",""Filtering""]"
model.shopify_source.stg_shopify__fulfillment,"This SQL query stages data from a Shopify fulfillment source table. It casts columns to specific data types, renames some columns, converts timestamps to UTC, and standardizes the status field to lowercase. The query also adds a source_relation column, though its value is set to an empty string in this case.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__product_image,"This SQL query processes data from a staging table for Shopify product images. It casts various fields to specific data types, renames some columns, converts timestamp fields to UTC, and filters out deleted records. The query also adds a source_relation field and restructures the data for further use.","[""Cleaning"",""Filtering""]"
model.shopify_source.stg_shopify__collection_product,"This SQL query creates a staging table for Shopify collection product data. It starts with a base CTE that selects all columns from a temporary table. Then, it defines a fields CTE that casts specific columns to desired data types, including setting some to NULL or empty string. Finally, it creates a final CTE that selects and formats these fields, particularly converting the _fivetran_synced timestamp to UTC. The query then selects all columns from this final CTE.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__discount_code,"This SQL query creates a staging table for Shopify discount codes. It starts with a base table, then defines a structure with NULL or empty values for all fields. The final step formats and transforms these fields, including converting timestamps to UTC, uppercasing the discount code, and renaming the ID field. The query is designed to prepare a consistent structure for discount code data, even when no actual data exists yet.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__inventory_level,"This SQL query stages data from a temporary Shopify inventory level table. It casts columns to specific data types, renames the 'available' column to 'available_quantity', and converts 'updated_at' and '_fivetran_synced' timestamps to UTC. The query prepares the data for further processing or analysis by standardizing the format and structure of the inventory level information.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__customer,"This SQL query transforms and cleans data from a Shopify customer staging table. It casts various fields to appropriate data types, standardizes email and state fields to lowercase, handles legacy and new marketing consent fields, converts timestamps to UTC, and renames some columns for clarity.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__order,"This SQL query stages and transforms data from a Shopify orders table. It casts various fields to appropriate data types, renames some columns, converts timestamps to UTC, and applies some basic transformations like lowercasing email addresses. The query also filters out test orders and deleted records.","[""Cleaning"",""Filtering"",""Featurization""]"
model.shopify_source.stg_shopify__order_adjustment,"This SQL query creates a staging table for Shopify order adjustments. It starts with a base table that is currently empty, then defines a structure with null or empty values for all fields. The query then renames some fields, converts the _fivetran_synced timestamp to UTC, and selects all columns from the final CTE. This appears to be a placeholder structure that will be populated with actual data once order adjustments are made in Shopify.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__order_tag,"This SQL query creates a staging table for Shopify order tags. It starts with a base table, then defines the structure of the fields with appropriate data types. The final step converts the _fivetran_synced timestamp to UTC. The query doesn't perform any filtering, deduplication, or aggregation, but it does some basic data type casting and timezone conversion.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__customer_tag,"This SQL query creates a staging table for Shopify customer tags. It starts with a base table, then defines the structure of the fields with null or empty values. Finally, it selects these fields, converting the '_fivetran_synced' timestamp to UTC. The query appears to be setting up a standardized structure for customer tag data, possibly as part of an ETL process.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__order_note_attribute,"This SQL query creates a staging table for Shopify order note attributes. It starts with a base CTE that selects all columns from a temporary table. Then, it defines a fields CTE that casts specific columns to desired data types and adds a source_relation column. Finally, it creates a final CTE that selects and formats the columns, including converting the _fivetran_synced timestamp to UTC. The query then selects all columns from the final CTE.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__product,"This SQL query performs data transformation and cleaning on a Shopify product staging table. It casts various fields to specific data types, renames some columns, and converts timestamp fields to UTC timezone. The query also adds a 'source_relation' field and an 'is_deleted' flag based on the '_fivetran_deleted' column.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__metafield,"This SQL query processes data from a staging table for Shopify metafields. It performs several operations including casting data types, cleaning and standardizing column values, creating new features, and deduplicating records. The query also converts timestamps to UTC and creates a flag for the most recent record for each metafield.","[""Cleaning"",""Featurization"",""Deduplication""]"
model.shopify_source.stg_shopify__product_variant,"This SQL query performs data cleaning and transformation on a Shopify product variant dataset. It starts by casting columns to specific data types, renames some columns, and performs time zone conversions for timestamp fields. The query also coalesces inventory quantity fields and adjusts the boolean representation of the 'taxable' field.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__price_rule,"This SQL query stages data from a Shopify price rule source table. It casts fields to appropriate data types, renames some columns for clarity, and converts timestamp fields to UTC. The query also adds a source_relation field and selects all columns from the transformed data.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__abandoned_checkout_discount_code,"This SQL query performs several operations on the 'stg_shopify__abandoned_checkout_discount_code' data. It starts by casting fields to specific data types, then applies data cleaning and standardization. The query converts timestamps to UTC, uppercases the 'code' field, and creates a unique index for each row. Finally, it deduplicates the data by keeping only the row with index 1 for each combination of checkout_id, code, and source_relation.","[""Cleaning"",""Deduplication"",""Featurization""]"
model.shopify_source.stg_shopify__product_tag,"This SQL query performs a basic transformation on data from a staging table. It casts several columns to specific data types, including setting some to NULL or empty string. The query also converts the '_fivetran_synced' timestamp to UTC timezone. The purpose seems to be standardizing the data structure and preparing it for further use.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__inventory_item,"This SQL query performs data transformation and cleaning on the Shopify inventory item data. It starts by selecting all columns from a temporary table, then casts them to specific data types. The query renames some columns, converts timestamps to UTC, and restructures the data for further use. It also adds a source_relation column, though it's set to an empty string in this case.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__order_discount_code,"This SQL query performs data cleaning and standardization on the 'stg_shopify__order_discount_code' model. It casts various fields to specific data types, converts the '_fivetran_synced' timestamp to UTC, and uppercases the 'code' field. The query also adds a 'source_relation' field, which is set to an empty string.","[""Cleaning""]"
model.shopify_source.stg_shopify__order_url_tag,"This SQL query creates a staging table for Shopify order URL tags. It starts with a base table, then defines a fields structure with specific data types for each column. The final step converts the '_fivetran_synced' timestamp to UTC timezone. The query primarily focuses on data type casting and minimal transformation.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__refund,"This SQL query creates a staging table for Shopify refund data. It starts with a base CTE that selects all columns from a temporary table. Then, it defines a fields CTE that casts all columns to specific data types, initially setting them to NULL or empty strings. Finally, it selects and renames some columns, converts timestamp fields to UTC, and prepares the data for further processing.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__location,"This SQL query performs a staging operation for Shopify location data. It starts by selecting all columns from a temporary table, then casts all fields to specific data types (creating null values in the process). The query then renames and reorganizes some columns, converts timezone for timestamp fields, and adds a source_relation column. This appears to be a data cleaning and standardization step in an ETL process.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__collection,"This SQL query performs data cleaning and transformation on a Shopify collection dataset. It casts various fields to appropriate data types, renames some columns, and applies specific transformations such as converting the 'disjunctive' boolean field into a text field with 'disjunctive' or 'conjunctive' values. It also converts timestamp fields to UTC timezone. The query doesn't filter, deduplicate, or aggregate data, but focuses on standardizing and cleaning the existing data.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__order_line,"This SQL query performs a staging operation for Shopify order line data. It starts by selecting all columns from a temporary table, then casts them to specific data types in the 'fields' CTE. The 'final' CTE renames some columns, applies minor transformations (like converting boolean fields to 'is_' prefixed columns), and converts the '_fivetran_synced' timestamp to UTC. The query ultimately selects all columns from the 'final' CTE.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__order_line_refund,"This SQL query creates a staging table for Shopify order line refunds. It starts with a base table, then defines a fields CTE that casts all columns to specific data types with NULL values. The final CTE renames some columns and converts the _fivetran_synced timestamp to UTC. The query is designed to create a structure for order line refund data, even when no actual refunds have been made yet in Shopify.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__order_shipping_tax_line,"This SQL query creates a staging table for Shopify order shipping tax line data. It starts with a base table, then defines a fields CTE that sets up the structure with NULL or empty values for each column. The final CTE selects these fields, converting the _fivetran_synced timestamp to UTC. The main purpose appears to be setting up a consistent structure for this data, possibly as part of a larger ETL process.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__tender_transaction,"This SQL query performs data transformation and cleaning on a Shopify tender transaction dataset. It starts by selecting all columns from a temporary staging table, then defines a set of fields with specific data types. The query then selects and renames certain fields, converts timestamps to UTC, and filters out test transactions. The result is a cleaned and standardized version of the tender transaction data.","[""Cleaning"",""Filtering""]"
model.shopify_source.stg_shopify__shop,"This SQL query processes data from a Shopify shop source table. It performs type casting, renames some columns, and applies various transformations to clean and standardize the data. The query also creates new boolean fields from existing data and converts timezone for timestamp fields. It's primarily focused on data cleaning and light featurization.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__tax_line,"This SQL query creates a staging table for tax line data from a Shopify source. It starts with a base table, then defines a fields CTE that casts columns to specific data types, including several NULL casts. The final CTE selects these fields, converts the _fivetran_synced timestamp to UTC, and includes a source_relation column. The main query then selects all columns from the final CTE.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__order_shipping_line,"This SQL query performs a staged transformation of Shopify order shipping line data. It starts by selecting all columns from a temporary staging table, then casts these columns to specific data types in the 'fields' CTE. The 'final' CTE renames some columns, creates a boolean field 'is_third_party_required' based on the 'requested_fulfillment_service_id' column, and converts the '_fivetran_synced' timestamp to UTC. The query primarily focuses on cleaning and structuring the data for further use.","[""Cleaning"",""Featurization""]"
model.shopify_source.stg_shopify__abandoned_checkout,"This SQL query performs a series of data transformations on the 'stg_shopify__abandoned_checkout_tmp' table. It starts by creating a base CTE that selects all columns from the source table. Then, it defines a 'fields' CTE that casts all columns to specific data types, including several NULL casts. Finally, in the 'final' CTE, it renames some columns, converts timestamps to UTC, and applies some semantic changes (like renaming '_fivetran_deleted' to 'is_deleted'). The query doesn't filter or aggregate data, but primarily focuses on data type casting and column renaming/reformatting.","[""Cleaning"",""Other""]"
model.shopify_source.stg_shopify__collection_product_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, which is set to NULL. The query limits the result to 0 rows, effectively creating a template or structure for the table without any actual data.","[""Other""]"
model.shopify_source.stg_shopify__order_line_refund_tmp,This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. The query is designed to return no rows (LIMIT 0) and is likely used as a placeholder or template for future data when order line refunds are made in Shopify.,"[""Other""]"
model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, which is set to NULL. The LIMIT 0 clause ensures no rows are returned. This query appears to be a placeholder or template for a staging table in a dbt (data build tool) project, specifically for Shopify abandoned checkout discount codes.","[""Other""]"
model.shopify_source.stg_shopify__metafield_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, which is set to NULL. The query limits the result to 0 rows, effectively returning no data. This type of query is often used as a placeholder or template in data modeling processes, particularly in dbt (data build tool) projects.","[""Other""]"
model.shopify_source.stg_shopify__refund_tmp,"This SQL query creates a placeholder or dummy table for the 'model.shopify_source.stg_shopify__refund_tmp' model. It selects a single column named '_dbt_source_relation' with a NULL value of TEXT type, but limits the result to 0 rows. This effectively creates an empty table structure that can be used as a template or placeholder until actual refund data is available in Shopify.","[""Other""]"
model.shopify_source.stg_shopify__tax_line_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for a staging table in a dbt (data build tool) project, specifically for Shopify tax line data.","[""Other""]"
model.shopify_source.stg_shopify__order_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for further operations in a dbt (data build tool) project, specifically for a staging model related to Shopify orders.","[""Other""]"
model.shopify_source.stg_shopify__customer_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, which is set to NULL. The LIMIT 0 clause ensures no rows are returned. This type of query is often used as a placeholder or to create a template for a table structure without populating it with data.","[""Other""]"
model.shopify_source.stg_shopify__transaction_tmp,This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for further data manipulation or as a starting point for a more complex query.,"[""Other""]"
model.shopify_source.stg_shopify__order_shipping_tax_line_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of TEXT data type. It's likely used as a placeholder or template for a staging table in a dbt (data build tool) project, specifically for Shopify order shipping tax line data.","[""Other""]"
model.shopify_source.stg_shopify__inventory_item_tmp,This SQL query creates an empty result set with a single column named '_dbt_source_relation' of TEXT data type. It's likely used as a placeholder or template for further development or testing purposes in a dbt (data build tool) project.,"[""Other""]"
model.shopify_source.stg_shopify__customer_tag_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for a staging table in a dbt (data build tool) project, specifically for Shopify customer tag data.","[""Other""]"
model.shopify_source.stg_shopify__fulfillment_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, which is set to NULL. The LIMIT 0 clause ensures no rows are returned. This query is likely used as a placeholder or template for generating a schema without actual data.","[""Other""]"
model.shopify_source.stg_shopify__order_note_attribute_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, which is set to NULL. The LIMIT 0 ensures no rows are returned. This is likely used as a placeholder or template for a staging table in a dbt (data build tool) project.","[""Other""]"
model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, which is set to NULL. The query is limited to 0 rows, effectively creating a template or schema for the 'stg_shopify__abandoned_checkout_shipping_line_tmp' model without actually returning any data.","[""Other""]"
model.shopify_source.stg_shopify__order_adjustment_tmp,This SQL query creates an empty temporary staging table for Shopify order adjustments. It selects a single NULL column named '_dbt_source_relation' with a TEXT data type and limits the result to 0 rows. The comment indicates that this model will remain empty until an order adjustment is made in Shopify.,"[""Other""]"
model.shopify_source.stg_shopify__order_url_tag_tmp,This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for further development or as a temporary staging table in a data pipeline.,"[""Other""]"
model.shopify_source.stg_shopify__collection_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of TEXT data type. It's likely used as a placeholder or template for a staging table in a dbt (data build tool) project, specifically for Shopify collection data.","[""Other""]"
model.shopify_source.stg_shopify__product_image_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, initialized to NULL. The LIMIT 0 clause ensures no rows are returned. This is likely used as a template or placeholder for a staging table in a dbt (data build tool) project.","[""Other""]"
model.shopify_source.stg_shopify__abandoned_checkout_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, initialized to NULL. It's likely used as a placeholder or template for further development or testing purposes.","[""Other""]"
model.shopify_source.stg_shopify__order_line_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for further operations in a dbt (data build tool) project, specifically for staging Shopify order line data.","[""Other""]"
model.shopify_source.stg_shopify__price_rule_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of TEXT data type, initialized as NULL. The LIMIT 0 clause ensures no rows are returned. This query appears to be a placeholder or template, possibly used for schema definition or testing purposes in a dbt (data build tool) project.","[""Other""]"
model.shopify_source.stg_shopify__shop_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, initialized to NULL. The LIMIT 0 clause ensures no rows are returned. This is likely used as a template or placeholder for a staging table in a dbt (data build tool) project.","[""Other""]"
model.shopify_source.stg_shopify__order_discount_code_tmp,This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It doesn't retrieve any actual data and is likely used as a placeholder or template for further development.,"[""Other""]"
model.shopify_source.stg_shopify__product_tmp,This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for further operations in a dbt (data build tool) model.,"[""Other""]"
model.shopify_source.stg_shopify__discount_code_tmp,This SQL query creates an empty dataset with a single column named '_dbt_source_relation' of type TEXT. The query is designed to return no rows (LIMIT 0) and is intended as a placeholder until actual discount code data is created in Shopify.,"[""Other""]"
model.shopify_source.stg_shopify__product_variant_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of TEXT data type. It's likely used as a placeholder or template for a staging table in a dbt (data build tool) project, specifically for Shopify product variant data.","[""Other""]"
model.shopify_source.stg_shopify__location_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for a staging table in a dbt (data build tool) project, specifically for Shopify location data.","[""Other""]"
model.shopify_source.stg_shopify__tender_transaction_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for further operations in a dbt (data build tool) project, specifically for the 'stg_shopify__tender_transaction_tmp' model in the Shopify source.","[""Other""]"
model.shopify_source.stg_shopify__inventory_level_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of TEXT data type, which is set to NULL. The query is limited to 0 rows, effectively creating a template or placeholder for the structure of the 'stg_shopify__inventory_level_tmp' model without containing any actual data.","[""Other""]"
model.shopify_source.stg_shopify__order_shipping_line_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT, which is set to NULL. The query is limited to 0 rows, effectively creating a template or placeholder for the structure of the 'stg_shopify__order_shipping_line_tmp' model without actually returning any data.","[""Other""]"
model.shopify_source.stg_shopify__product_tag_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of TEXT data type, initially set to NULL. The query is limited to 0 rows, effectively creating a template or skeleton for the 'stg_shopify__product_tag_tmp' model without any actual data.","[""Other""]"
model.shopify_source.stg_shopify__order_tag_tmp,"This SQL query creates an empty result set with a single column named '_dbt_source_relation' of type TEXT. It's likely used as a placeholder or template for a staging table in a dbt (data build tool) project, specifically for Shopify order tag data.","[""Other""]"
