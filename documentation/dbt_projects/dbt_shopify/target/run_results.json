{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-08-04T02:53:24.776355Z", "invocation_id": "86fa5864-87c3-4531-b7df-afa4bcea82cb", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:53.988883Z", "completed_at": "2024-08-04T02:52:55.241725Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:55.242170Z", "completed_at": "2024-08-04T02:52:55.242187Z"}], "thread_id": "Thread-1", "execution_time": 1.4392192363739014, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__calendar", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2041\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2019-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date\n\n)\n\nselect * from filtered\n\n", "relation_name": "TEST.PUBLIC_shopify.shopify__calendar"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:55.430392Z", "completed_at": "2024-08-04T02:52:56.109327Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.109751Z", "completed_at": "2024-08-04T02:52:56.109764Z"}], "thread_id": "Thread-1", "execution_time": 0.8511688709259033, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_discount_code_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.283393Z", "completed_at": "2024-08-04T02:52:56.292081Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.292710Z", "completed_at": "2024-08-04T02:52:56.292724Z"}], "thread_id": "Thread-1", "execution_time": 0.010646581649780273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_shipping_line_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.296157Z", "completed_at": "2024-08-04T02:52:56.302301Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.302836Z", "completed_at": "2024-08-04T02:52:56.302847Z"}], "thread_id": "Thread-1", "execution_time": 0.0083160400390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.305616Z", "completed_at": "2024-08-04T02:52:56.310505Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.310952Z", "completed_at": "2024-08-04T02:52:56.310960Z"}], "thread_id": "Thread-1", "execution_time": 0.006643533706665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__collection_product_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.313132Z", "completed_at": "2024-08-04T02:52:56.318824Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.319472Z", "completed_at": "2024-08-04T02:52:56.319487Z"}], "thread_id": "Thread-1", "execution_time": 0.007552623748779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__collection_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.322635Z", "completed_at": "2024-08-04T02:52:56.331395Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.331792Z", "completed_at": "2024-08-04T02:52:56.331801Z"}], "thread_id": "Thread-1", "execution_time": 0.010540008544921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__customer_tag_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.333951Z", "completed_at": "2024-08-04T02:52:56.338693Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.339077Z", "completed_at": "2024-08-04T02:52:56.339083Z"}], "thread_id": "Thread-1", "execution_time": 0.00619053840637207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__customer_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.341209Z", "completed_at": "2024-08-04T02:52:56.345551Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.345955Z", "completed_at": "2024-08-04T02:52:56.345961Z"}], "thread_id": "Thread-1", "execution_time": 0.0056819915771484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__discount_code_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.348028Z", "completed_at": "2024-08-04T02:52:56.352265Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.352647Z", "completed_at": "2024-08-04T02:52:56.352653Z"}], "thread_id": "Thread-1", "execution_time": 0.0056378841400146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__fulfillment_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.354621Z", "completed_at": "2024-08-04T02:52:56.360075Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.360445Z", "completed_at": "2024-08-04T02:52:56.360451Z"}], "thread_id": "Thread-1", "execution_time": 0.006808280944824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__inventory_item_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.362943Z", "completed_at": "2024-08-04T02:52:56.369260Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.369866Z", "completed_at": "2024-08-04T02:52:56.369875Z"}], "thread_id": "Thread-1", "execution_time": 0.008227109909057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__inventory_level_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.373164Z", "completed_at": "2024-08-04T02:52:56.379042Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.379463Z", "completed_at": "2024-08-04T02:52:56.379473Z"}], "thread_id": "Thread-1", "execution_time": 0.007753133773803711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__location_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.381640Z", "completed_at": "2024-08-04T02:52:56.386181Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.386571Z", "completed_at": "2024-08-04T02:52:56.386578Z"}], "thread_id": "Thread-1", "execution_time": 0.005867481231689453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__metafield_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.389111Z", "completed_at": "2024-08-04T02:52:56.397310Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.397697Z", "completed_at": "2024-08-04T02:52:56.397706Z"}], "thread_id": "Thread-1", "execution_time": 0.010002374649047852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_adjustment_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.399898Z", "completed_at": "2024-08-04T02:52:56.406485Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.407115Z", "completed_at": "2024-08-04T02:52:56.407125Z"}], "thread_id": "Thread-1", "execution_time": 0.008448600769042969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_discount_code_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.410389Z", "completed_at": "2024-08-04T02:52:56.415863Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.416252Z", "completed_at": "2024-08-04T02:52:56.416261Z"}], "thread_id": "Thread-1", "execution_time": 0.0073506832122802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_line_refund_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.418507Z", "completed_at": "2024-08-04T02:52:56.423131Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.423571Z", "completed_at": "2024-08-04T02:52:56.423578Z"}], "thread_id": "Thread-1", "execution_time": 0.006199836730957031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_line_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.425767Z", "completed_at": "2024-08-04T02:52:56.430216Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.430594Z", "completed_at": "2024-08-04T02:52:56.430600Z"}], "thread_id": "Thread-1", "execution_time": 0.005768775939941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_note_attribute_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.432678Z", "completed_at": "2024-08-04T02:52:56.439682Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.440296Z", "completed_at": "2024-08-04T02:52:56.440305Z"}], "thread_id": "Thread-1", "execution_time": 0.008662939071655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_line_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.443569Z", "completed_at": "2024-08-04T02:52:56.449233Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.449624Z", "completed_at": "2024-08-04T02:52:56.449634Z"}], "thread_id": "Thread-1", "execution_time": 0.007647991180419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_tax_line_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.451827Z", "completed_at": "2024-08-04T02:52:56.456142Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.456515Z", "completed_at": "2024-08-04T02:52:56.456521Z"}], "thread_id": "Thread-1", "execution_time": 0.005746603012084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_tag_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.458574Z", "completed_at": "2024-08-04T02:52:56.462840Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.463220Z", "completed_at": "2024-08-04T02:52:56.463226Z"}], "thread_id": "Thread-1", "execution_time": 0.005662441253662109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.465439Z", "completed_at": "2024-08-04T02:52:56.470596Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.470982Z", "completed_at": "2024-08-04T02:52:56.470988Z"}], "thread_id": "Thread-1", "execution_time": 0.006651401519775391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_url_tag_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.473205Z", "completed_at": "2024-08-04T02:52:56.477949Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.478356Z", "completed_at": "2024-08-04T02:52:56.478364Z"}], "thread_id": "Thread-1", "execution_time": 0.006171464920043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__price_rule_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.480511Z", "completed_at": "2024-08-04T02:52:56.484724Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.485106Z", "completed_at": "2024-08-04T02:52:56.485112Z"}], "thread_id": "Thread-1", "execution_time": 0.005661964416503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__product_image_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.487172Z", "completed_at": "2024-08-04T02:52:56.491433Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.491817Z", "completed_at": "2024-08-04T02:52:56.491824Z"}], "thread_id": "Thread-1", "execution_time": 0.005733013153076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__product_tag_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.493672Z", "completed_at": "2024-08-04T02:52:56.499861Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.500439Z", "completed_at": "2024-08-04T02:52:56.500454Z"}], "thread_id": "Thread-1", "execution_time": 0.007749319076538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__product_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.502681Z", "completed_at": "2024-08-04T02:52:56.508673Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.509091Z", "completed_at": "2024-08-04T02:52:56.509098Z"}], "thread_id": "Thread-1", "execution_time": 0.007336854934692383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__product_variant_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.511308Z", "completed_at": "2024-08-04T02:52:56.515867Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.516240Z", "completed_at": "2024-08-04T02:52:56.516246Z"}], "thread_id": "Thread-1", "execution_time": 0.0058498382568359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a refund in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__refund_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.518271Z", "completed_at": "2024-08-04T02:52:56.522499Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.522886Z", "completed_at": "2024-08-04T02:52:56.522893Z"}], "thread_id": "Thread-1", "execution_time": 0.005604982376098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__shop_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.524978Z", "completed_at": "2024-08-04T02:52:56.529967Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.530340Z", "completed_at": "2024-08-04T02:52:56.530347Z"}], "thread_id": "Thread-1", "execution_time": 0.006367921829223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__tax_line_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.532479Z", "completed_at": "2024-08-04T02:52:56.536612Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.537011Z", "completed_at": "2024-08-04T02:52:56.537019Z"}], "thread_id": "Thread-1", "execution_time": 0.005629777908325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__tender_transaction_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.539259Z", "completed_at": "2024-08-04T02:52:56.544646Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:56.545204Z", "completed_at": "2024-08-04T02:52:56.545212Z"}], "thread_id": "Thread-1", "execution_time": 0.007032155990600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__transaction_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:56.548014Z", "completed_at": "2024-08-04T02:52:57.108851Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:57.109297Z", "completed_at": "2024-08-04T02:52:57.109310Z"}], "thread_id": "Thread-1", "execution_time": 0.7440817356109619, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_discount_code_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as integer) as \n    \n    checkout_id\n    \n , \n    cast(null as TEXT) as \n    \n    code\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as integer) as \n    \n    discount_id\n    \n , \n    cast(null as integer) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    type\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        checkout_id,\n        upper(code) as code,\n        discount_id,\n        amount,\n        type,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation, \n        case when checkout_id is null and code is null and index is null\n            then row_number() over(partition by source_relation order by source_relation)\n            else row_number() over(partition by checkout_id, upper(code), source_relation order by index desc)\n        end as index\n\n    from fields\n    \n)\n\nselect *\nfrom final\nwhere index = 1", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_discount_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:57.293740Z", "completed_at": "2024-08-04T02:52:57.846083Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:57.846718Z", "completed_at": "2024-08-04T02:52:57.846734Z"}], "thread_id": "Thread-1", "execution_time": 0.7422966957092285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_shipping_line_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    carrier_identifier\n    \n , \n    cast(null as integer) as \n    \n    checkout_id\n    \n , \n    cast(null as TEXT) as \n    \n    code\n    \n , \n    cast(null as TEXT) as \n    \n    delivery_category\n    \n , \n    cast(null as TEXT) as \n    \n    delivery_expectation_range\n    \n , \n    cast(null as integer) as \n    \n    delivery_expectation_range_max\n    \n , \n    cast(null as integer) as \n    \n    delivery_expectation_range_min\n    \n , \n    cast(null as TEXT) as \n    \n    delivery_expectation_type\n    \n , \n    cast(null as float) as \n    \n    discounted_price\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as integer) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as float) as \n    \n    price\n    \n , \n    cast(null as TEXT) as \n    \n    requested_fulfillment_service_id\n    \n , \n    cast(null as TEXT) as \n    \n    source\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as abandoned_checkout_shipping_line_id,\n        checkout_id,\n        index,\n        carrier_identifier,\n        code as shipping_code,\n        delivery_category,\n        delivery_expectation_range,\n        delivery_expectation_range_max,\n        delivery_expectation_range_min,\n        delivery_expectation_type,\n        discounted_price,\n        phone,\n        price,\n        requested_fulfillment_service_id,\n        source,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_shipping_line"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:58.037685Z", "completed_at": "2024-08-04T02:52:58.576243Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:58.576660Z", "completed_at": "2024-08-04T02:52:58.576675Z"}], "thread_id": "Thread-1", "execution_time": 0.7287230491638184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    abandoned_checkout_url\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_address_1\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_address_2\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_city\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_company\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_country\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_country_code\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_first_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_latitude\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_longitude\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_phone\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_province\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_province_code\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_zip\n    \n , \n    cast(null as boolean) as \n    \n    buyer_accepts_marketing\n    \n , \n    cast(null as TEXT) as \n    \n    cart_token\n    \n , \n    cast(null as timestamp) as \n    \n    closed_at\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n , \n    cast(null as integer) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_locale\n    \n , \n    cast(null as integer) as \n    \n    device_id\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    gateway\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    landing_site_base_url\n    \n , \n    cast(null as integer) as \n    \n    location_id\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as TEXT) as \n    \n    note\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as TEXT) as \n    \n    presentment_currency\n    \n , \n    cast(null as TEXT) as \n    \n    referring_site\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_address_1\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_address_2\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_city\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_company\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_country\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_country_code\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_first_name\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_latitude\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_longitude\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_name\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_phone\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_province\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_province_code\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_zip\n    \n , \n    cast(null as TEXT) as \n    \n    source_name\n    \n , \n    cast(null as float) as \n    \n    subtotal_price\n    \n , \n    cast(null as boolean) as \n    \n    taxes_included\n    \n , \n    cast(null as TEXT) as \n    \n    token\n    \n , \n    cast(null as float) as \n    \n    total_discounts\n    \n , \n    cast(null as TEXT) as \n    \n    total_duties\n    \n , \n    cast(null as float) as \n    \n    total_line_items_price\n    \n , \n    cast(null as float) as \n    \n    total_price\n    \n , \n    cast(null as float) as \n    \n    total_tax\n    \n , \n    cast(null as integer) as \n    \n    total_weight\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as integer) as \n    \n    user_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted as is_deleted,\n        abandoned_checkout_url,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        cart_token,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(closed_at as timestamp) as timestamp)\n) as closed_at,\n        currency as shop_currency,\n        customer_id,\n        customer_locale,\n        device_id,\n        email,\n        gateway,\n        id as checkout_id,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        phone,\n        presentment_currency,\n        referring_site,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        token,\n        total_discounts,\n        total_duties,\n        total_line_items_price,\n        total_price,\n        total_tax,\n        total_weight,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        user_id,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:58.768410Z", "completed_at": "2024-08-04T02:52:59.291617Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:59.292043Z", "completed_at": "2024-08-04T02:52:59.292058Z"}], "thread_id": "Thread-1", "execution_time": 0.7094841003417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__collection_product_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    collection_id\n    \n , \n    cast(null as integer) as \n    \n    product_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        collection_id,\n        product_id,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__collection_product"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:52:59.480881Z", "completed_at": "2024-08-04T02:52:59.986384Z"}, {"name": "execute", "started_at": "2024-08-04T02:52:59.986993Z", "completed_at": "2024-08-04T02:52:59.987008Z"}], "thread_id": "Thread-1", "execution_time": 0.6758897304534912, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__collection_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    disjunctive\n    \n , \n    cast(null as TEXT) as \n    \n    handle\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as timestamp) as \n    \n    published_at\n    \n , \n    cast(null as TEXT) as \n    \n    published_scope\n    \n , \n    cast(null as TEXT) as \n    \n    rules\n    \n , \n    cast(null as TEXT) as \n    \n    sort_order\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as collection_id,\n        _fivetran_deleted as is_deleted,\n        case \n            when disjunctive is null then null\n            when disjunctive then 'disjunctive'\n            else 'conjunctive' end as rule_logic,\n        handle,\n        published_scope,\n        rules,\n        sort_order,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(published_at as timestamp) as timestamp)\n) as published_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__collection"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:00.158707Z", "completed_at": "2024-08-04T02:53:00.710949Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:00.711378Z", "completed_at": "2024-08-04T02:53:00.711393Z"}], "thread_id": "Thread-1", "execution_time": 0.7358682155609131, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer_tag_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    index\n    \n , \n    cast(null as integer) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        index,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__customer_tag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:00.897073Z", "completed_at": "2024-08-04T02:53:01.443292Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:01.443788Z", "completed_at": "2024-08-04T02:53:01.443804Z"}], "thread_id": "Thread-1", "execution_time": 0.7196707725524902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer_tmp\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    accepts_marketing\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    default_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    first_name\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    last_name\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    orders_count\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as boolean) as \n    \n    tax_exempt\n    \n , \n    cast(null as float) as \n    \n    total_spent\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as boolean) as \n    \n    verified_email\n    \n , \n    cast(null as timestamp) as \n    \n    email_marketing_consent_consent_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_state\n    \n , \n    cast(null as TEXT) as \n    \n    note\n    \n , \n    cast(null as timestamp) as \n    \n    accepts_marketing_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    marketing_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as customer_id,\n        lower(email) as email,\n        first_name,\n        last_name,\n        orders_count,\n        default_address_id,\n        phone,\n        lower(state) as account_state,\n        tax_exempt as is_tax_exempt,\n        total_spent,\n        verified_email as is_verified_email,\n        note,\n        currency,\n        case \n            when email_marketing_consent_state is null then\n                case \n                    when accepts_marketing is null then null\n                    when accepts_marketing then 'subscribed (legacy)' \n                    else 'not_subscribed (legacy)' end\n            else lower(email_marketing_consent_state) end as marketing_consent_state,\n        lower(coalesce(email_marketing_consent_opt_in_level, marketing_opt_in_level)) as marketing_opt_in_level,\n\n        convert_timezone('UTC', 'UTC',\n    cast(cast(coalesce(accepts_marketing_updated_at, email_marketing_consent_consent_updated_at) as timestamp) as timestamp)\n) as marketing_consent_updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    \n)\n\nselect * \nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__customer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:01.617866Z", "completed_at": "2024-08-04T02:53:02.161768Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:02.162305Z", "completed_at": "2024-08-04T02:53:02.162322Z"}], "thread_id": "Thread-1", "execution_time": 0.7292482852935791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\nwith base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__discount_code_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    code\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as integer) as \n    \n    price_rule_id\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as float) as \n    \n    usage_count\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as discount_code_id,\n        upper(code) as code,\n        price_rule_id,\n        usage_count,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__discount_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:02.348951Z", "completed_at": "2024-08-04T02:53:02.924130Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:02.924759Z", "completed_at": "2024-08-04T02:53:02.924776Z"}], "thread_id": "Thread-1", "execution_time": 0.7546069622039795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__fulfillment_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as integer) as \n    \n    location_id\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as integer) as \n    \n    order_id\n    \n , \n    cast(null as TEXT) as \n    \n    service\n    \n , \n    cast(null as TEXT) as \n    \n    shipment_status\n    \n , \n    cast(null as TEXT) as \n    \n    status\n    \n , \n    cast(null as TEXT) as \n    \n    tracking_company\n    \n , \n    cast(null as TEXT) as \n    \n    tracking_number\n    \n , \n    cast(null as TEXT) as \n    \n    tracking_numbers\n    \n , \n    cast(null as TEXT) as \n    \n    tracking_urls\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_id,\n        location_id,\n        order_id,\n        name,\n        service,\n        shipment_status,\n        lower(status) as status,\n        tracking_company,\n        tracking_number,\n        tracking_numbers,\n        tracking_urls,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__fulfillment"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:03.106127Z", "completed_at": "2024-08-04T02:53:03.605456Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:03.605897Z", "completed_at": "2024-08-04T02:53:03.605911Z"}], "thread_id": "Thread-1", "execution_time": 0.6765246391296387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__inventory_item_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    cost\n    \n , \n    cast(null as TEXT) as \n    \n    country_code_of_origin\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    province_code_of_origin\n    \n , \n    cast(null as boolean) as \n    \n    requires_shipping\n    \n , \n    cast(null as TEXT) as \n    \n    sku\n    \n , \n    cast(null as boolean) as \n    \n    tracked\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as inventory_item_id,\n        sku,\n        _fivetran_deleted as is_deleted, -- won't filter out for now\n        cost,\n        country_code_of_origin,\n        province_code_of_origin,\n        requires_shipping as is_shipping_required,\n        tracked as is_inventory_quantity_tracked,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__inventory_item"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:03.784752Z", "completed_at": "2024-08-04T02:53:04.414064Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:04.414625Z", "completed_at": "2024-08-04T02:53:04.414640Z"}], "thread_id": "Thread-1", "execution_time": 0.8071460723876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__inventory_level_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    available\n    \n , \n    cast(null as integer) as \n    \n    inventory_item_id\n    \n , \n    cast(null as integer) as \n    \n    location_id\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        inventory_item_id,\n        location_id,\n        available as available_quantity,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__inventory_level"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:04.594169Z", "completed_at": "2024-08-04T02:53:05.654922Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:05.655503Z", "completed_at": "2024-08-04T02:53:05.655520Z"}], "thread_id": "Thread-1", "execution_time": 1.2694141864776611, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__location_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as TEXT) as \n    \n    address_1\n    \n , \n    cast(null as TEXT) as \n    \n    address_2\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as TEXT) as \n    \n    country_code\n    \n , \n    cast(null as TEXT) as \n    \n    country_name\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as boolean) as \n    \n    legacy\n    \n , \n    cast(null as TEXT) as \n    \n    localized_country_name\n    \n , \n    cast(null as TEXT) as \n    \n    localized_province_name\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as TEXT) as \n    \n    province\n    \n , \n    cast(null as TEXT) as \n    \n    province_code\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    zip\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as location_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        active as is_active,\n        address_1,\n        address_2,\n        city,\n        country,\n        country_code,\n        country_name,\n        legacy as is_legacy,\n        localized_country_name,\n        localized_province_name,\n        phone,\n        province,\n        province_code,\n        zip,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__location"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:05.866414Z", "completed_at": "2024-08-04T02:53:06.363691Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:06.364099Z", "completed_at": "2024-08-04T02:53:06.364112Z"}], "thread_id": "Thread-1", "execution_time": 0.6764364242553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__metafield_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    key\n    \n , \n    cast(null as TEXT) as \n    \n    namespace\n    \n , \n    cast(null as integer) as \n    \n    owner_id\n    \n , \n    cast(null as TEXT) as \n    \n    owner_resource\n    \n , \n    cast(null as TEXT) as \n    \n    type\n    \n , \n    cast(null as TEXT) as \n    \n    value_type\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as metafield_id,\n        description,\n        namespace,\n        key,\n        value,\n        lower(coalesce(type, value_type)) as value_type,\n        owner_id as owner_resource_id,\n        lower(owner_resource) as owner_resource,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        lower(namespace || '_' || key) as metafield_reference,\n        case when id is null and updated_at is null\n            then row_number() over(partition by source_relation order by source_relation) = 1\n            else row_number() over(partition by id, source_relation order by updated_at desc) = 1\n        end as is_most_recent_record,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__metafield"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:06.544535Z", "completed_at": "2024-08-04T02:53:07.042193Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:07.042674Z", "completed_at": "2024-08-04T02:53:07.042688Z"}], "thread_id": "Thread-1", "execution_time": 0.670842170715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\nwith base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_adjustment_tmp\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as numeric(28,6)) as \n    \n    id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    order_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    refund_id\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    amount_set\n    \n , \n    cast(null as float) as \n    \n    tax_amount\n    \n , \n    cast(null as TEXT) as \n    \n    tax_amount_set\n    \n , \n    cast(null as TEXT) as \n    \n    kind\n    \n , \n    cast(null as TEXT) as \n    \n    reason\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as order_adjustment_id,\n        order_id,\n        refund_id,\n        amount,\n        amount_set,\n        tax_amount,\n        tax_amount_set,\n        kind,\n        reason,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_adjustment"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:07.216556Z", "completed_at": "2024-08-04T02:53:07.911351Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:07.911967Z", "completed_at": "2024-08-04T02:53:07.911982Z"}], "thread_id": "Thread-1", "execution_time": 0.8922042846679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_discount_code_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    code\n    \n , \n    cast(null as integer) as \n    \n    index\n    \n , \n    cast(null as integer) as \n    \n    order_id\n    \n , \n    cast(null as TEXT) as \n    \n    type\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        upper(code) as code,\n        type,\n        amount,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_discount_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:08.111164Z", "completed_at": "2024-08-04T02:53:08.651659Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:08.652119Z", "completed_at": "2024-08-04T02:53:08.652138Z"}], "thread_id": "Thread-1", "execution_time": 0.7213864326477051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\nwith base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line_refund_tmp\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    location_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    order_line_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    subtotal\n    \n , \n    cast(null as TEXT) as \n    \n    subtotal_set\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    total_tax\n    \n , \n    cast(null as TEXT) as \n    \n    total_tax_set\n    \n , \n    cast(null as float) as \n    \n    quantity\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    refund_id\n    \n , \n    cast(null as TEXT) as \n    \n    restock_type\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as order_line_refund_id,\n        location_id,\n        order_line_id,\n        subtotal,\n        subtotal_set,\n        total_tax,\n        total_tax_set,\n        quantity,\n        refund_id,\n        restock_type,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_line_refund"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:08.834227Z", "completed_at": "2024-08-04T02:53:09.336869Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:09.337400Z", "completed_at": "2024-08-04T02:53:09.337415Z"}], "thread_id": "Thread-1", "execution_time": 0.6768805980682373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line_tmp\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    fulfillable_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    fulfillment_status\n    \n , \n    cast(null as boolean) as \n    \n    gift_card\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    grams\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    order_id\n    \n , \n    cast(null as float) as \n    \n    pre_tax_price\n    \n , \n    cast(null as TEXT) as \n    \n    pre_tax_price_set\n    \n , \n    cast(null as float) as \n    \n    price\n    \n , \n    cast(null as TEXT) as \n    \n    price_set\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    product_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    quantity\n    \n , \n    cast(null as boolean) as \n    \n    requires_shipping\n    \n , \n    cast(null as TEXT) as \n    \n    sku\n    \n , \n    cast(null as boolean) as \n    \n    taxable\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n , \n    cast(null as float) as \n    \n    total_discount\n    \n , \n    cast(null as TEXT) as \n    \n    total_discount_set\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    variant_id\n    \n , \n    cast(null as TEXT) as \n    \n    variant_title\n    \n , \n    cast(null as TEXT) as \n    \n    variant_inventory_management\n    \n , \n    cast(null as TEXT) as \n    \n    vendor\n    \n , \n    cast(null as TEXT) as \n    \n    properties\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        id as order_line_id,\n        index,\n        name,\n        order_id,\n        fulfillable_quantity,\n        fulfillment_status,\n        gift_card as is_gift_card,\n        grams,\n        pre_tax_price,\n        pre_tax_price_set,\n        price,\n        price_set,\n        product_id,\n        quantity,\n        requires_shipping as is_shipping_required,\n        sku,\n        taxable as is_taxable,\n        tax_code,\n        title,\n        total_discount,\n        total_discount_set,\n        variant_id,\n        variant_title,\n        variant_inventory_management,\n        vendor,\n        properties,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n\n)\n\nselect * \nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_line"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:09.512789Z", "completed_at": "2024-08-04T02:53:10.244205Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:10.244609Z", "completed_at": "2024-08-04T02:53:10.244621Z"}], "thread_id": "Thread-1", "execution_time": 0.9159176349639893, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_note_attribute_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as integer) as \n    \n    order_id\n    \n , \n    cast(null as TEXT) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        name,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_note_attribute"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:10.431042Z", "completed_at": "2024-08-04T02:53:11.173704Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:11.174254Z", "completed_at": "2024-08-04T02:53:11.174269Z"}], "thread_id": "Thread-1", "execution_time": 0.9186701774597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_line_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    carrier_identifier\n    \n , \n    cast(null as TEXT) as \n    \n    code\n    \n , \n    cast(null as TEXT) as \n    \n    delivery_category\n    \n , \n    cast(null as float) as \n    \n    discounted_price\n    \n , \n    cast(null as TEXT) as \n    \n    discounted_price_set\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as integer) as \n    \n    order_id\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as float) as \n    \n    price\n    \n , \n    cast(null as TEXT) as \n    \n    price_set\n    \n , \n    cast(null as TEXT) as \n    \n    requested_fulfillment_service_id\n    \n , \n    cast(null as TEXT) as \n    \n    source\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_shipping_line_id,\n        order_id,\n        carrier_identifier,\n        code,\n        delivery_category,\n        discounted_price,\n        discounted_price_set,\n        phone,\n        price,\n        price_set,\n        requested_fulfillment_service_id is not null as is_third_party_required,\n        source,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_line"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:11.351942Z", "completed_at": "2024-08-04T02:53:11.899882Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:11.900307Z", "completed_at": "2024-08-04T02:53:11.900322Z"}], "thread_id": "Thread-1", "execution_time": 0.7388327121734619, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_tax_line_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    index\n    \n , \n    cast(null as integer) as \n    \n    order_shipping_line_id\n    \n , \n    cast(null as float) as \n    \n    price\n    \n , \n    cast(null as TEXT) as \n    \n    price_set\n    \n , \n    cast(null as float) as \n    \n    rate\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_shipping_line_id,\n        index,\n        price,\n        price_set,\n        rate,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_tax_line"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:12.092245Z", "completed_at": "2024-08-04T02:53:12.802346Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:12.803308Z", "completed_at": "2024-08-04T02:53:12.803325Z"}], "thread_id": "Thread-1", "execution_time": 0.8881776332855225, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_tag_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    index\n    \n , \n    cast(null as integer) as \n    \n    order_id\n    \n , \n    cast(null as TEXT) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_tag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:12.982152Z", "completed_at": "2024-08-04T02:53:13.508618Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:13.509022Z", "completed_at": "2024-08-04T02:53:13.509035Z"}], "thread_id": "Thread-1", "execution_time": 0.7034273147583008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_tmp\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as numeric(28,6)) as \n    \n    id\n    \n , \n    cast(null as timestamp) as \n    \n    processed_at\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    user_id\n    \n , \n    cast(null as float) as \n    \n    total_discounts\n    \n , \n    cast(null as TEXT) as \n    \n    total_discounts_set\n    \n , \n    cast(null as float) as \n    \n    total_line_items_price\n    \n , \n    cast(null as TEXT) as \n    \n    total_line_items_price_set\n    \n , \n    cast(null as float) as \n    \n    total_price\n    \n , \n    cast(null as TEXT) as \n    \n    total_price_set\n    \n , \n    cast(null as TEXT) as \n    \n    total_tax_set\n    \n , \n    cast(null as float) as \n    \n    total_tax\n    \n , \n    cast(null as TEXT) as \n    \n    source_name\n    \n , \n    cast(null as float) as \n    \n    subtotal_price\n    \n , \n    cast(null as boolean) as \n    \n    taxes_included\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    total_weight\n    \n , \n    cast(null as float) as \n    \n    total_tip_received\n    \n , \n    cast(null as TEXT) as \n    \n    landing_site_base_url\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    location_id\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as TEXT) as \n    \n    note\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    number\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    order_number\n    \n , \n    cast(null as TEXT) as \n    \n    cancel_reason\n    \n , \n    cast(null as timestamp) as \n    \n    cancelled_at\n    \n , \n    cast(null as TEXT) as \n    \n    cart_token\n    \n , \n    cast(null as TEXT) as \n    \n    checkout_token\n    \n , \n    cast(null as timestamp) as \n    \n    closed_at\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    financial_status\n    \n , \n    cast(null as TEXT) as \n    \n    fulfillment_status\n    \n , \n    cast(null as TEXT) as \n    \n    referring_site\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_address_1\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_address_2\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_city\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_company\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_country\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_country_code\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_first_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_latitude\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_longitude\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_phone\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_province\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_province_code\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_zip\n    \n , \n    cast(null as TEXT) as \n    \n    browser_ip\n    \n , \n    cast(null as boolean) as \n    \n    buyer_accepts_marketing\n    \n , \n    cast(null as TEXT) as \n    \n    total_shipping_price_set\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_address_1\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_address_2\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_city\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_company\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_country\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_country_code\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_first_name\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_latitude\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_longitude\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_name\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_phone\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_province\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_province_code\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_zip\n    \n , \n    cast(null as boolean) as \n    \n    test\n    \n , \n    cast(null as TEXT) as \n    \n    token\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as integer) as \n    \n    app_id\n    \n , \n    cast(null as integer) as \n    \n    checkout_id\n    \n , \n    cast(null as TEXT) as \n    \n    client_details_user_agent\n    \n , \n    cast(null as TEXT) as \n    \n    customer_locale\n    \n , \n    cast(null as TEXT) as \n    \n    order_status_url\n    \n , \n    cast(null as TEXT) as \n    \n    presentment_currency\n    \n , \n    cast(null as boolean) as \n    \n    confirmed\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as order_id,\n        user_id,\n        total_discounts,\n        total_discounts_set,\n        total_line_items_price,\n        total_line_items_price_set,\n        total_price,\n        total_price_set,\n        total_tax_set,\n        total_tax,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        total_weight,\n        total_tip_received,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        number,\n        order_number,\n        cancel_reason,\n        cart_token,\n        checkout_token,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(cancelled_at as timestamp) as timestamp)\n) as cancelled_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(closed_at as timestamp) as timestamp)\n) as closed_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(processed_at as timestamp) as timestamp)\n) as processed_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_timestamp,\n        currency,\n        customer_id,\n        lower(email) as email,\n        financial_status,\n        fulfillment_status,\n        referring_site,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        browser_ip,\n        total_shipping_price_set,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        token,\n        app_id,\n        checkout_id,\n        client_details_user_agent,\n        customer_locale,\n        order_status_url,\n        presentment_currency,\n        test as is_test_order,\n        _fivetran_deleted as is_deleted,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        confirmed as is_confirmed,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(is_test_order, false)\nand not coalesce(is_deleted, false)", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:13.687092Z", "completed_at": "2024-08-04T02:53:14.182676Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:14.183315Z", "completed_at": "2024-08-04T02:53:14.183332Z"}], "thread_id": "Thread-1", "execution_time": 0.6800210475921631, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_url_tag_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    key\n    \n , \n    cast(null as integer) as \n    \n    order_id\n    \n , \n    cast(null as TEXT) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        key,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__order_url_tag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:14.368709Z", "completed_at": "2024-08-04T02:53:15.014445Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:15.014882Z", "completed_at": "2024-08-04T02:53:15.014895Z"}], "thread_id": "Thread-1", "execution_time": 0.8318092823028564, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__price_rule_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    allocation_limit\n    \n , \n    cast(null as TEXT) as \n    \n    allocation_method\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    customer_selection\n    \n , \n    cast(null as timestamp) as \n    \n    ends_at\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as boolean) as \n    \n    once_per_customer\n    \n , \n    cast(null as float) as \n    \n    prerequisite_quantity_range\n    \n , \n    cast(null as float) as \n    \n    prerequisite_shipping_price_range\n    \n , \n    cast(null as float) as \n    \n    prerequisite_subtotal_range\n    \n , \n    cast(null as float) as \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n , \n    cast(null as integer) as \n    \n    quantity_ratio_entitled_quantity\n    \n , \n    cast(null as integer) as \n    \n    quantity_ratio_prerequisite_quantity\n    \n , \n    cast(null as timestamp) as \n    \n    starts_at\n    \n , \n    cast(null as TEXT) as \n    \n    target_selection\n    \n , \n    cast(null as TEXT) as \n    \n    target_type\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as integer) as \n    \n    usage_limit\n    \n , \n    cast(null as float) as \n    \n    value\n    \n , \n    cast(null as TEXT) as \n    \n    value_type\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as price_rule_id,\n        allocation_limit,\n        allocation_method,\n        customer_selection,\n        once_per_customer as is_once_per_customer,\n        prerequisite_quantity_range as prereq_min_quantity,\n        prerequisite_shipping_price_range as prereq_max_shipping_price,\n        prerequisite_subtotal_range as prereq_min_subtotal,\n        prerequisite_to_entitlement_purchase_prerequisite_amount as prereq_min_purchase_quantity_for_entitlement,\n        quantity_ratio_entitled_quantity as prereq_buy_x_get_this,\n        quantity_ratio_prerequisite_quantity as prereq_buy_this_get_y,\n        target_selection,\n        target_type,\n        title,\n        usage_limit,\n        value,\n        value_type,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(starts_at as timestamp) as timestamp)\n) as starts_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(ends_at as timestamp) as timestamp)\n) as ends_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__price_rule"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:15.202088Z", "completed_at": "2024-08-04T02:53:15.822147Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:15.822831Z", "completed_at": "2024-08-04T02:53:15.822847Z"}], "thread_id": "Thread-1", "execution_time": 0.7979514598846436, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_image_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as integer) as \n    \n    height\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as integer) as \n    \n    position\n    \n , \n    cast(null as integer) as \n    \n    product_id\n    \n , \n    cast(null as TEXT) as \n    \n    src\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    variant_ids\n    \n , \n    cast(null as integer) as \n    \n    width\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_image_id,\n        product_id,\n        height,\n        position,\n        src,\n        variant_ids,\n        width,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__product_image"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:16.003011Z", "completed_at": "2024-08-04T02:53:16.484693Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:16.485247Z", "completed_at": "2024-08-04T02:53:16.485263Z"}], "thread_id": "Thread-1", "execution_time": 0.6603264808654785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_tag_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    index\n    \n , \n    cast(null as integer) as \n    \n    product_id\n    \n , \n    cast(null as TEXT) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        product_id,\n        index,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__product_tag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:16.666104Z", "completed_at": "2024-08-04T02:53:17.175933Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:17.176531Z", "completed_at": "2024-08-04T02:53:17.176554Z"}], "thread_id": "Thread-1", "execution_time": 0.6862013339996338, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_tmp\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    handle\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    product_type\n    \n , \n    cast(null as timestamp) as \n    \n    published_at\n    \n , \n    cast(null as TEXT) as \n    \n    published_scope\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    vendor\n    \n , \n    cast(null as TEXT) as \n    \n    status\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select\n        id as product_id,\n        handle,\n        product_type,\n        published_scope,\n        title,\n        vendor,\n        status,\n        _fivetran_deleted as is_deleted,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(published_at as timestamp) as timestamp)\n) as published_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\nfrom fields\n\n)\n\nselect * \nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__product"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:17.353570Z", "completed_at": "2024-08-04T02:53:17.868203Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:17.868814Z", "completed_at": "2024-08-04T02:53:17.868831Z"}], "thread_id": "Thread-1", "execution_time": 0.6961698532104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_variant_tmp\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as numeric(28,6)) as \n    \n    id\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    product_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    inventory_item_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    image_id\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n , \n    cast(null as float) as \n    \n    price\n    \n , \n    cast(null as TEXT) as \n    \n    sku\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    position\n    \n , \n    cast(null as TEXT) as \n    \n    inventory_policy\n    \n , \n    cast(null as float) as \n    \n    compare_at_price\n    \n , \n    cast(null as TEXT) as \n    \n    fulfillment_service\n    \n , \n    cast(null as TEXT) as \n    \n    inventory_management\n    \n , \n    cast(null as boolean) as \n    \n    taxable\n    \n , \n    cast(null as TEXT) as \n    \n    barcode\n    \n , \n    cast(null as float) as \n    \n    grams\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    old_inventory_quantity\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    inventory_quantity\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as TEXT) as \n    \n    weight_unit\n    \n , \n    cast(null as TEXT) as \n    \n    option_1\n    \n , \n    cast(null as TEXT) as \n    \n    option_2\n    \n , \n    cast(null as TEXT) as \n    \n    option_3\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as variant_id,\n        product_id,\n        inventory_item_id,\n        image_id,\n        title,\n        price,\n        sku,\n        position,\n        inventory_policy,\n        compare_at_price,\n        fulfillment_service,\n        inventory_management,\n        taxable as is_taxable,\n        barcode,\n        grams,\n        coalesce(inventory_quantity, old_inventory_quantity) as inventory_quantity,\n        weight,\n        weight_unit,\n        option_1,\n        option_2,\n        option_3,\n        tax_code,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__product_variant"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:18.051543Z", "completed_at": "2024-08-04T02:53:18.704597Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:18.705008Z", "completed_at": "2024-08-04T02:53:18.705022Z"}], "thread_id": "Thread-1", "execution_time": 0.8220140933990479, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made a refund in Shopify\n\nwith base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__refund_tmp\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    note\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    order_id\n    \n , \n    cast(null as timestamp) as \n    \n    processed_at\n    \n , \n    cast(null as boolean) as \n    \n    restock\n    \n , \n    cast(null as TEXT) as \n    \n    total_duties_set\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    user_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as refund_id,\n        note,\n        order_id,\n        restock,\n        total_duties_set,\n        user_id,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(processed_at as timestamp) as timestamp)\n) as processed_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__refund"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:18.875144Z", "completed_at": "2024-08-04T02:53:19.370824Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:19.371227Z", "completed_at": "2024-08-04T02:53:19.371238Z"}], "thread_id": "Thread-1", "execution_time": 0.6655316352844238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__shop_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    address_1\n    \n , \n    cast(null as TEXT) as \n    \n    address_2\n    \n , \n    cast(null as boolean) as \n    \n    checkout_api_supported\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    cookie_consent_level\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as TEXT) as \n    \n    country_code\n    \n , \n    cast(null as TEXT) as \n    \n    country_name\n    \n , \n    cast(null as boolean) as \n    \n    county_taxes\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n , \n    cast(null as TEXT) as \n    \n    customer_email\n    \n , \n    cast(null as TEXT) as \n    \n    domain\n    \n , \n    cast(null as boolean) as \n    \n    eligible_for_card_reader_giveaway\n    \n , \n    cast(null as boolean) as \n    \n    eligible_for_payments\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    enabled_presentment_currencies\n    \n , \n    cast(null as TEXT) as \n    \n    google_apps_domain\n    \n , \n    cast(null as boolean) as \n    \n    google_apps_login_enabled\n    \n , \n    cast(null as boolean) as \n    \n    has_discounts\n    \n , \n    cast(null as boolean) as \n    \n    has_gift_cards\n    \n , \n    cast(null as boolean) as \n    \n    has_storefront\n    \n , \n    cast(null as TEXT) as \n    \n    iana_timezone\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as float) as \n    \n    latitude\n    \n , \n    cast(null as float) as \n    \n    longitude\n    \n , \n    cast(null as TEXT) as \n    \n    money_format\n    \n , \n    cast(null as TEXT) as \n    \n    money_in_emails_format\n    \n , \n    cast(null as TEXT) as \n    \n    money_with_currency_format\n    \n , \n    cast(null as TEXT) as \n    \n    money_with_currency_in_emails_format\n    \n , \n    cast(null as TEXT) as \n    \n    myshopify_domain\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as boolean) as \n    \n    password_enabled\n    \n , \n    cast(null as TEXT) as \n    \n    phone\n    \n , \n    cast(null as TEXT) as \n    \n    plan_display_name\n    \n , \n    cast(null as TEXT) as \n    \n    plan_name\n    \n , \n    cast(null as boolean) as \n    \n    pre_launch_enabled\n    \n , \n    cast(null as TEXT) as \n    \n    primary_locale\n    \n , \n    cast(null as TEXT) as \n    \n    province\n    \n , \n    cast(null as TEXT) as \n    \n    province_code\n    \n , \n    cast(null as boolean) as \n    \n    requires_extra_payments_agreement\n    \n , \n    cast(null as boolean) as \n    \n    setup_required\n    \n , \n    cast(null as TEXT) as \n    \n    shop_owner\n    \n , \n    cast(null as TEXT) as \n    \n    source\n    \n , \n    cast(null as boolean) as \n    \n    tax_shipping\n    \n , \n    cast(null as boolean) as \n    \n    taxes_included\n    \n , \n    cast(null as TEXT) as \n    \n    timezone\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    weight_unit\n    \n , \n    cast(null as TEXT) as \n    \n    zip\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as shop_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        address_1,\n        address_2,\n        city,\n        province,\n        province_code,\n        country,\n        country_code,\n        country_name,\n        zip,\n        latitude,\n        longitude,\n        case when county_taxes is null then false else county_taxes end as has_county_taxes,\n        currency,\n        enabled_presentment_currencies,\n        customer_email,\n        email,\n        domain,\n        phone,\n        timezone,\n        iana_timezone,\n        primary_locale,\n        weight_unit,\n        myshopify_domain,\n        cookie_consent_level,\n        shop_owner,\n        source,\n        tax_shipping as has_shipping_taxes,\n        case when taxes_included is null then false else taxes_included end as has_taxes_included_in_price,\n        has_discounts,\n        has_gift_cards,\n        has_storefront,\n        checkout_api_supported as has_checkout_api_supported,\n        eligible_for_card_reader_giveaway as is_eligible_for_card_reader_giveaway,\n        eligible_for_payments as is_eligible_for_payments,\n        google_apps_domain,\n        case when google_apps_login_enabled is null then false else google_apps_login_enabled end as is_google_apps_login_enabled,\n        money_format,\n        money_in_emails_format,\n        money_with_currency_format,\n        money_with_currency_in_emails_format,\n        plan_display_name,\n        plan_name,\n        password_enabled as is_password_enabled,\n        pre_launch_enabled as is_pre_launch_enabled,\n        requires_extra_payments_agreement as is_extra_payments_agreement_required,\n        setup_required as is_setup_required,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__shop"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:19.541877Z", "completed_at": "2024-08-04T02:53:20.035299Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:20.035752Z", "completed_at": "2024-08-04T02:53:20.035765Z"}], "thread_id": "Thread-1", "execution_time": 0.6688117980957031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__tax_line_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as integer) as \n    \n    index\n    \n , \n    cast(null as integer) as \n    \n    order_line_id\n    \n , \n    cast(null as float) as \n    \n    price\n    \n , \n    cast(null as TEXT) as \n    \n    price_set\n    \n , \n    cast(null as float) as \n    \n    rate\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n \n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        index,\n        order_line_id,\n        price,\n        price_set,\n        rate,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__tax_line"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:20.212679Z", "completed_at": "2024-08-04T02:53:20.698358Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:20.698765Z", "completed_at": "2024-08-04T02:53:20.698779Z"}], "thread_id": "Thread-1", "execution_time": 0.6573836803436279, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC_stg_shopify.stg_shopify__tender_transaction_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as integer) as \n    \n    order_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_method\n    \n , \n    cast(null as timestamp) as \n    \n    processed_at\n    \n , \n    cast(null as TEXT) as \n    \n    remote_reference\n    \n , \n    cast(null as boolean) as \n    \n    test\n    \n , \n    cast(null as integer) as \n    \n    user_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as transaction_id,\n        order_id,\n        amount,\n        currency,\n        payment_method,\n        remote_reference,\n        user_id,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(processed_at as timestamp) as timestamp)\n) as processed_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__tender_transaction"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:20.871795Z", "completed_at": "2024-08-04T02:53:21.358035Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.358425Z", "completed_at": "2024-08-04T02:53:21.358439Z"}], "thread_id": "Thread-1", "execution_time": 0.6557188034057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * from TEST.PUBLIC_stg_shopify.stg_shopify__transaction_tmp\n\n),\n\nfields as (\n\n    select\n\n        \n    cast(null as numeric(28,6)) as \n    \n    id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    order_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    refund_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    amount\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as timestamp) as \n    \n    processed_at\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    device_id\n    \n , \n    cast(null as TEXT) as \n    \n    gateway\n    \n , \n    cast(null as TEXT) as \n    \n    source_name\n    \n , \n    cast(null as TEXT) as \n    \n    message\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    location_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    parent_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_avs_result_code\n    \n , \n    cast(null as TEXT) as \n    \n    payment_credit_card_bin\n    \n , \n    cast(null as TEXT) as \n    \n    payment_cvv_result_code\n    \n , \n    cast(null as TEXT) as \n    \n    payment_credit_card_number\n    \n , \n    cast(null as TEXT) as \n    \n    payment_credit_card_company\n    \n , \n    cast(null as TEXT) as \n    \n    kind\n    \n , \n    cast(null as TEXT) as \n    \n    receipt\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    currency_exchange_id\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    currency_exchange_adjustment\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    currency_exchange_original_amount\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    currency_exchange_final_amount\n    \n , \n    cast(null as TEXT) as \n    \n    currency_exchange_currency\n    \n , \n    cast(null as TEXT) as \n    \n    error_code\n    \n , \n    cast(null as TEXT) as \n    \n    status\n    \n , \n    cast(null as boolean) as \n    \n    test\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    user_id\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    authorization_expires_at\n    \n , \n    cast(null as TEXT) as authorization_code \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as transaction_id,\n        order_id,\n        refund_id,\n        amount,\n        device_id,\n        gateway,\n        source_name,\n        message,\n        currency,\n        location_id,\n        parent_id,\n        payment_avs_result_code,\n        payment_credit_card_bin,\n        payment_cvv_result_code,\n        payment_credit_card_number,\n        payment_credit_card_company,\n        kind,\n        receipt,\n        currency_exchange_id,\n        currency_exchange_adjustment,\n        currency_exchange_original_amount,\n        currency_exchange_final_amount,\n        currency_exchange_currency,\n        error_code,\n        status,\n        user_id,\n        authorization_code,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(processed_at as timestamp) as timestamp)\n) as processed_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(authorization_expires_at as timestamp) as timestamp)\n) as authorization_expires_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect * \nfrom final", "relation_name": "TEST.PUBLIC_stg_shopify.stg_shopify__transaction"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.528818Z", "completed_at": "2024-08-04T02:53:21.533944Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.534342Z", "completed_at": "2024-08-04T02:53:21.534351Z"}], "thread_id": "Thread-1", "execution_time": 0.006498098373413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, code, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_discount_code\n    group by checkout_id, code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.537181Z", "completed_at": "2024-08-04T02:53:21.545276Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.545672Z", "completed_at": "2024-08-04T02:53:21.545679Z"}], "thread_id": "Thread-1", "execution_time": 0.01029658317565918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_discount_code\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.547710Z", "completed_at": "2024-08-04T02:53:21.552020Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.552399Z", "completed_at": "2024-08-04T02:53:21.552406Z"}], "thread_id": "Thread-1", "execution_time": 0.005719423294067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, index, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_shipping_line\n    group by checkout_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.567634Z", "completed_at": "2024-08-04T02:53:21.571686Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.572072Z", "completed_at": "2024-08-04T02:53:21.572079Z"}], "thread_id": "Thread-1", "execution_time": 0.005461215972900391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout\n    group by checkout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.573931Z", "completed_at": "2024-08-04T02:53:21.577687Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.578060Z", "completed_at": "2024-08-04T02:53:21.578066Z"}], "thread_id": "Thread-1", "execution_time": 0.004974842071533203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.579955Z", "completed_at": "2024-08-04T02:53:21.583959Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.584340Z", "completed_at": "2024-08-04T02:53:21.584346Z"}], "thread_id": "Thread-1", "execution_time": 0.005273103713989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, product_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__collection_product\n    group by collection_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.586202Z", "completed_at": "2024-08-04T02:53:21.590748Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.591135Z", "completed_at": "2024-08-04T02:53:21.591141Z"}], "thread_id": "Thread-1", "execution_time": 0.005776643753051758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__collection_product\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.593055Z", "completed_at": "2024-08-04T02:53:21.596767Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.597141Z", "completed_at": "2024-08-04T02:53:21.597147Z"}], "thread_id": "Thread-1", "execution_time": 0.00500035285949707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__collection_product\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.599012Z", "completed_at": "2024-08-04T02:53:21.602933Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.603310Z", "completed_at": "2024-08-04T02:53:21.603316Z"}], "thread_id": "Thread-1", "execution_time": 0.005181312561035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__collection\n    group by collection_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.605207Z", "completed_at": "2024-08-04T02:53:21.608919Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.609284Z", "completed_at": "2024-08-04T02:53:21.609290Z"}], "thread_id": "Thread-1", "execution_time": 0.004926204681396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__collection\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.611133Z", "completed_at": "2024-08-04T02:53:21.615871Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.616246Z", "completed_at": "2024-08-04T02:53:21.616252Z"}], "thread_id": "Thread-1", "execution_time": 0.005956888198852539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, index, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer_tag\n    group by customer_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.618147Z", "completed_at": "2024-08-04T02:53:21.621867Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.622237Z", "completed_at": "2024-08-04T02:53:21.622243Z"}], "thread_id": "Thread-1", "execution_time": 0.005007743835449219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__customer_tag\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.624132Z", "completed_at": "2024-08-04T02:53:21.627954Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:21.628328Z", "completed_at": "2024-08-04T02:53:21.628334Z"}], "thread_id": "Thread-1", "execution_time": 0.0050809383392333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__customer_tag\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:21.630211Z", "completed_at": "2024-08-04T02:53:22.158671Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.159123Z", "completed_at": "2024-08-04T02:53:22.159138Z"}], "thread_id": "Thread-1", "execution_time": 0.7082638740539551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.int_shopify__customer_email_rollup", "compiled": true, "compiled_code": "with customers as (\n\n    select \n        *,\n        row_number() over(\n            partition by \n\n\n    email\n\n\n            order by created_timestamp desc) \n            as customer_index\n\n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer\n    where email is not null -- nonsensical to include any null emails here\n\n), customer_tags as (\n\n    select \n        *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer_tag\n\n), rollup_customers as (\n\n    select\n        -- fields to group by\n        lower(customers.email) as email,\n        customers.source_relation,\n\n        -- fields to string agg together\n        \n    listagg(distinct cast(customers.customer_id as TEXT), ', ')\n\n as customer_ids,\n        \n    listagg(distinct cast(customers.phone as TEXT), ', ')\n\n as phone_numbers,\n        \n    listagg(distinct cast(customer_tags.value as TEXT), ', ')\n\n as customer_tags,\n\n        -- fields to take aggregates of\n        min(customers.created_timestamp) as first_account_created_at,\n        max(customers.created_timestamp) as last_account_created_at,\n        max(customers.updated_timestamp) as last_updated_at,\n        max(customers.marketing_consent_updated_at) as marketing_consent_updated_at,\n        max(customers._fivetran_synced) as last_fivetran_synced,\n\n        -- take true if ever given for boolean fields\n        \n\n    max( case when customers.customer_index = 1 then customers.is_tax_exempt else null end )\n\n as is_tax_exempt, -- since this changes every year\n        \n\n    max( customers.is_verified_email )\n\n as is_verified_email\n\n        -- for all other fields, just take the latest value\n        \n        \n        \n\n    from customers \n    left join customer_tags\n        on customers.customer_id = customer_tags.customer_id\n        and customers.source_relation = customer_tags.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom rollup_customers", "relation_name": "TEST.PUBLIC_shopify.int_shopify__customer_email_rollup"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.340457Z", "completed_at": "2024-08-04T02:53:22.345440Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.345829Z", "completed_at": "2024-08-04T02:53:22.345839Z"}], "thread_id": "Thread-1", "execution_time": 0.006593942642211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.347759Z", "completed_at": "2024-08-04T02:53:22.352018Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.352389Z", "completed_at": "2024-08-04T02:53:22.352396Z"}], "thread_id": "Thread-1", "execution_time": 0.005515336990356445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_discount_code_id__source_relation.cdfb802172", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__discount_code\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.354249Z", "completed_at": "2024-08-04T02:53:22.357963Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.358332Z", "completed_at": "2024-08-04T02:53:22.358338Z"}], "thread_id": "Thread-1", "execution_time": 0.004926204681396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_discount_code_id.a5590b867e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__discount_code\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.360190Z", "completed_at": "2024-08-04T02:53:22.364950Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.365320Z", "completed_at": "2024-08-04T02:53:22.365326Z"}], "thread_id": "Thread-1", "execution_time": 0.0059719085693359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from TEST.PUBLIC_stg_shopify.stg_shopify__fulfillment\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'pending','open','success','cancelled','error','failure'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.367188Z", "completed_at": "2024-08-04T02:53:22.371100Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.371508Z", "completed_at": "2024-08-04T02:53:22.371514Z"}], "thread_id": "Thread-1", "execution_time": 0.005179643630981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__fulfillment\n    group by fulfillment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.373356Z", "completed_at": "2024-08-04T02:53:22.377067Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.377440Z", "completed_at": "2024-08-04T02:53:22.377446Z"}], "thread_id": "Thread-1", "execution_time": 0.004923343658447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fulfillment_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__fulfillment\nwhere fulfillment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.379277Z", "completed_at": "2024-08-04T02:53:22.383218Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.383651Z", "completed_at": "2024-08-04T02:53:22.383658Z"}], "thread_id": "Thread-1", "execution_time": 0.005216836929321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__inventory_item\n    group by inventory_item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.385509Z", "completed_at": "2024-08-04T02:53:22.389903Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.390272Z", "completed_at": "2024-08-04T02:53:22.390278Z"}], "thread_id": "Thread-1", "execution_time": 0.005661964416503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__inventory_item\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.392182Z", "completed_at": "2024-08-04T02:53:22.396046Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.396422Z", "completed_at": "2024-08-04T02:53:22.396428Z"}], "thread_id": "Thread-1", "execution_time": 0.005104541778564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_item_id__location_id__source_relation.30e02799e7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__inventory_level\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.398365Z", "completed_at": "2024-08-04T02:53:22.401968Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.402336Z", "completed_at": "2024-08-04T02:53:22.402342Z"}], "thread_id": "Thread-1", "execution_time": 0.00490880012512207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_inventory_item_id.fccf494b8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__inventory_level\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.404301Z", "completed_at": "2024-08-04T02:53:22.407925Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.408289Z", "completed_at": "2024-08-04T02:53:22.408295Z"}], "thread_id": "Thread-1", "execution_time": 0.004927158355712891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_location_id.92e79be57f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__inventory_level\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.410282Z", "completed_at": "2024-08-04T02:53:22.414807Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.415184Z", "completed_at": "2024-08-04T02:53:22.415190Z"}], "thread_id": "Thread-1", "execution_time": 0.0058269500732421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__location\n    group by location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.417123Z", "completed_at": "2024-08-04T02:53:22.420810Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.421180Z", "completed_at": "2024-08-04T02:53:22.421186Z"}], "thread_id": "Thread-1", "execution_time": 0.004991054534912109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__location\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.423037Z", "completed_at": "2024-08-04T02:53:22.426958Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.427330Z", "completed_at": "2024-08-04T02:53:22.427336Z"}], "thread_id": "Thread-1", "execution_time": 0.005169391632080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metafield_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__metafield\n    group by metafield_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.429211Z", "completed_at": "2024-08-04T02:53:22.432956Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.433325Z", "completed_at": "2024-08-04T02:53:22.433331Z"}], "thread_id": "Thread-1", "execution_time": 0.004951000213623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metafield_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__metafield\nwhere metafield_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.435172Z", "completed_at": "2024-08-04T02:53:22.439801Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.440187Z", "completed_at": "2024-08-04T02:53:22.440193Z"}], "thread_id": "Thread-1", "execution_time": 0.005861759185791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_adjustment_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_adjustment\n    group by order_adjustment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.442117Z", "completed_at": "2024-08-04T02:53:22.446096Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.446474Z", "completed_at": "2024-08-04T02:53:22.446480Z"}], "thread_id": "Thread-1", "execution_time": 0.005311012268066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation.7887dafb26", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_discount_code\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.448362Z", "completed_at": "2024-08-04T02:53:22.452069Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.452433Z", "completed_at": "2024-08-04T02:53:22.452439Z"}], "thread_id": "Thread-1", "execution_time": 0.0049097537994384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_discount_code\nwhere code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.454267Z", "completed_at": "2024-08-04T02:53:22.457975Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.458341Z", "completed_at": "2024-08-04T02:53:22.458348Z"}], "thread_id": "Thread-1", "execution_time": 0.004918098449707031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_discount_code\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.460220Z", "completed_at": "2024-08-04T02:53:22.464844Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.465223Z", "completed_at": "2024-08-04T02:53:22.465229Z"}], "thread_id": "Thread-1", "execution_time": 0.005856752395629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_refund_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line_refund\n    group by order_line_refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.467092Z", "completed_at": "2024-08-04T02:53:22.470994Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.471392Z", "completed_at": "2024-08-04T02:53:22.471399Z"}], "thread_id": "Thread-1", "execution_time": 0.005159139633178711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.473257Z", "completed_at": "2024-08-04T02:53:22.477150Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.477524Z", "completed_at": "2024-08-04T02:53:22.477530Z"}], "thread_id": "Thread-1", "execution_time": 0.00511932373046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, name, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_note_attribute\n    group by order_id, name, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.479386Z", "completed_at": "2024-08-04T02:53:22.483097Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.483487Z", "completed_at": "2024-08-04T02:53:22.483493Z"}], "thread_id": "Thread-1", "execution_time": 0.0049932003021240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_note_attribute\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.485345Z", "completed_at": "2024-08-04T02:53:22.489758Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.490131Z", "completed_at": "2024-08-04T02:53:22.490137Z"}], "thread_id": "Thread-1", "execution_time": 0.0056192874908447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_note_attribute\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.492024Z", "completed_at": "2024-08-04T02:53:22.585047Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.585437Z", "completed_at": "2024-08-04T02:53:22.585448Z"}], "thread_id": "Thread-1", "execution_time": 0.09434151649475098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_line\n    group by order_shipping_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.587444Z", "completed_at": "2024-08-04T02:53:22.591391Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.591778Z", "completed_at": "2024-08-04T02:53:22.591784Z"}], "thread_id": "Thread-1", "execution_time": 0.00522923469543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_line\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.599421Z", "completed_at": "2024-08-04T02:53:22.603529Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.603948Z", "completed_at": "2024-08-04T02:53:22.603955Z"}], "thread_id": "Thread-1", "execution_time": 0.005513191223144531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, index, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_tax_line\n    group by order_shipping_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.605826Z", "completed_at": "2024-08-04T02:53:22.610334Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.610719Z", "completed_at": "2024-08-04T02:53:22.610725Z"}], "thread_id": "Thread-1", "execution_time": 0.005800485610961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_tax_line\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.612575Z", "completed_at": "2024-08-04T02:53:22.616421Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.616807Z", "completed_at": "2024-08-04T02:53:22.616813Z"}], "thread_id": "Thread-1", "execution_time": 0.005063772201538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_tax_line\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.618686Z", "completed_at": "2024-08-04T02:53:22.622512Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.622896Z", "completed_at": "2024-08-04T02:53:22.622902Z"}], "thread_id": "Thread-1", "execution_time": 0.005114555358886719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_tag\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.624896Z", "completed_at": "2024-08-04T02:53:22.628526Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.628904Z", "completed_at": "2024-08-04T02:53:22.628910Z"}], "thread_id": "Thread-1", "execution_time": 0.005002737045288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_tag\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.630817Z", "completed_at": "2024-08-04T02:53:22.635289Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.635687Z", "completed_at": "2024-08-04T02:53:22.635693Z"}], "thread_id": "Thread-1", "execution_time": 0.005703926086425781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_tag\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.638216Z", "completed_at": "2024-08-04T02:53:22.643405Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.643832Z", "completed_at": "2024-08-04T02:53:22.643842Z"}], "thread_id": "Thread-1", "execution_time": 0.006825685501098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.645819Z", "completed_at": "2024-08-04T02:53:22.650185Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.650576Z", "completed_at": "2024-08-04T02:53:22.650584Z"}], "thread_id": "Thread-1", "execution_time": 0.0056340694427490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, key, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_url_tag\n    group by order_id, key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.652444Z", "completed_at": "2024-08-04T02:53:22.656399Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.656785Z", "completed_at": "2024-08-04T02:53:22.656793Z"}], "thread_id": "Thread-1", "execution_time": 0.005172252655029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_url_tag\nwhere key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.658633Z", "completed_at": "2024-08-04T02:53:22.663437Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.663852Z", "completed_at": "2024-08-04T02:53:22.663859Z"}], "thread_id": "Thread-1", "execution_time": 0.006063222885131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__order_url_tag\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.665722Z", "completed_at": "2024-08-04T02:53:22.669698Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.670076Z", "completed_at": "2024-08-04T02:53:22.670083Z"}], "thread_id": "Thread-1", "execution_time": 0.005214691162109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_target_type__line_item__shipping_line.921059c008", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        target_type as value_field,\n        count(*) as n_records\n\n    from TEST.PUBLIC_stg_shopify.stg_shopify__price_rule\n    group by target_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'line_item','shipping_line'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.671964Z", "completed_at": "2024-08-04T02:53:22.675904Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.676276Z", "completed_at": "2024-08-04T02:53:22.676282Z"}], "thread_id": "Thread-1", "execution_time": 0.005186557769775391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_value_type__percentage__fixed_amount.65eceed909", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        value_type as value_field,\n        count(*) as n_records\n\n    from TEST.PUBLIC_stg_shopify.stg_shopify__price_rule\n    group by value_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'percentage','fixed_amount'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.678131Z", "completed_at": "2024-08-04T02:53:22.682181Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.682571Z", "completed_at": "2024-08-04T02:53:22.682577Z"}], "thread_id": "Thread-1", "execution_time": 0.005294084548950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__price_rule_price_rule_id__source_relation.56ce313bee", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_rule_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__price_rule\n    group by price_rule_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.684485Z", "completed_at": "2024-08-04T02:53:22.689142Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.689517Z", "completed_at": "2024-08-04T02:53:22.689523Z"}], "thread_id": "Thread-1", "execution_time": 0.005880832672119141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__price_rule_price_rule_id.a7160b00e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price_rule_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__price_rule\nwhere price_rule_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.691389Z", "completed_at": "2024-08-04T02:53:22.695304Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.695714Z", "completed_at": "2024-08-04T02:53:22.695720Z"}], "thread_id": "Thread-1", "execution_time": 0.0051801204681396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_image_product_image_id__product_id__source_relation.ab95cde6f9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_image_id, product_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_image\n    group by product_image_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.697527Z", "completed_at": "2024-08-04T02:53:22.701229Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.701606Z", "completed_at": "2024-08-04T02:53:22.701612Z"}], "thread_id": "Thread-1", "execution_time": 0.004900693893432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_image_product_image_id.911df72b9c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_image_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__product_image\nwhere product_image_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.703480Z", "completed_at": "2024-08-04T02:53:22.707490Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.707886Z", "completed_at": "2024-08-04T02:53:22.707892Z"}], "thread_id": "Thread-1", "execution_time": 0.005278110504150391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, index, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_tag\n    group by product_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.709729Z", "completed_at": "2024-08-04T02:53:22.714394Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.714774Z", "completed_at": "2024-08-04T02:53:22.714780Z"}], "thread_id": "Thread-1", "execution_time": 0.005883455276489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__product_tag\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.716618Z", "completed_at": "2024-08-04T02:53:22.720349Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.720730Z", "completed_at": "2024-08-04T02:53:22.720737Z"}], "thread_id": "Thread-1", "execution_time": 0.0049474239349365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__product_tag\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.722551Z", "completed_at": "2024-08-04T02:53:22.726712Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.727092Z", "completed_at": "2024-08-04T02:53:22.727098Z"}], "thread_id": "Thread-1", "execution_time": 0.005373477935791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.738166Z", "completed_at": "2024-08-04T02:53:22.743177Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.743606Z", "completed_at": "2024-08-04T02:53:22.743613Z"}], "thread_id": "Thread-1", "execution_time": 0.006517648696899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variant_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_variant\n    group by variant_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.751326Z", "completed_at": "2024-08-04T02:53:22.755166Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.755568Z", "completed_at": "2024-08-04T02:53:22.755575Z"}], "thread_id": "Thread-1", "execution_time": 0.005305051803588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__refund\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.757422Z", "completed_at": "2024-08-04T02:53:22.761360Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.761744Z", "completed_at": "2024-08-04T02:53:22.761750Z"}], "thread_id": "Thread-1", "execution_time": 0.005160808563232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        shop_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__shop\n    group by shop_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.763637Z", "completed_at": "2024-08-04T02:53:22.767443Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.767829Z", "completed_at": "2024-08-04T02:53:22.767835Z"}], "thread_id": "Thread-1", "execution_time": 0.005073070526123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__shop\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.769676Z", "completed_at": "2024-08-04T02:53:22.775610Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.776001Z", "completed_at": "2024-08-04T02:53:22.776011Z"}], "thread_id": "Thread-1", "execution_time": 0.007195711135864258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, index, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__tax_line\n    group by order_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.777942Z", "completed_at": "2024-08-04T02:53:22.782264Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.782638Z", "completed_at": "2024-08-04T02:53:22.782644Z"}], "thread_id": "Thread-1", "execution_time": 0.0055582523345947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__tender_transaction\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.784515Z", "completed_at": "2024-08-04T02:53:22.788340Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.788715Z", "completed_at": "2024-08-04T02:53:22.788721Z"}], "thread_id": "Thread-1", "execution_time": 0.0050394535064697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom TEST.PUBLIC_stg_shopify.stg_shopify__tender_transaction\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.790519Z", "completed_at": "2024-08-04T02:53:22.799591Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.799972Z", "completed_at": "2024-08-04T02:53:22.799979Z"}], "thread_id": "Thread-1", "execution_time": 0.010278940200805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__transactions", "compiled": true, "compiled_code": "\n\nwith transactions as (\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transactions_unique_id\n    from TEST.PUBLIC_stg_shopify.stg_shopify__transaction\n\n    \n\n), tender_transactions as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__tender_transaction\n\n), joined as (\n    select \n        transactions.*,\n        tender_transactions.payment_method,\n        parent_transactions.created_timestamp as parent_created_timestamp,\n        parent_transactions.kind as parent_kind,\n        parent_transactions.amount as parent_amount,\n        parent_transactions.status as parent_status\n    from transactions\n    left join tender_transactions\n        on transactions.transaction_id = tender_transactions.transaction_id\n        and transactions.source_relation = tender_transactions.source_relation\n    left join transactions as parent_transactions\n        on transactions.parent_id = parent_transactions.transaction_id\n        and transactions.source_relation = parent_transactions.source_relation\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif(\n\n  parse_json( receipt )['charges']['data'][0]['balance_transaction']['exchange_rate'], '') as numeric(28,6) ),1) as exchange_rate,\n        coalesce(cast(nullif(\n\n  parse_json( receipt )['charges']['data'][0]['balance_transaction']['exchange_rate'], '') as numeric(28,6) ),1) * amount as currency_exchange_calculated_amount\n    from joined\n\n)\n\nselect *\nfrom exchange_rate", "relation_name": "TEST.PUBLIC_shopify.shopify__transactions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.801920Z", "completed_at": "2024-08-04T02:53:22.805941Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.806326Z", "completed_at": "2024-08-04T02:53:22.806332Z"}], "thread_id": "Thread-1", "execution_time": 0.005380153656005859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from TEST.PUBLIC_stg_shopify.stg_shopify__transaction\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.808325Z", "completed_at": "2024-08-04T02:53:22.814177Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.814565Z", "completed_at": "2024-08-04T02:53:22.814572Z"}], "thread_id": "Thread-1", "execution_time": 0.007222175598144531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_discount_code\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_shipping_line\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.816479Z", "completed_at": "2024-08-04T02:53:22.820464Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.820841Z", "completed_at": "2024-08-04T02:53:22.820847Z"}], "thread_id": "Thread-1", "execution_time": 0.005208492279052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from TEST.PUBLIC_shopify.int_shopify__customer_email_rollup\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.823162Z", "completed_at": "2024-08-04T02:53:22.839705Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.840095Z", "completed_at": "2024-08-04T02:53:22.840106Z"}], "thread_id": "Thread-1", "execution_time": 0.018086910247802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders__order_line_aggregates", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_line\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_tax_line\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), order_line as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line\n\n), tax as (\n\n    select\n        *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__tax_line\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) as price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_shopify.shopify__orders__order_line_aggregates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.842267Z", "completed_at": "2024-08-04T02:53:22.848432Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.848824Z", "completed_at": "2024-08-04T02:53:22.848831Z"}], "thread_id": "Thread-1", "execution_time": 0.007582426071166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_line\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_shipping_tax_line\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.850677Z", "completed_at": "2024-08-04T02:53:22.856352Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.856744Z", "completed_at": "2024-08-04T02:53:22.856751Z"}], "thread_id": "Thread-1", "execution_time": 0.0069179534912109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product\n), \n\ncollection_product as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__collection_product\n),\n\ncollection as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__collection\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_tag\n),\n\nproduct_variant as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_variant\n),\n\nproduct_image as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_image\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    listagg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    listagg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__products_with_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.889323Z", "completed_at": "2024-08-04T02:53:22.920126Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.920515Z", "completed_at": "2024-08-04T02:53:22.920525Z"}], "thread_id": "Thread-1", "execution_time": 0.03220558166503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__order_lines", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__refund\n\n), order_line_refunds as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line_refund\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), order_lines as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_line_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as order_lines_unique_key\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line\n\n    \n\n), product_variants as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_variant\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal,\n        \n    listagg(distinct cast(refunds.restock_type as TEXT), ', ')\n\n as restock_types\n    from refunds\n    group by 1,2\n\n), tax_lines as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__tax_line\n\n), tax_lines_aggregated as (\n\n    select\n        tax_lines.order_line_id,\n        tax_lines.source_relation,\n        sum(tax_lines.price) as order_line_tax\n\n    from tax_lines\n    group by 1,2\n\n), joined as (\n\n    select\n        order_lines.*,\n        \n        refunds_aggregated.restock_types,\n\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n\n        tax_lines_aggregated.order_line_tax\n\n    from order_lines\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n    left join tax_lines_aggregated\n        on tax_lines_aggregated.order_line_id = order_lines.order_line_id\n        and tax_lines_aggregated.source_relation = order_lines.source_relation\n\n\n)\n\nselect *\nfrom joined", "relation_name": "TEST.PUBLIC_shopify.shopify__order_lines"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.922600Z", "completed_at": "2024-08-04T02:53:22.927210Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.927646Z", "completed_at": "2024-08-04T02:53:22.927653Z"}], "thread_id": "Thread-1", "execution_time": 0.0059626102447509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transactions_unique_id\nfrom TEST.PUBLIC_shopify.shopify__transactions\nwhere transactions_unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.929519Z", "completed_at": "2024-08-04T02:53:22.937958Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:22.938352Z", "completed_at": "2024-08-04T02:53:22.938362Z"}], "thread_id": "Thread-1", "execution_time": 0.009735822677612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transactions_unique_id as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_shopify.shopify__transactions\nwhere transactions_unique_id is not null\ngroup by transactions_unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:22.956480Z", "completed_at": "2024-08-04T02:53:23.008285Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:23.008677Z", "completed_at": "2024-08-04T02:53:23.008688Z"}], "thread_id": "Thread-1", "execution_time": 0.0532231330871582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__refund\n\n), order_line_refunds as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line_refund\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), orders as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as orders_unique_key\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order\n\n    \n\n), order_lines as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders__order_line_aggregates\n\n), order_adjustments as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_adjustment\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n), order_discount_code as (\n    \n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_discount_code\n\n), discount_aggregates as (\n\n    select \n        order_id,\n        source_relation,\n        sum(case when type = 'shipping' then amount else 0 end) as shipping_discount_amount,\n        sum(case when type = 'percentage' then amount else 0 end) as percentage_calc_discount_amount,\n        sum(case when type = 'fixed_amount' then amount else 0 end) as fixed_amount_discount_amount,\n        count(distinct code) as count_discount_codes_applied\n\n    from order_discount_code\n    group by 1,2\n\n), order_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    listagg(distinct cast(value as TEXT), ', ')\n\n as order_tags\n    \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_tag\n    group by 1,2\n\n), order_url_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    listagg(distinct cast(value as TEXT), ', ')\n\n as order_url_tags\n    \n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_url_tag\n    group by 1,2\n\n), fulfillments as (\n\n    select \n        order_id,\n        source_relation,\n        count(fulfillment_id) as number_of_fulfillments,\n        \n    listagg(distinct cast(service as TEXT), ', ')\n\n as fulfillment_services,\n        \n    listagg(distinct cast(tracking_company as TEXT), ', ')\n\n as tracking_companies,\n        \n    listagg(distinct cast(tracking_number as TEXT), ', ')\n\n as tracking_numbers\n\n    from TEST.PUBLIC_stg_shopify.stg_shopify__fulfillment\n    group by 1,2\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast(\n\n  parse_json( total_shipping_price_set )['shop_money']['amount'] as float) ,0) as shipping_cost,\n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n\n        (orders.total_price\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)) as order_adjusted_total,\n        order_lines.line_item_count,\n\n        coalesce(discount_aggregates.shipping_discount_amount, 0) as shipping_discount_amount,\n        coalesce(discount_aggregates.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        coalesce(discount_aggregates.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        coalesce(discount_aggregates.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(order_lines.order_total_shipping_tax, 0) as order_total_shipping_tax,\n        order_tag.order_tags,\n        order_url_tag.order_url_tags,\n        fulfillments.number_of_fulfillments,\n        fulfillments.fulfillment_services,\n        fulfillments.tracking_companies,\n        fulfillments.tracking_numbers\n\n\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    left join discount_aggregates\n        on orders.order_id = discount_aggregates.order_id \n        and orders.source_relation = discount_aggregates.source_relation\n    left join order_tag\n        on orders.order_id = order_tag.order_id\n        and orders.source_relation = order_tag.source_relation\n    left join order_url_tag\n        on orders.order_id = order_url_tag.order_id\n        and orders.source_relation = order_url_tag.source_relation\n    left join fulfillments\n        on orders.order_id = fulfillments.order_id\n        and orders.source_relation = fulfillments.source_relation\n\n), windows as (\n\n    select \n        *,\n        row_number() over (\n            partition by \n\n\n    customer_id\n\n\n            order by created_timestamp) \n            as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "relation_name": "TEST.PUBLIC_shopify.shopify__orders"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:23.010874Z", "completed_at": "2024-08-04T02:53:23.015331Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:23.015737Z", "completed_at": "2024-08-04T02:53:23.015743Z"}], "thread_id": "Thread-1", "execution_time": 0.005911350250244141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from TEST.PUBLIC_shopify.shopify__orders__order_line_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:23.017566Z", "completed_at": "2024-08-04T02:53:23.055240Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:23.055670Z", "completed_at": "2024-08-04T02:53:23.055679Z"}], "thread_id": "Thread-1", "execution_time": 0.03896641731262207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__inventory_levels", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__refund\n\n), order_line_refunds as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line_refund\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line\n),\n\nfulfillment as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__fulfillment\n),\n\norders as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), inventory_level as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__inventory_level\n), \n\ninventory_item as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__inventory_item\n),\n\nlocation as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__location\n),\n\nproduct_variant as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_variant\n),\n\nproduct as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product\n),\n\ninventory_level_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n),\n\njoined_info as (\n\n    select \n        inventory_level.*,\n        inventory_item.sku,\n        inventory_item.is_deleted as is_inventory_item_deleted,\n        inventory_item.cost,\n        inventory_item.country_code_of_origin,\n        inventory_item.province_code_of_origin,\n        inventory_item.is_shipping_required,\n        inventory_item.is_inventory_quantity_tracked,\n        inventory_item.created_at as inventory_item_created_at,\n        inventory_item.updated_at as inventory_item_updated_at,\n\n        location.name as location_name, \n        location.is_deleted as is_location_deleted,\n        location.is_active as is_location_active,\n        location.address_1,\n        location.address_2,\n        location.city,\n        location.country,\n        location.country_code,\n        location.is_legacy as is_legacy_location,\n        location.province,\n        location.province_code,\n        location.phone,\n        location.zip,\n        location.created_at as location_created_at,\n        location.updated_at as location_updated_at,\n\n        product_variant.variant_id,\n        product_variant.product_id,\n        product_variant.title as variant_title,\n        product_variant.inventory_policy as variant_inventory_policy,\n        product_variant.price as variant_price,\n        product_variant.image_id as variant_image_id,\n        product_variant.fulfillment_service as variant_fulfillment_service,\n        product_variant.inventory_management as variant_inventory_management,\n        product_variant.is_taxable as is_variant_taxable,\n        product_variant.barcode as variant_barcode,\n        product_variant.grams as variant_grams, \n        product_variant.inventory_quantity as variant_inventory_quantity,\n        product_variant.weight as variant_weight,\n        product_variant.weight_unit as variant_weight_unit,\n        product_variant.option_1 as variant_option_1,\n        product_variant.option_2 as variant_option_2,\n        product_variant.option_3 as variant_option_3,\n        product_variant.tax_code as variant_tax_code,\n        product_variant.created_timestamp as variant_created_at,\n        product_variant.updated_timestamp as variant_updated_at\n\n        \n\n\n\n\n\n    from inventory_level\n    join inventory_item \n        on inventory_level.inventory_item_id = inventory_item.inventory_item_id \n        and inventory_level.source_relation = inventory_item.source_relation \n    join location \n        on inventory_level.location_id = location.location_id \n        and inventory_level.source_relation = location.source_relation \n    join product_variant \n        on inventory_item.inventory_item_id = product_variant.inventory_item_id \n        and inventory_item.source_relation = product_variant.source_relation\n\n),\n\njoined_aggregates as (\n\n    select \n        joined_info.*,\n        coalesce(inventory_level_aggregated.subtotal_sold, 0) as subtotal_sold,\n        coalesce(inventory_level_aggregated.quantity_sold, 0) as quantity_sold,\n        coalesce(inventory_level_aggregated.count_distinct_orders, 0) as count_distinct_orders,\n        coalesce(inventory_level_aggregated.count_distinct_customers, 0) as count_distinct_customers,\n        coalesce(inventory_level_aggregated.count_distinct_customer_emails, 0) as count_distinct_customer_emails,\n        inventory_level_aggregated.first_order_timestamp,\n        inventory_level_aggregated.last_order_timestamp,\n        coalesce(inventory_level_aggregated.subtotal_sold_refunds, 0) as subtotal_sold_refunds,\n        coalesce(inventory_level_aggregated.quantity_sold_refunds, 0) as quantity_sold_refunds\n\n        \n        , coalesce(count_fulfillment_pending, 0) as count_fulfillment_pending\n        \n        , coalesce(count_fulfillment_open, 0) as count_fulfillment_open\n        \n        , coalesce(count_fulfillment_success, 0) as count_fulfillment_success\n        \n        , coalesce(count_fulfillment_cancelled, 0) as count_fulfillment_cancelled\n        \n        , coalesce(count_fulfillment_error, 0) as count_fulfillment_error\n        \n        , coalesce(count_fulfillment_failure, 0) as count_fulfillment_failure\n        \n\n    from joined_info\n    left join inventory_level_aggregated\n        on joined_info.location_id = inventory_level_aggregated.location_id\n        and joined_info.variant_id = inventory_level_aggregated.variant_id\n        and joined_info.source_relation = inventory_level_aggregated.source_relation\n),\n\nfinal as (\n\n    select \n        *,\n        subtotal_sold - subtotal_sold_refunds as net_subtotal_sold,\n        quantity_sold - quantity_sold_refunds as net_quantity_sold\n    from joined_aggregates\n)\n\nselect * \nfrom final", "relation_name": "TEST.PUBLIC_shopify.shopify__inventory_levels"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:23.057870Z", "completed_at": "2024-08-04T02:53:23.064243Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:23.064635Z", "completed_at": "2024-08-04T02:53:23.064644Z"}], "thread_id": "Thread-1", "execution_time": 0.007828712463378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__refund\n\n), order_line_refunds as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line_refund\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_line\n),\n\nfulfillment as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__fulfillment\n),\n\norders as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        variant_id, location_id, source_relation\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n    group by variant_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:23.066524Z", "completed_at": "2024-08-04T02:53:23.070484Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:23.070875Z", "completed_at": "2024-08-04T02:53:23.070881Z"}], "thread_id": "Thread-1", "execution_time": 0.005173921585083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_lines_unique_key\nfrom TEST.PUBLIC_shopify.shopify__order_lines\nwhere order_lines_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:23.072833Z", "completed_at": "2024-08-04T02:53:23.076651Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:23.077025Z", "completed_at": "2024-08-04T02:53:23.077031Z"}], "thread_id": "Thread-1", "execution_time": 0.005154609680175781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_lines_unique_key as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_shopify.shopify__order_lines\nwhere order_lines_unique_key is not null\ngroup by order_lines_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:23.078940Z", "completed_at": "2024-08-04T02:53:23.651324Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:23.651760Z", "completed_at": "2024-08-04T02:53:23.651773Z"}], "thread_id": "Thread-1", "execution_time": 0.743370532989502, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_emails", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order\n\n), order_aggregates as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders__order_line_aggregates\n\n), transactions as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__transactions\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), customer_emails as (\n\n    select \n        \n*\n/* No columns were returned. Maybe the relation doesn't exist yet \nor all columns were excluded. This star is only output during  \ndbt compile, and exists to keep SQLFluff happy. */\n            \n    from TEST.PUBLIC_shopify.int_shopify__customer_email_rollup\n\n), orders as (\n\n    select *\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    where email is not null\n\n), abandoned as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout\n    where email is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customer_emails.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customer_emails\n    left join orders\n        on customer_emails.email = orders.email\n        and customer_emails.source_relation = orders.source_relation\n    left join abandoned\n        on customer_emails.email = abandoned.email\n        and customer_emails.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "TEST.PUBLIC_shopify.shopify__customer_emails"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:23.824230Z", "completed_at": "2024-08-04T02:53:23.831037Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:23.831463Z", "completed_at": "2024-08-04T02:53:23.831473Z"}], "thread_id": "Thread-1", "execution_time": 0.008640527725219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order\n\n), order_aggregates as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders__order_line_aggregates\n\n), transactions as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__transactions\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        email, source_relation\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:23.833386Z", "completed_at": "2024-08-04T02:53:24.348534Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.348932Z", "completed_at": "2024-08-04T02:53:24.348944Z"}], "thread_id": "Thread-1", "execution_time": 0.6847274303436279, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customers", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders__order_line_aggregates\n\n), transactions as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__transactions\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer_tag\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    listagg(distinct cast(value as TEXT), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), customers as (\n\n    select \n        \n*\n/* No columns were returned. Maybe the relation doesn't exist yet \nor all columns were excluded. This star is only output during  \ndbt compile, and exists to keep SQLFluff happy. */\n            \n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer\n\n), orders as (\n\n    select *\n    from __dbt__cte__shopify__customers__order_aggregates\n\n), abandoned as (\n\n    select \n        customer_id,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout\n    where customer_id is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customers.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.customer_tags,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customers\n    left join orders\n        on customers.customer_id = orders.customer_id\n        and customers.source_relation = orders.source_relation\n    left join abandoned\n        on customers.customer_id = abandoned.customer_id\n        and customers.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "TEST.PUBLIC_shopify.shopify__customers"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.519805Z", "completed_at": "2024-08-04T02:53:24.526232Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.526616Z", "completed_at": "2024-08-04T02:53:24.526625Z"}], "thread_id": "Thread-1", "execution_time": 0.007946491241455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders__order_line_aggregates\n\n), transactions as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__transactions\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__customer_tag\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    listagg(distinct cast(value as TEXT), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        customer_id, source_relation\n    from __dbt__cte__shopify__customers__order_aggregates\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.546327Z", "completed_at": "2024-08-04T02:53:24.550051Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.550425Z", "completed_at": "2024-08-04T02:53:24.550432Z"}], "thread_id": "Thread-1", "execution_time": 0.005059957504272461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect orders_unique_key\nfrom TEST.PUBLIC_shopify.shopify__orders\nwhere orders_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.552259Z", "completed_at": "2024-08-04T02:53:24.555896Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.556258Z", "completed_at": "2024-08-04T02:53:24.556264Z"}], "thread_id": "Thread-1", "execution_time": 0.0048313140869140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    orders_unique_key as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_shopify.shopify__orders\nwhere orders_unique_key is not null\ngroup by orders_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.558053Z", "completed_at": "2024-08-04T02:53:24.562764Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.563139Z", "completed_at": "2024-08-04T02:53:24.563145Z"}], "thread_id": "Thread-1", "execution_time": 0.0059163570404052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from TEST.PUBLIC_shopify.shopify__inventory_levels\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.565006Z", "completed_at": "2024-08-04T02:53:24.568660Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.569034Z", "completed_at": "2024-08-04T02:53:24.569040Z"}], "thread_id": "Thread-1", "execution_time": 0.004863739013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom TEST.PUBLIC_shopify.shopify__inventory_levels\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.570839Z", "completed_at": "2024-08-04T02:53:24.574521Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.574903Z", "completed_at": "2024-08-04T02:53:24.574909Z"}], "thread_id": "Thread-1", "execution_time": 0.004899263381958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom TEST.PUBLIC_shopify.shopify__inventory_levels\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.576737Z", "completed_at": "2024-08-04T02:53:24.586834Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.587215Z", "completed_at": "2024-08-04T02:53:24.587222Z"}], "thread_id": "Thread-1", "execution_time": 0.011308670043945312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_email_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__calendar\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n    \n\n), customers as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__customer_emails\n\n), orders as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.email,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        date_trunc('month', first_order_timestamp) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.email, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.email = orders.email\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    email\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), final as (\n\n    select \n        *, \n        md5(cast(coalesce(cast(date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n\n\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_shopify.shopify__customer_email_cohorts"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.589255Z", "completed_at": "2024-08-04T02:53:24.594077Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.594447Z", "completed_at": "2024-08-04T02:53:24.594453Z"}], "thread_id": "Thread-1", "execution_time": 0.0061872005462646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from TEST.PUBLIC_shopify.shopify__customer_emails\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.596290Z", "completed_at": "2024-08-04T02:53:24.606290Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.606683Z", "completed_at": "2024-08-04T02:53:24.606689Z"}], "thread_id": "Thread-1", "execution_time": 0.011218547821044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__calendar\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n    \n\n), customers as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__customers\n\n), orders as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        cast(date_trunc('month', first_order_timestamp) as date) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    customer_id\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), final as (\n\n    select \n        *, \n        md5(cast(coalesce(cast(date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(customer_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n\n\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_shopify.shopify__customer_cohorts"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.608704Z", "completed_at": "2024-08-04T02:53:24.612631Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.613011Z", "completed_at": "2024-08-04T02:53:24.613017Z"}], "thread_id": "Thread-1", "execution_time": 0.005206108093261719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from TEST.PUBLIC_shopify.shopify__customers\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.614859Z", "completed_at": "2024-08-04T02:53:24.649617Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.650089Z", "completed_at": "2024-08-04T02:53:24.650102Z"}], "thread_id": "Thread-1", "execution_time": 0.036179304122924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__daily_shop", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__daily_orders as (\nwith orders as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__order_lines\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_timestamp) as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast(date_trunc('day', orders.created_timestamp) as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_shopify__daily_abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_at) as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates\n), shop as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__shop\n),\n\ncalendar as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__calendar\n    where cast(date_trunc('day', date_day) as date) = date_day\n),\n\ndaily_orders as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_orders\n),\n\ndaily_abandoned_checkouts as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_abandoned_checkouts\n),\n\n\n\nshop_calendar as (\n\n    select\n        cast(date_trunc('day', calendar.date_day) as date) as date_day,\n        shop.shop_id,\n        shop.name,\n        shop.domain,\n        shop.is_deleted,\n        shop.currency,\n        shop.enabled_presentment_currencies,\n        shop.iana_timezone,\n        shop.created_at,\n        shop.source_relation\n\n    from calendar\n    join shop \n        on cast(shop.created_at as date) <= calendar.date_day\n),\n\nfinal as (\n\n    select \n        shop_calendar.*,\n\n        coalesce(daily_orders.count_orders, 0) as count_orders,\n        coalesce(daily_orders.count_line_items, 0) as count_line_items,\n        daily_orders.avg_line_item_count,\n        coalesce(daily_orders.count_customers, 0) as count_customers,\n        coalesce(daily_orders.count_customer_emails, 0) as count_customer_emails,\n        coalesce(daily_orders.order_adjusted_total, 0) as order_adjusted_total,\n        daily_orders.avg_order_value,\n        coalesce(daily_orders.shipping_cost, 0) as shipping_cost,\n        coalesce(daily_orders.order_adjustment_amount, 0) as order_adjustment_amount,\n        coalesce(daily_orders.order_adjustment_tax_amount, 0) as order_adjustment_tax_amount,\n        coalesce(daily_orders.refund_subtotal, 0) as refund_subtotal,\n        coalesce(daily_orders.refund_total_tax, 0) as refund_total_tax,\n        coalesce(daily_orders.total_discounts, 0) as total_discounts,\n        daily_orders.avg_discount,\n        coalesce(daily_orders.shipping_discount_amount, 0) as shipping_discount_amount,\n        daily_orders.avg_shipping_discount_amount,\n        coalesce(daily_orders.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        daily_orders.avg_percentage_calc_discount_amount,\n        coalesce(daily_orders.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        daily_orders.avg_fixed_amount_discount_amount,\n        coalesce(daily_orders.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(daily_orders.count_locations_ordered_from, 0) as count_locations_ordered_from,\n        coalesce(daily_orders.count_orders_with_discounts, 0) as count_orders_with_discounts,\n        coalesce(daily_orders.count_orders_with_refunds, 0) as count_orders_with_refunds,\n        daily_orders.first_order_timestamp,\n        daily_orders.last_order_timestamp,\n\n        coalesce(daily_orders.quantity_sold, 0) as quantity_sold,\n        coalesce(daily_orders.quantity_refunded, 0) as quantity_refunded,\n        coalesce(daily_orders.quantity_net, 0) as quantity_net,\n        daily_orders.avg_quantity_sold,\n        daily_orders.avg_quantity_net,\n        coalesce(daily_orders.count_variants_sold, 0) as count_variants_sold,\n        coalesce(daily_orders.count_products_sold, 0) as count_products_sold,\n        coalesce(daily_orders.quantity_gift_cards_sold, 0) as quantity_gift_cards_sold,\n        coalesce(daily_orders.quantity_requiring_shipping, 0) as quantity_requiring_shipping,\n\n        coalesce(daily_abandoned_checkouts.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(daily_abandoned_checkouts.count_customers_abandoned_checkout, 0) as count_customers_abandoned_checkout,\n        coalesce(daily_abandoned_checkouts.count_customer_emails_abandoned_checkout, 0) as count_customer_emails_abandoned_checkout\n\n        \n\n    from shop_calendar\n    left join daily_orders \n        on shop_calendar.source_relation = daily_orders.source_relation\n        and shop_calendar.date_day = daily_orders.date_day\n    left join daily_abandoned_checkouts \n        on shop_calendar.source_relation = daily_abandoned_checkouts.source_relation\n        and shop_calendar.date_day = daily_abandoned_checkouts.date_day\n    \n    \n)\n\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_shopify.shopify__daily_shop"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.652394Z", "completed_at": "2024-08-04T02:53:24.681628Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.682011Z", "completed_at": "2024-08-04T02:53:24.682019Z"}], "thread_id": "Thread-1", "execution_time": 0.030794858932495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__discounts", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_discount_code\n),\n\norders as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n),  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_discount_code\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__abandoned_checkout_shipping_line\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), discount as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(discount_code_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as discounts_unique_key\n    from TEST.PUBLIC_stg_shopify.stg_shopify__discount_code\n\n    \n),\n\nprice_rule as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__price_rule\n),\n\norders_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n),\n\nabandoned_checkouts_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n),\n\ndiscount_price_rule_joined as (\n\n    select\n        discount.*,\n        price_rule.target_selection,\n        price_rule.target_type,\n        price_rule.title,\n        price_rule.usage_limit,\n        price_rule.value,\n        price_rule.value_type,\n        price_rule.allocation_limit,\n        price_rule.allocation_method,\n        price_rule.is_once_per_customer,\n        price_rule.customer_selection,\n        -- the below are NULL if customer_selection = all\n        price_rule.prereq_min_quantity,\n        price_rule.prereq_max_shipping_price,\n        price_rule.prereq_min_subtotal,\n        price_rule.prereq_min_purchase_quantity_for_entitlement,\n        price_rule.prereq_buy_x_get_this,\n        price_rule.prereq_buy_this_get_y,\n        price_rule.starts_at,\n        price_rule.ends_at,\n        price_rule.created_at as price_rule_created_at,\n        price_rule.updated_at as price_rule_updated_at\n\n    from discount\n    left join price_rule\n        on discount.price_rule_id = price_rule.price_rule_id\n        and discount.source_relation = price_rule.source_relation\n),\n\naggregates_joined as (\n\n    select \n        discount_price_rule_joined.*,\n        coalesce(orders_aggregated.count_orders, 0) as count_orders,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        orders_aggregated.avg_order_discount_amount,\n        coalesce(orders_aggregated.total_order_discount_amount, 0) as total_order_discount_amount,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_discount_amount, 0) as total_abandoned_checkout_discount_amount,\n        coalesce(orders_aggregated.total_order_line_items_price, 0) as total_order_line_items_price,\n        coalesce(orders_aggregated.total_order_shipping_cost, 0) as total_order_shipping_cost,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_shipping_price, 0) as total_abandoned_checkout_shipping_price,\n        coalesce(orders_aggregated.total_order_refund_amount, 0) as total_order_refund_amount,\n        coalesce(orders_aggregated.count_customers, 0) as count_customers,\n        coalesce(orders_aggregated.count_customer_emails, 0) as count_customer_emails,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customers, 0) as count_abandoned_checkout_customers,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customer_emails, 0) as count_abandoned_checkout_customer_emails\n\n    from discount_price_rule_joined\n    left join orders_aggregated\n        on discount_price_rule_joined.code = orders_aggregated.code\n        and discount_price_rule_joined.source_relation = orders_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = orders_aggregated.type\n        \n    left join abandoned_checkouts_aggregated\n        on discount_price_rule_joined.code = abandoned_checkouts_aggregated.code\n        and discount_price_rule_joined.source_relation = abandoned_checkouts_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = abandoned_checkouts_aggregated.type \n)\n\nselect * \nfrom aggregates_joined", "relation_name": "TEST.PUBLIC_shopify.shopify__discounts"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.684204Z", "completed_at": "2024-08-04T02:53:24.690235Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.690625Z", "completed_at": "2024-08-04T02:53:24.690632Z"}], "thread_id": "Thread-1", "execution_time": 0.007612943649291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__order_discount_code\n),\n\norders as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.692475Z", "completed_at": "2024-08-04T02:53:24.703295Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.703725Z", "completed_at": "2024-08-04T02:53:24.703731Z"}], "thread_id": "Thread-1", "execution_time": 0.012118339538574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__products", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product\n), \n\ncollection_product as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__collection_product\n),\n\ncollection as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__collection\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_tag\n),\n\nproduct_variant as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_variant\n),\n\nproduct_image as (\n\n    select *\n    from TEST.PUBLIC_stg_shopify.stg_shopify__product_image\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    listagg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    listagg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__order_lines\n\n), orders as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), products as (\n\n    select *\n    from __dbt__cte__int_shopify__products_with_aggregates\n\n), product_order_lines as (\n\n    select *\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(product_order_lines.quantity_sold,0) as total_quantity_sold,\n        coalesce(product_order_lines.subtotal_sold,0) as subtotal_sold,\n        coalesce(product_order_lines.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(product_order_lines.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        product_order_lines.first_order_timestamp,\n        product_order_lines.most_recent_order_timestamp,\n        product_order_lines.avg_quantity_per_order_line as avg_quantity_per_order_line,\n        coalesce(product_order_lines.product_total_discount,0) as product_total_discount,\n        product_order_lines.product_avg_discount_per_order_line as product_avg_discount_per_order_line,\n        coalesce(product_order_lines.product_total_tax,0) as product_total_tax,\n        product_order_lines.product_avg_tax_per_order_line as product_avg_tax_per_order_line\n\n    from products\n    left join product_order_lines\n        on products.product_id = product_order_lines.product_id\n        and products.source_relation = product_order_lines.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "TEST.PUBLIC_shopify.shopify__products"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.705688Z", "completed_at": "2024-08-04T02:53:24.712273Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.712678Z", "completed_at": "2024-08-04T02:53:24.712689Z"}], "thread_id": "Thread-1", "execution_time": 0.008044719696044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__order_lines\n\n), orders as (\n\n    select *\n    from TEST.PUBLIC_shopify.shopify__orders\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.714614Z", "completed_at": "2024-08-04T02:53:24.718890Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.719258Z", "completed_at": "2024-08-04T02:53:24.719264Z"}], "thread_id": "Thread-1", "execution_time": 0.0054912567138671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom TEST.PUBLIC_shopify.shopify__customer_email_cohorts\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.721102Z", "completed_at": "2024-08-04T02:53:24.724809Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.725175Z", "completed_at": "2024-08-04T02:53:24.725181Z"}], "thread_id": "Thread-1", "execution_time": 0.004912853240966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_shopify.shopify__customer_email_cohorts\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.726970Z", "completed_at": "2024-08-04T02:53:24.731785Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.732160Z", "completed_at": "2024-08-04T02:53:24.732166Z"}], "thread_id": "Thread-1", "execution_time": 0.006015300750732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom TEST.PUBLIC_shopify.shopify__customer_cohorts\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.733964Z", "completed_at": "2024-08-04T02:53:24.737506Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.737883Z", "completed_at": "2024-08-04T02:53:24.737889Z"}], "thread_id": "Thread-1", "execution_time": 0.00475001335144043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_shopify.shopify__customer_cohorts\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.739708Z", "completed_at": "2024-08-04T02:53:24.743327Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.743745Z", "completed_at": "2024-08-04T02:53:24.743751Z"}], "thread_id": "Thread-1", "execution_time": 0.004900217056274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom TEST.PUBLIC_shopify.shopify__daily_shop\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.745538Z", "completed_at": "2024-08-04T02:53:24.749434Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.749811Z", "completed_at": "2024-08-04T02:53:24.749817Z"}], "thread_id": "Thread-1", "execution_time": 0.005094289779663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        code, source_relation\n    from TEST.PUBLIC_shopify.shopify__discounts\n    group by code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.751623Z", "completed_at": "2024-08-04T02:53:24.756080Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.756443Z", "completed_at": "2024-08-04T02:53:24.756449Z"}], "thread_id": "Thread-1", "execution_time": 0.005669116973876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom TEST.PUBLIC_shopify.shopify__discounts\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.758233Z", "completed_at": "2024-08-04T02:53:24.761904Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.762275Z", "completed_at": "2024-08-04T02:53:24.762281Z"}], "thread_id": "Thread-1", "execution_time": 0.004869699478149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discounts_unique_key\nfrom TEST.PUBLIC_shopify.shopify__discounts\nwhere discounts_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.764134Z", "completed_at": "2024-08-04T02:53:24.767740Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.768111Z", "completed_at": "2024-08-04T02:53:24.768117Z"}], "thread_id": "Thread-1", "execution_time": 0.00484919548034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    discounts_unique_key as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_shopify.shopify__discounts\nwhere discounts_unique_key is not null\ngroup by discounts_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-04T02:53:24.770074Z", "completed_at": "2024-08-04T02:53:24.774026Z"}, {"name": "execute", "started_at": "2024-08-04T02:53:24.774398Z", "completed_at": "2024-08-04T02:53:24.774404Z"}], "thread_id": "Thread-1", "execution_time": 0.005327463150024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from TEST.PUBLIC_shopify.shopify__products\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 32.66129732131958, "args": {"show_resource_report": false, "indirect_selection": "eager", "log_format": "default", "source_freshness_run_project_hooks": false, "vars": {}, "require_explicit_package_overrides_for_builtin_materializations": true, "log_level_file": "debug", "send_anonymous_usage_stats": true, "warn_error_options": {"include": [], "exclude": []}, "log_file_max_bytes": 10485760, "profiles_dir": "/home/zh2408/.dbt", "static_parser": true, "output": "text", "print": true, "populate_cache": true, "strict_mode": false, "use_colors_file": true, "require_resource_names_without_spaces": false, "invocation_command": "dbt compile", "write_json": true, "exclude": [], "empty": false, "enable_legacy_logger": false, "log_level": "info", "introspect": true, "partial_parse_file_diff": true, "use_colors": true, "partial_parse": true, "inject_ephemeral_ctes": true, "quiet": false, "log_path": "/home/zh2408/dbt_projects/dbt_shopify/logs", "version_check": true, "defer": false, "project_dir": "/home/zh2408/dbt_projects/dbt_shopify", "select": [], "macro_debugging": false, "printer_width": 80, "cache_selected_only": false, "log_format_file": "debug", "favor_state": false, "which": "compile"}}