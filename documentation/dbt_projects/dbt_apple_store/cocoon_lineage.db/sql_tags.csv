model_name,summary,tags
model.apple_store.apple_store__app_version_report,"This SQL query combines data from multiple sources related to Apple Store app usage and crashes. It joins information about apps, their usage statistics, and crash reports, aggregating data by date, app ID, source type, and app version. The query creates a comprehensive report that includes various metrics such as active devices, installations, sessions, and crashes for each app version.","[""Integration"",""Aggregation"",""Cleaning""]"
model.apple_store.apple_store__source_type_report,"This SQL query integrates data from multiple Apple Store-related tables (app store, downloads, and usage) based on date, app ID, and source type. It aggregates metrics such as impressions, page views, downloads, active devices, and sessions. The query joins these aggregated results with app information and combines them into a single comprehensive report, filling in missing values with zeros.","[""Integration"",""Aggregation"",""Cleaning""]"
model.apple_store.apple_store__device_report,"This SQL query integrates data from multiple Apple Store-related tables, including app information, app store device data, downloads, usage, and crashes. It combines these sources to create a comprehensive report on app performance across different devices. The query uses CTEs to prepare and join the data, and then creates a final output that includes various metrics such as impressions, page views, downloads, active devices, and crashes for each app, date, device, and source type combination.","[""Integration"",""Aggregation"",""Cleaning""]"
model.apple_store.apple_store__overview_report,"This SQL query combines data from multiple Apple Store-related sources to create a comprehensive overview report. It integrates information about app store performance, crashes, downloads, and usage statistics for each app on a daily basis. The query joins these different data sources, performs some aggregations within CTEs, and then brings everything together in a final joined table. It also includes data cleaning by using COALESCE to handle potential NULL values in the metrics.","[""Integration"",""Aggregation"",""Cleaning""]"
model.apple_store.apple_store__territory_report,"This SQL query integrates data from multiple tables related to an Apple Store application. It combines information about apps, territories, downloads, usage, and country codes to create a comprehensive report. The query joins these tables based on common fields like date, app ID, source type, and territory. It also performs some data cleaning by coalescing values and standardizing country codes. The result is a detailed view of app performance across different territories, including metrics such as impressions, downloads, active devices, and sessions.","[""Integration"",""Cleaning""]"
model.apple_store.apple_store__platform_version_report,"This SQL query integrates data from multiple Apple Store-related tables, including app information, platform versions, crashes, downloads, and usage statistics. It combines these sources to create a comprehensive report that provides various metrics for each app, date, platform version, and source type. The query uses CTEs to organize and join the data, and includes aggregations for some metrics like crashes. The final result is a detailed view of app performance across different dimensions.","[""Integration"",""Aggregation"",""Cleaning""]"
model.apple_store.int_apple_store__usage_overview,"This SQL query aggregates data from the 'stg_apple_store__usage_device' table, summing up active devices, deletions, installations, and sessions for each unique combination of date and app ID. It provides a daily usage overview for each app in the Apple Store.","[""Aggregation""]"
model.apple_store.int_apple_store__crashes_overview,"This query aggregates crash data from the 'stg_apple_store__crashes_app_version' table. It groups the data by date and app ID, summing the number of crashes for each combination. The result provides an overview of crashes for each app on each day.","[""Aggregation""]"
model.apple_store.int_apple_store__app_store_overview,"This SQL query aggregates data from the 'stg_apple_store__app_store_device' table in the Apple Store database. It calculates the sum of impressions and page views for each unique combination of date and app ID. The query first selects all columns from the source table, then groups the data by date and app ID, summing the impressions and page views for each group.","[""Aggregation""]"
model.apple_store.int_apple_store__downloads_overview,"This query aggregates download data for Apple Store apps. It sums up first-time downloads, redownloads, and total downloads for each app on each day. The query first selects all columns from a staging table, then groups the data by date and app ID, calculating the sum of various download types.","[""Aggregation""]"
model.apple_store.int_apple_store__crashes_device,"This SQL query aggregates crash data from the Apple Store source table. It groups the data by date, app ID, and device, summing up the number of crashes. The query also includes a null column for source_type. The result is a simplified view of crash data across different dimensions.","[""Aggregation"",""Cleaning""]"
model.apple_store.int_apple_store__app_store_source_type,"This SQL query aggregates data from the 'stg_apple_store__app_store_device' table. It groups the data by date, app ID, and source type, and calculates the sum of impressions and page views for each group. The result is a summarized view of app performance metrics across different dimensions.","[""Aggregation""]"
model.apple_store.int_apple_store__usage_source_type,"This SQL query retrieves data from a staging table (stg_apple_store__usage_device) and aggregates it by date, app ID, and source type. It calculates the sum of active devices, deletions, installations, and sessions for each unique combination of these grouping fields.","[""Aggregation""]"
model.apple_store.int_apple_store__downloads_source_type,"This SQL query aggregates download data for Apple Store apps. It starts by selecting all columns from a staging table, then groups the data by date, app ID, and source type. It calculates the sum of first-time downloads, redownloads, and total downloads for each group. The result is a summarized view of download statistics for each app, broken down by date and source type.","[""Aggregation""]"
model.apple_store.int_apple_store__crashes_app_version,"This SQL query aggregates crash data from the apple_store_source.stg_apple_store__crashes_app_version table. It groups the data by date, app ID, and app version, summing up the total crashes for each combination. The query also includes a NULL source_type column in the output.","[""Aggregation""]"
model.apple_store.int_apple_store__platform_version,"This SQL query retrieves crash data from a staging table, aggregates the number of crashes by date, app ID, and platform version, and adds a null source_type column. It performs a simple aggregation without any complex filtering, cleaning, or integration operations.","[""Aggregation""]"
model.apple_store_source.stg_apple_store__usage_app_version,"This SQL query performs data transformation and type casting on the 'stg_apple_store__usage_app_version_tmp' table. It creates a CTE structure to first select all columns from the source table, then defines and casts specific fields to appropriate data types. Finally, it selects and renames certain columns, including converting the 'date' field to a DATE type. The query primarily focuses on data cleaning and formatting.","[""Cleaning"",""Other""]"
model.apple_store_source.stg_apple_store__crashes_platform_version,"This SQL query performs a basic transformation on data from a staging table. It casts the 'date' column to a DATE type, renames it to 'date_day', and selects specific columns (date_day, app_id, device, platform_version, crashes) for the final output. The query also includes a CTE that defines data types for various fields, although these are not directly used in the final selection.","[""Cleaning""]"
model.apple_store_source.stg_apple_store__downloads_device,"This SQL query performs data type casting and column selection on the 'stg_apple_store__downloads_device_tmp' table. It casts the 'date' column to DATE type and selects specific columns for the final output. The query doesn't perform any filtering, deduplication, or aggregation operations.","[""Cleaning""]"
model.apple_store_source.stg_apple_store__app_store_device,"This SQL query performs a series of transformations on data from the 'stg_apple_store__app_store_device_tmp' table. It first creates a CTE with all columns from the source table, then defines a structure for the fields with specific data types. Finally, it selects and casts certain columns, including converting the 'date' column to a DATE type and renaming it to 'date_day'. The query primarily focuses on data type casting and column selection/renaming.","[""Cleaning""]"
model.apple_store_source.stg_apple_store__crashes_app_version,"This SQL query performs a basic transformation on data from the 'stg_apple_store__crashes_app_version_tmp' table. It casts specific columns to defined data types, renames some columns, and selects a subset of columns for the final output. The main transformation is converting the 'date' column to a DATE type and renaming it to 'date_day'.","[""Cleaning"",""Featurization""]"
model.apple_store_source.stg_apple_store__usage_device,"This SQL query performs type casting and column selection on data from the 'stg_apple_store__usage_device_tmp' table. It casts various columns to specific data types, renames some columns, and selects a subset of columns for the final output. The query also converts the 'date' column to a DATE type and renames it to 'date_day'.","[""Cleaning"",""Other""]"
model.apple_store_source.stg_apple_store__usage_platform_version,"This SQL query performs data transformation and type casting on the 'stg_apple_store__usage_platform_version' table. It starts by selecting all columns from a temporary table, then defines a set of fields with specific data types. Finally, it selects and renames certain columns, casting the 'date' column to a DATE type. The query primarily focuses on data cleaning and restructuring.","[""Cleaning"",""Featurization""]"
model.apple_store_source.stg_apple_store__downloads_platform_version,"This SQL query performs data type casting and column selection on the 'stg_apple_store__downloads_platform_version' table. It casts the 'date' column to DATE type and selects specific columns for the final output. The query doesn't perform any filtering, deduplication, featurization, integration, or aggregation.","[""Cleaning""]"
model.apple_store_source.stg_apple_store__downloads_territory,"This SQL query performs data type casting and column selection on the apple_store_source.stg_apple_store__downloads_territory_tmp table. It casts the 'date' column to DATE type and selects specific columns for the final output. The query doesn't perform any filtering, deduplication, featurization, integration, or aggregation.","[""Cleaning""]"
model.apple_store_source.stg_apple_store__usage_territory,"This SQL query performs data type casting and column selection on the 'stg_apple_store__usage_territory_tmp' table. It first creates a CTE with all columns from the source table, then defines the data types for each column in a second CTE. Finally, it selects and renames specific columns, casting the 'date' column to DATE type. The query focuses on preparing and structuring the data for further use.","[""Cleaning"",""Other""]"
model.apple_store_source.stg_apple_store__app,"This SQL query performs a simple transformation on the 'stg_apple_store__app_tmp' table. It selects three specific columns (id, name, and is_enabled) from the source table, renames 'id' to 'app_id' and 'name' to 'app_name', and includes these along with 'is_enabled' in the final output. The query also defines a number of additional fields with NULL or default values, but these are not used in the final selection.","[""Cleaning""]"
model.apple_store_source.stg_apple_store__app_store_territory,"This SQL query performs a series of transformations on data from the 'stg_apple_store__app_store_territory_tmp' table. It first defines a base CTE that selects all columns from the source table. Then, it creates a 'fields' CTE that explicitly casts columns to specific data types, including setting some fields to NULL. Finally, in the 'final' CTE, it selects and renames certain columns, casting the 'date' column to a DATE type. The query ends by selecting all columns from the 'final' CTE.","[""Cleaning"",""Featurization""]"
model.apple_store_source.stg_apple_store__sales_account,"This SQL query performs a basic transformation on data from the 'stg_apple_store__sales_account_tmp' table. It selects all columns from the base table, then defines a set of fields with specific data types (although all values are set to NULL in this case). Finally, it renames two columns: 'id' to 'account_id' and 'name' to 'account_name'. The query doesn't perform any filtering, cleaning, deduplication, featurization, integration, or aggregation.","[""Other""]"
model.apple_store_source.stg_apple_store__app_store_platform_version,"This SQL query performs data type casting and column selection on the 'stg_apple_store__app_store_platform_version' table. It first creates a CTE with null values for all columns, then selects and renames specific columns from this CTE, casting the 'date' column to DATE type. The query focuses on preparing and structuring the data for further analysis, particularly related to app store metrics such as impressions and page views.","[""Cleaning"",""Featurization""]"
model.apple_store_source.stg_apple_store__downloads_platform_version_tmp,This SQL query selects all columns from the 'downloads_platform_version_source_type_report' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a simple extraction of raw data without any transformations or filters.,"[""Other""]"
model.apple_store_source.stg_apple_store__app_store_territory_tmp,This SQL query selects all columns from the 'app_store_territory_source_type_report' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a simple extraction of all data from the source table without any transformations or filtering.,"[""Other""]"
model.apple_store_source.stg_apple_store__app_store_device_tmp,"This SQL query selects all columns from the table 'TEST.itunes_connect.app_store_source_type_device_report' without any modifications or filtering. It appears to be a simple data extraction query, likely used as a staging step to copy all data from the source table into a new model or temporary table.","[""Other""]"
model.apple_store_source.stg_apple_store__app_tmp,"This SQL query selects all columns and rows from the 'app' table in the 'itunes_connect' schema of the 'TEST' database. It's a simple SELECT * statement without any filtering, transformation, or aggregation.","[""Other""]"
model.apple_store_source.stg_apple_store__downloads_territory_tmp,This SQL query selects all columns from the 'downloads_territory_source_type_report' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a straightforward data extraction without any transformations or filtering.,"[""Other""]"
model.apple_store_source.stg_apple_store__usage_device_tmp,"This SQL query selects all columns from the 'usage_source_type_device_report' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a simple data extraction query without any filtering, transformation, or aggregation.","[""Other""]"
model.apple_store_source.stg_apple_store__crashes_platform_version_tmp,This SQL query selects all columns from the 'crashes_platform_version_device_report' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a straightforward data extraction without any transformations or filtering.,"[""Other""]"
model.apple_store_source.stg_apple_store__sales_account_tmp,"This SQL query selects all columns and rows from the 'sales_account' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a simple data extraction query without any filtering, transformation, or aggregation.","[""Other""]"
model.apple_store_source.stg_apple_store__app_store_platform_version_tmp,"This SQL query selects all columns from the table 'app_store_platform_version_source_type_report' in the 'itunes_connect' schema of the 'TEST' database. It appears to be a straightforward data extraction query without any filtering, transformation, or aggregation.","[""Other""]"
model.apple_store_source.stg_apple_store__usage_territory_tmp,This SQL query selects all columns from the 'usage_territory_source_type_report' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a simple data extraction query without any transformations or filters.,"[""Other""]"
model.apple_store_source.stg_apple_store__usage_app_version_tmp,"This SQL query selects all columns from the 'usage_app_version_source_type_report' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a simple data extraction query without any transformation, filtering, or aggregation.","[""Other""]"
model.apple_store_source.stg_apple_store__usage_platform_version_tmp,This SQL query selects all columns from the 'usage_platform_version_source_type_report' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a simple data extraction query without any transformations or filters.,"[""Other""]"
model.apple_store_source.stg_apple_store__downloads_device_tmp,"This SQL query selects all columns from the 'downloads_source_type_device_report' table in the 'TEST.itunes_connect' schema. It appears to be a straightforward data extraction query without any filtering, transformation, or aggregation.","[""Other""]"
model.apple_store_source.stg_apple_store__crashes_app_version_tmp,"This SQL query selects all columns from the 'crashes_app_version_device_report' table in the 'itunes_connect' schema of the 'TEST' database. It appears to be a straightforward data extraction query without any filtering, transformation, or aggregation.","[""Other""]"
