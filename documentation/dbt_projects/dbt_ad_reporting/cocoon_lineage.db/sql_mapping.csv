model_name,sql_text
model.ad_reporting.ad_reporting__ad_report,"WITH __dbt__cte__int_ad_reporting__ad_report AS (
  WITH google_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('google_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(ad_id AS TEXT) AS ad_id,
      CAST(ad_name AS TEXT) AS ad_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_google_ads.google_ads__ad_report
  ), microsoft_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('microsoft_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(ad_id AS TEXT) AS ad_id,
      CAST(ad_name AS TEXT) AS ad_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__ad_report
  ), apple_search_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('apple_search_ads' AS TEXT) AS platform,
      CAST(organization_id AS TEXT) AS account_id,
      CAST(organization_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(ad_id AS TEXT) AS ad_id,
      CAST(ad_name AS TEXT) AS ad_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(taps AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__ad_report
  ), facebook_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('facebook_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_set_id AS TEXT) AS ad_group_id,
      CAST(ad_set_name AS TEXT) AS ad_group_name,
      CAST(ad_id AS TEXT) AS ad_id,
      CAST(ad_name AS TEXT) AS ad_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_facebook_ads.facebook_ads__ad_report
  ), linkedin_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('linkedin_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS ad_group_id,
      CAST(campaign_name AS TEXT) AS ad_group_name,
      CAST(creative_id AS TEXT) AS ad_id,
      CAST(NULL AS TEXT) AS ad_name,
      CAST(campaign_group_id AS TEXT) AS campaign_id,
      CAST(campaign_group_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__creative_report
  ), pinterest_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('pinterest_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(pin_promotion_id AS TEXT) AS ad_id,
      CAST(pin_name AS TEXT) AS ad_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_pinterest.pinterest_ads__pin_promotion_report
  ), snapchat_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('snapchat_ads' AS TEXT) AS platform,
      CAST(ad_account_id AS TEXT) AS account_id,
      CAST(ad_account_name AS TEXT) AS account_name,
      CAST(NULL AS TEXT) AS ad_group_id,
      CAST(NULL AS TEXT) AS ad_group_name,
      CAST(ad_id AS TEXT) AS ad_id,
      CAST(ad_name AS TEXT) AS ad_name,
      CAST(NULL AS TEXT) AS campaign_id,
      CAST(NULL AS TEXT) AS campaign_name,
      CAST(swipes AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__ad_report
  ), tiktok_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('tiktok_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(ad_id AS TEXT) AS ad_id,
      CAST(ad_name AS TEXT) AS ad_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__ad_report
  ), twitter_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('twitter_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(line_item_id AS TEXT) AS ad_group_id,
      CAST(line_item_name AS TEXT) AS ad_group_name,
      CAST(promoted_tweet_id AS TEXT) AS ad_id,
      CAST(tweet_name AS TEXT) AS ad_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_twitter_ads.twitter_ads__promoted_tweet_report
  ), amazon_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('amazon_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(ad_id AS TEXT) AS ad_id,
      CAST(advertised_asin AS TEXT) AS ad_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_amazon_ads.amazon_ads__ad_report
  ), reddit_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('reddit_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(NULL AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(ad_id AS TEXT) AS ad_id,
      CAST(ad_name AS TEXT) AS ad_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_reddit_ads.reddit_ads__ad_report
  ), unioned AS (
    SELECT
      *
    FROM amazon_ads
    UNION ALL
    SELECT
      *
    FROM apple_search_ads
    UNION ALL
    SELECT
      *
    FROM facebook_ads
    UNION ALL
    SELECT
      *
    FROM google_ads
    UNION ALL
    SELECT
      *
    FROM linkedin_ads
    UNION ALL
    SELECT
      *
    FROM microsoft_ads
    UNION ALL
    SELECT
      *
    FROM pinterest_ads
    UNION ALL
    SELECT
      *
    FROM snapchat_ads
    UNION ALL
    SELECT
      *
    FROM tiktok_ads
    UNION ALL
    SELECT
      *
    FROM twitter_ads
    UNION ALL
    SELECT
      *
    FROM reddit_ads
  )
  SELECT
    *
  FROM unioned
), base AS (
  SELECT
    *
  FROM __dbt__cte__int_ad_reporting__ad_report
), aggregated AS (
  SELECT
    source_relation,
    date_day,
    platform,
    account_id,
    account_name,
    campaign_id,
    campaign_name,
    ad_group_id,
    ad_group_name,
    ad_id,
    ad_name,
    SUM(clicks) AS clicks,
    SUM(impressions) AS impressions,
    SUM(spend) AS spend
  FROM base
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11
)
SELECT
  *
FROM aggregated"
model.ad_reporting.ad_reporting__account_report,"WITH __dbt__cte__int_ad_reporting__account_report AS (
  WITH twitter_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('twitter_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_twitter_ads.twitter_ads__account_report
  ), facebook_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('facebook_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_facebook_ads.facebook_ads__account_report
  ), google_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('google_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_google_ads.google_ads__account_report
  ), microsoft_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('microsoft_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__account_report
  ), apple_search_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('apple_search_ads' AS TEXT) AS platform,
      CAST(organization_id AS TEXT) AS account_id,
      CAST(organization_name AS TEXT) AS account_name,
      CAST(taps AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__organization_report
  ), linkedin_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('linkedin_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__account_report
  ), pinterest_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('pinterest_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_pinterest.pinterest_ads__advertiser_report
  ), snapchat_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('snapchat_ads' AS TEXT) AS platform,
      CAST(ad_account_id AS TEXT) AS account_id,
      CAST(ad_account_name AS TEXT) AS account_name,
      CAST(swipes AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__account_report
  ), tiktok_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('tiktok_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__advertiser_report
  ), amazon_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('amazon_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_amazon_ads.amazon_ads__account_report
  ), reddit_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('reddit_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(NULL AS TEXT) AS account_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_reddit_ads.reddit_ads__account_report
  ), unioned AS (
    SELECT
      *
    FROM amazon_ads
    UNION ALL
    SELECT
      *
    FROM apple_search_ads
    UNION ALL
    SELECT
      *
    FROM facebook_ads
    UNION ALL
    SELECT
      *
    FROM google_ads
    UNION ALL
    SELECT
      *
    FROM linkedin_ads
    UNION ALL
    SELECT
      *
    FROM microsoft_ads
    UNION ALL
    SELECT
      *
    FROM pinterest_ads
    UNION ALL
    SELECT
      *
    FROM snapchat_ads
    UNION ALL
    SELECT
      *
    FROM tiktok_ads
    UNION ALL
    SELECT
      *
    FROM twitter_ads
    UNION ALL
    SELECT
      *
    FROM reddit_ads
  )
  SELECT
    *
  FROM unioned
), base AS (
  SELECT
    *
  FROM __dbt__cte__int_ad_reporting__account_report
), aggregated AS (
  SELECT
    source_relation,
    date_day,
    platform,
    account_id,
    account_name,
    SUM(clicks) AS clicks,
    SUM(impressions) AS impressions,
    SUM(spend) AS spend
  FROM base
  GROUP BY
    1,
    2,
    3,
    4,
    5
)
SELECT
  *
FROM aggregated"
model.ad_reporting.ad_reporting__url_report,"WITH __dbt__cte__int_ad_reporting__url_report AS (
  WITH google_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('google_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(base_url AS TEXT) AS base_url,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend,
      CAST(url_host AS TEXT) AS url_host,
      CAST(url_path AS TEXT) AS url_path,
      CAST(utm_campaign AS TEXT) AS utm_campaign,
      CAST(utm_content AS TEXT) AS utm_content,
      CAST(utm_medium AS TEXT) AS utm_medium,
      CAST(utm_source AS TEXT) AS utm_source,
      CAST(utm_term AS TEXT) AS utm_term
    FROM TEST.PUBLIC_google_ads.google_ads__url_report
  ), microsoft_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('microsoft_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(base_url AS TEXT) AS base_url,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend,
      CAST(url_host AS TEXT) AS url_host,
      CAST(url_path AS TEXT) AS url_path,
      CAST(utm_campaign AS TEXT) AS utm_campaign,
      CAST(utm_content AS TEXT) AS utm_content,
      CAST(utm_medium AS TEXT) AS utm_medium,
      CAST(utm_source AS TEXT) AS utm_source,
      CAST(utm_term AS TEXT) AS utm_term
    FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__url_report
  ), facebook_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('facebook_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_set_id AS TEXT) AS ad_group_id,
      CAST(ad_set_name AS TEXT) AS ad_group_name,
      CAST(base_url AS TEXT) AS base_url,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend,
      CAST(url_host AS TEXT) AS url_host,
      CAST(url_path AS TEXT) AS url_path,
      CAST(utm_campaign AS TEXT) AS utm_campaign,
      CAST(utm_content AS TEXT) AS utm_content,
      CAST(utm_medium AS TEXT) AS utm_medium,
      CAST(utm_source AS TEXT) AS utm_source,
      CAST(utm_term AS TEXT) AS utm_term
    FROM TEST.PUBLIC_facebook_ads.facebook_ads__url_report
  ), linkedin_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('linkedin_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS ad_group_id,
      CAST(campaign_name AS TEXT) AS ad_group_name,
      CAST(base_url AS TEXT) AS base_url,
      CAST(campaign_group_id AS TEXT) AS campaign_id,
      CAST(campaign_group_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(cost AS FLOAT) AS spend,
      CAST(url_host AS TEXT) AS url_host,
      CAST(url_path AS TEXT) AS url_path,
      CAST(utm_campaign AS TEXT) AS utm_campaign,
      CAST(utm_content AS TEXT) AS utm_content,
      CAST(utm_medium AS TEXT) AS utm_medium,
      CAST(utm_source AS TEXT) AS utm_source,
      CAST(utm_term AS TEXT) AS utm_term
    FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__url_report
  ), pinterest_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('pinterest_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(base_url AS TEXT) AS base_url,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend,
      CAST(url_host AS TEXT) AS url_host,
      CAST(url_path AS TEXT) AS url_path,
      CAST(utm_campaign AS TEXT) AS utm_campaign,
      CAST(utm_content AS TEXT) AS utm_content,
      CAST(utm_medium AS TEXT) AS utm_medium,
      CAST(utm_source AS TEXT) AS utm_source,
      CAST(utm_term AS TEXT) AS utm_term
    FROM TEST.PUBLIC_pinterest.pinterest_ads__url_report
  ), snapchat_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('snapchat_ads' AS TEXT) AS platform,
      CAST(ad_account_id AS TEXT) AS account_id,
      CAST(ad_account_name AS TEXT) AS account_name,
      CAST(ad_squad_id AS TEXT) AS ad_group_id,
      CAST(ad_squad_name AS TEXT) AS ad_group_name,
      CAST(base_url AS TEXT) AS base_url,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(swipes AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend,
      CAST(url_host AS TEXT) AS url_host,
      CAST(url_path AS TEXT) AS url_path,
      CAST(utm_campaign AS TEXT) AS utm_campaign,
      CAST(utm_content AS TEXT) AS utm_content,
      CAST(utm_medium AS TEXT) AS utm_medium,
      CAST(utm_source AS TEXT) AS utm_source,
      CAST(utm_term AS TEXT) AS utm_term
    FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__url_report
  ), tiktok_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('tiktok_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(base_url AS TEXT) AS base_url,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend,
      CAST(url_host AS TEXT) AS url_host,
      CAST(url_path AS TEXT) AS url_path,
      CAST(utm_campaign AS TEXT) AS utm_campaign,
      CAST(utm_content AS TEXT) AS utm_content,
      CAST(utm_medium AS TEXT) AS utm_medium,
      CAST(utm_source AS TEXT) AS utm_source,
      CAST(utm_term AS TEXT) AS utm_term
    FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__url_report
  ), twitter_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('twitter_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(line_item_id AS TEXT) AS ad_group_id,
      CAST(line_item_name AS TEXT) AS ad_group_name,
      CAST(base_url AS TEXT) AS base_url,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend,
      CAST(url_host AS TEXT) AS url_host,
      CAST(url_path AS TEXT) AS url_path,
      CAST(utm_campaign AS TEXT) AS utm_campaign,
      CAST(utm_content AS TEXT) AS utm_content,
      CAST(utm_medium AS TEXT) AS utm_medium,
      CAST(utm_source AS TEXT) AS utm_source,
      CAST(utm_term AS TEXT) AS utm_term
    FROM TEST.PUBLIC_twitter_ads.twitter_ads__url_report
  ), reddit_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('reddit_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(NULL AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(base_url AS TEXT) AS base_url,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend,
      CAST(url_host AS TEXT) AS url_host,
      CAST(url_path AS TEXT) AS url_path,
      CAST(utm_campaign AS TEXT) AS utm_campaign,
      CAST(utm_content AS TEXT) AS utm_content,
      CAST(utm_medium AS TEXT) AS utm_medium,
      CAST(utm_source AS TEXT) AS utm_source,
      CAST(utm_term AS TEXT) AS utm_term
    FROM TEST.PUBLIC_reddit_ads.reddit_ads__url_report
  ), unioned AS (
    SELECT
      *
    FROM facebook_ads
    UNION ALL
    SELECT
      *
    FROM google_ads
    UNION ALL
    SELECT
      *
    FROM linkedin_ads
    UNION ALL
    SELECT
      *
    FROM microsoft_ads
    UNION ALL
    SELECT
      *
    FROM pinterest_ads
    UNION ALL
    SELECT
      *
    FROM snapchat_ads
    UNION ALL
    SELECT
      *
    FROM tiktok_ads
    UNION ALL
    SELECT
      *
    FROM twitter_ads
    UNION ALL
    SELECT
      *
    FROM reddit_ads
  )
  SELECT
    *
  FROM unioned
), base AS (
  SELECT
    *
  FROM __dbt__cte__int_ad_reporting__url_report
), aggregated AS (
  SELECT
    source_relation,
    date_day,
    platform,
    account_id,
    account_name,
    campaign_id,
    campaign_name,
    ad_group_id,
    ad_group_name,
    base_url,
    url_host,
    url_path,
    utm_source,
    utm_medium,
    utm_campaign,
    utm_content,
    utm_term,
    SUM(clicks) AS clicks,
    SUM(impressions) AS impressions,
    SUM(spend) AS spend
  FROM base
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17
)
SELECT
  *
FROM aggregated"
model.ad_reporting.ad_reporting__search_report,"WITH __dbt__cte__int_ad_reporting__search_report AS (
  WITH microsoft_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('microsoft_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(keyword_id AS TEXT) AS keyword_id,
      CAST(keyword_name AS TEXT) AS keyword_text,
      CAST(match_type AS TEXT) AS search_match_type,
      CAST(search_query AS TEXT) AS search_query,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__search_report
  ), apple_search_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('apple_search_ads' AS TEXT) AS platform,
      CAST(organization_id AS TEXT) AS account_id,
      CAST(organization_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(taps AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(keyword_id AS TEXT) AS keyword_id,
      CAST(keyword_text AS TEXT) AS keyword_text,
      CAST(match_type AS TEXT) AS search_match_type,
      CAST(search_term_text AS TEXT) AS search_query,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__search_term_report
  ), amazon_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('amazon_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(keyword_id AS TEXT) AS keyword_id,
      CAST(keyword_text AS TEXT) AS keyword_text,
      CAST(match_type AS TEXT) AS search_match_type,
      CAST(search_term AS TEXT) AS search_query,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_amazon_ads.amazon_ads__search_report
  ), unioned AS (
    SELECT
      *
    FROM amazon_ads
    UNION ALL
    SELECT
      *
    FROM apple_search_ads
    UNION ALL
    SELECT
      *
    FROM microsoft_ads
  )
  SELECT
    *
  FROM unioned
), base AS (
  SELECT
    *
  FROM __dbt__cte__int_ad_reporting__search_report
), aggregated AS (
  SELECT
    source_relation,
    date_day,
    platform,
    account_id,
    account_name,
    campaign_id,
    campaign_name,
    ad_group_id,
    ad_group_name,
    keyword_id,
    keyword_text,
    search_query,
    search_match_type,
    SUM(clicks) AS clicks,
    SUM(impressions) AS impressions,
    SUM(spend) AS spend
  FROM base
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13
)
SELECT
  *
FROM aggregated"
model.ad_reporting.ad_reporting__campaign_report,"WITH __dbt__cte__int_ad_reporting__campaign_report AS (
  WITH twitter_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('twitter_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_twitter_ads.twitter_ads__campaign_report
  ), facebook_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('facebook_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_facebook_ads.facebook_ads__campaign_report
  ), google_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('google_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_google_ads.google_ads__campaign_report
  ), microsoft_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('microsoft_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__campaign_report
  ), apple_search_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('apple_search_ads' AS TEXT) AS platform,
      CAST(organization_id AS TEXT) AS account_id,
      CAST(organization_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(taps AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__campaign_report
  ), linkedin_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('linkedin_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(campaign_group_id AS TEXT) AS campaign_id,
      CAST(campaign_group_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__campaign_group_report
  ), pinterest_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('pinterest_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_pinterest.pinterest_ads__campaign_report
  ), snapchat_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('snapchat_ads' AS TEXT) AS platform,
      CAST(ad_account_id AS TEXT) AS account_id,
      CAST(ad_account_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(swipes AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__campaign_report
  ), tiktok_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('tiktok_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__campaign_report
  ), amazon_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('amazon_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_amazon_ads.amazon_ads__campaign_report
  ), reddit_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('reddit_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(NULL AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_reddit_ads.reddit_ads__campaign_report
  ), unioned AS (
    SELECT
      *
    FROM amazon_ads
    UNION ALL
    SELECT
      *
    FROM apple_search_ads
    UNION ALL
    SELECT
      *
    FROM facebook_ads
    UNION ALL
    SELECT
      *
    FROM google_ads
    UNION ALL
    SELECT
      *
    FROM linkedin_ads
    UNION ALL
    SELECT
      *
    FROM microsoft_ads
    UNION ALL
    SELECT
      *
    FROM pinterest_ads
    UNION ALL
    SELECT
      *
    FROM snapchat_ads
    UNION ALL
    SELECT
      *
    FROM tiktok_ads
    UNION ALL
    SELECT
      *
    FROM twitter_ads
    UNION ALL
    SELECT
      *
    FROM reddit_ads
  )
  SELECT
    *
  FROM unioned
), base AS (
  SELECT
    *
  FROM __dbt__cte__int_ad_reporting__campaign_report
), aggregated AS (
  SELECT
    source_relation,
    date_day,
    platform,
    account_id,
    account_name,
    campaign_id,
    campaign_name,
    SUM(clicks) AS clicks,
    SUM(impressions) AS impressions,
    SUM(spend) AS spend
  FROM base
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7
)
SELECT
  *
FROM aggregated"
model.ad_reporting.ad_reporting__keyword_report,"WITH __dbt__cte__int_ad_reporting__keyword_report AS (
  WITH apple_search_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('apple_search_ads' AS TEXT) AS platform,
      CAST(organization_id AS TEXT) AS account_id,
      CAST(organization_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(taps AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(keyword_id AS TEXT) AS keyword_id,
      CAST(match_type AS TEXT) AS keyword_match_type,
      CAST(keyword_text AS TEXT) AS keyword_text,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__keyword_report
  ), google_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('google_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(criterion_id AS TEXT) AS keyword_id,
      CAST(keyword_match_type AS TEXT) AS keyword_match_type,
      CAST(keyword_text AS TEXT) AS keyword_text,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_google_ads.google_ads__keyword_report
  ), microsoft_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('microsoft_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(keyword_id AS TEXT) AS keyword_id,
      CAST(match_type AS TEXT) AS keyword_match_type,
      CAST(keyword_name AS TEXT) AS keyword_text,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__keyword_report
  ), pinterest_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('pinterest_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(keyword_id AS TEXT) AS keyword_id,
      CAST(match_type AS TEXT) AS keyword_match_type,
      CAST(keyword_value AS TEXT) AS keyword_text,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_pinterest.pinterest_ads__keyword_report
  ), twitter_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('twitter_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(line_item_id AS TEXT) AS ad_group_id,
      CAST(line_item_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(keyword_id AS TEXT) AS keyword_id,
      CAST(NULL AS TEXT) AS keyword_match_type,
      CAST(keyword AS TEXT) AS keyword_text,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_twitter_ads.twitter_ads__keyword_report
  ), amazon_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('amazon_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(keyword_id AS TEXT) AS keyword_id,
      CAST(match_type AS TEXT) AS keyword_match_type,
      CAST(keyword_text AS TEXT) AS keyword_text,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_amazon_ads.amazon_ads__keyword_report
  ), unioned AS (
    SELECT
      *
    FROM amazon_ads
    UNION ALL
    SELECT
      *
    FROM apple_search_ads
    UNION ALL
    SELECT
      *
    FROM google_ads
    UNION ALL
    SELECT
      *
    FROM microsoft_ads
    UNION ALL
    SELECT
      *
    FROM pinterest_ads
    UNION ALL
    SELECT
      *
    FROM twitter_ads
  )
  SELECT
    *
  FROM unioned
), base AS (
  SELECT
    *
  FROM __dbt__cte__int_ad_reporting__keyword_report
), aggregated AS (
  SELECT
    source_relation,
    date_day,
    platform,
    account_id,
    account_name,
    campaign_id,
    campaign_name,
    ad_group_id,
    ad_group_name,
    keyword_id,
    keyword_text,
    keyword_match_type,
    SUM(clicks) AS clicks,
    SUM(impressions) AS impressions,
    SUM(spend) AS spend
  FROM base
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
)
SELECT
  *
FROM aggregated"
model.ad_reporting.ad_reporting__ad_group_report,"WITH __dbt__cte__int_ad_reporting__ad_group_report AS (
  WITH google_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('google_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_google_ads.google_ads__ad_group_report
  ), microsoft_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('microsoft_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__ad_group_report
  ), apple_search_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('apple_search_ads' AS TEXT) AS platform,
      CAST(organization_id AS TEXT) AS account_id,
      CAST(organization_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(taps AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__ad_group_report
  ), linkedin_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('linkedin_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(campaign_id AS TEXT) AS ad_group_id,
      CAST(campaign_name AS TEXT) AS ad_group_name,
      CAST(campaign_group_id AS TEXT) AS campaign_id,
      CAST(campaign_group_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__campaign_report
  ), facebook_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('facebook_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_set_id AS TEXT) AS ad_group_id,
      CAST(ad_set_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_facebook_ads.facebook_ads__ad_set_report
  ), pinterest_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('pinterest_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_pinterest.pinterest_ads__ad_group_report
  ), snapchat_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('snapchat_ads' AS TEXT) AS platform,
      CAST(ad_account_id AS TEXT) AS account_id,
      CAST(ad_account_name AS TEXT) AS account_name,
      CAST(ad_squad_id AS TEXT) AS ad_group_id,
      CAST(ad_squad_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(swipes AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__ad_squad_report
  ), tiktok_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('tiktok_ads' AS TEXT) AS platform,
      CAST(advertiser_id AS TEXT) AS account_id,
      CAST(advertiser_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__ad_group_report
  ), twitter_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('twitter_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(line_item_id AS TEXT) AS ad_group_id,
      CAST(line_item_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_twitter_ads.twitter_ads__line_item_report
  ), amazon_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('amazon_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(account_name AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(cost AS FLOAT) AS spend
    FROM TEST.PUBLIC_amazon_ads.amazon_ads__ad_group_report
  ), reddit_ads AS (
    SELECT
      source_relation,
      TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
      CAST('reddit_ads' AS TEXT) AS platform,
      CAST(account_id AS TEXT) AS account_id,
      CAST(NULL AS TEXT) AS account_name,
      CAST(ad_group_id AS TEXT) AS ad_group_id,
      CAST(ad_group_name AS TEXT) AS ad_group_name,
      CAST(campaign_id AS TEXT) AS campaign_id,
      CAST(campaign_name AS TEXT) AS campaign_name,
      CAST(clicks AS INT) AS clicks,
      CAST(impressions AS INT) AS impressions,
      CAST(spend AS FLOAT) AS spend
    FROM TEST.PUBLIC_reddit_ads.reddit_ads__ad_group_report
  ), unioned AS (
    SELECT
      *
    FROM amazon_ads
    UNION ALL
    SELECT
      *
    FROM apple_search_ads
    UNION ALL
    SELECT
      *
    FROM facebook_ads
    UNION ALL
    SELECT
      *
    FROM google_ads
    UNION ALL
    SELECT
      *
    FROM linkedin_ads
    UNION ALL
    SELECT
      *
    FROM microsoft_ads
    UNION ALL
    SELECT
      *
    FROM pinterest_ads
    UNION ALL
    SELECT
      *
    FROM snapchat_ads
    UNION ALL
    SELECT
      *
    FROM tiktok_ads
    UNION ALL
    SELECT
      *
    FROM twitter_ads
    UNION ALL
    SELECT
      *
    FROM reddit_ads
  )
  SELECT
    *
  FROM unioned
), base AS (
  SELECT
    *
  FROM __dbt__cte__int_ad_reporting__ad_group_report
), aggregated AS (
  SELECT
    source_relation,
    date_day,
    platform,
    account_id,
    account_name,
    campaign_id,
    campaign_name,
    ad_group_id,
    ad_group_name,
    SUM(clicks) AS clicks,
    SUM(impressions) AS impressions,
    SUM(spend) AS spend
  FROM base
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9
)
SELECT
  *
FROM aggregated"
model.ad_reporting.metricflow_time_spine,"WITH days AS (
  WITH date_spine AS (
    WITH rawdata AS (
      WITH p AS (
        SELECT
          0 AS generated_number
        UNION ALL
        SELECT
          1
      ), unioned AS (
        SELECT
          p0.generated_number * POWER(2, 0) + p1.generated_number * POWER(2, 1) + p2.generated_number * POWER(2, 2) + p3.generated_number * POWER(2, 3) + p4.generated_number * POWER(2, 4) + p5.generated_number * POWER(2, 5) + p6.generated_number * POWER(2, 6) + p7.generated_number * POWER(2, 7) + p8.generated_number * POWER(2, 8) + p9.generated_number * POWER(2, 9) + p10.generated_number * POWER(2, 10) + p11.generated_number * POWER(2, 11) + 1 AS generated_number
        FROM p AS p0
        CROSS JOIN p AS p1
        CROSS JOIN p AS p2
        CROSS JOIN p AS p3
        CROSS JOIN p AS p4
        CROSS JOIN p AS p5
        CROSS JOIN p AS p6
        CROSS JOIN p AS p7
        CROSS JOIN p AS p8
        CROSS JOIN p AS p9
        CROSS JOIN p AS p10
        CROSS JOIN p AS p11
      )
      SELECT
        *
      FROM unioned
      WHERE
        generated_number <= 3651
      ORDER BY
        generated_number
    ), all_periods AS (
      SELECT
        (
          DATEADD(
            day,
            (
              ROW_NUMBER() OVER (ORDER BY 1) - 1
            ),
            DATEADD(
              day,
              -3650,
              CAST(CONVERT_TIMEZONE(
                'UTC',
                'America/Los_Angeles',
                CAST(CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP()) AS TIMESTAMP)
              ) AS DATE)
            )
          )
        ) AS date_day
      FROM rawdata
    ), filtered AS (
      SELECT
        *
      FROM all_periods
      WHERE
        date_day <= CAST(DATEADD(
          day,
          1,
          CAST(CONVERT_TIMEZONE(
            'UTC',
            'America/Los_Angeles',
            CAST(CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP()) AS TIMESTAMP)
          ) AS DATE)
        ) AS DATE)
    )
    SELECT
      *
    FROM filtered
  )
  SELECT
    CAST(d.date_day AS TIMESTAMP) AS date_day
  FROM date_spine AS d
), cast_to_date AS (
  SELECT
    CAST(date_day AS DATE) AS date_day
  FROM days
)
SELECT
  *
FROM cast_to_date"
model.ad_reporting.int_ad_reporting__account_report,"WITH twitter_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('twitter_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_twitter_ads.twitter_ads__account_report
), facebook_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('facebook_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_facebook_ads.facebook_ads__account_report
), google_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('google_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_google_ads.google_ads__account_report
), microsoft_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('microsoft_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__account_report
), apple_search_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('apple_search_ads' AS TEXT) AS platform,
    CAST(organization_id AS TEXT) AS account_id,
    CAST(organization_name AS TEXT) AS account_name,
    CAST(taps AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__organization_report
), linkedin_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('linkedin_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__account_report
), pinterest_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('pinterest_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_pinterest.pinterest_ads__advertiser_report
), snapchat_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('snapchat_ads' AS TEXT) AS platform,
    CAST(ad_account_id AS TEXT) AS account_id,
    CAST(ad_account_name AS TEXT) AS account_name,
    CAST(swipes AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__account_report
), tiktok_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('tiktok_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__advertiser_report
), amazon_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('amazon_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_amazon_ads.amazon_ads__account_report
), reddit_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('reddit_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS account_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_reddit_ads.reddit_ads__account_report
), unioned AS (
  SELECT
    *
  FROM amazon_ads
  UNION ALL
  SELECT
    *
  FROM apple_search_ads
  UNION ALL
  SELECT
    *
  FROM facebook_ads
  UNION ALL
  SELECT
    *
  FROM google_ads
  UNION ALL
  SELECT
    *
  FROM linkedin_ads
  UNION ALL
  SELECT
    *
  FROM microsoft_ads
  UNION ALL
  SELECT
    *
  FROM pinterest_ads
  UNION ALL
  SELECT
    *
  FROM snapchat_ads
  UNION ALL
  SELECT
    *
  FROM tiktok_ads
  UNION ALL
  SELECT
    *
  FROM twitter_ads
  UNION ALL
  SELECT
    *
  FROM reddit_ads
)
SELECT
  *
FROM unioned"
model.ad_reporting.int_ad_reporting__ad_group_report,"WITH google_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('google_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_google_ads.google_ads__ad_group_report
), microsoft_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('microsoft_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__ad_group_report
), apple_search_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('apple_search_ads' AS TEXT) AS platform,
    CAST(organization_id AS TEXT) AS account_id,
    CAST(organization_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(taps AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__ad_group_report
), linkedin_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('linkedin_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS ad_group_id,
    CAST(campaign_name AS TEXT) AS ad_group_name,
    CAST(campaign_group_id AS TEXT) AS campaign_id,
    CAST(campaign_group_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__campaign_report
), facebook_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('facebook_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_set_id AS TEXT) AS ad_group_id,
    CAST(ad_set_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_facebook_ads.facebook_ads__ad_set_report
), pinterest_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('pinterest_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_pinterest.pinterest_ads__ad_group_report
), snapchat_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('snapchat_ads' AS TEXT) AS platform,
    CAST(ad_account_id AS TEXT) AS account_id,
    CAST(ad_account_name AS TEXT) AS account_name,
    CAST(ad_squad_id AS TEXT) AS ad_group_id,
    CAST(ad_squad_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(swipes AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__ad_squad_report
), tiktok_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('tiktok_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__ad_group_report
), twitter_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('twitter_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(line_item_id AS TEXT) AS ad_group_id,
    CAST(line_item_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_twitter_ads.twitter_ads__line_item_report
), amazon_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('amazon_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_amazon_ads.amazon_ads__ad_group_report
), reddit_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('reddit_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_reddit_ads.reddit_ads__ad_group_report
), unioned AS (
  SELECT
    *
  FROM amazon_ads
  UNION ALL
  SELECT
    *
  FROM apple_search_ads
  UNION ALL
  SELECT
    *
  FROM facebook_ads
  UNION ALL
  SELECT
    *
  FROM google_ads
  UNION ALL
  SELECT
    *
  FROM linkedin_ads
  UNION ALL
  SELECT
    *
  FROM microsoft_ads
  UNION ALL
  SELECT
    *
  FROM pinterest_ads
  UNION ALL
  SELECT
    *
  FROM snapchat_ads
  UNION ALL
  SELECT
    *
  FROM tiktok_ads
  UNION ALL
  SELECT
    *
  FROM twitter_ads
  UNION ALL
  SELECT
    *
  FROM reddit_ads
)
SELECT
  *
FROM unioned"
model.ad_reporting.int_ad_reporting__search_report,"WITH microsoft_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('microsoft_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(keyword_id AS TEXT) AS keyword_id,
    CAST(keyword_name AS TEXT) AS keyword_text,
    CAST(match_type AS TEXT) AS search_match_type,
    CAST(search_query AS TEXT) AS search_query,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__search_report
), apple_search_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('apple_search_ads' AS TEXT) AS platform,
    CAST(organization_id AS TEXT) AS account_id,
    CAST(organization_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(taps AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(keyword_id AS TEXT) AS keyword_id,
    CAST(keyword_text AS TEXT) AS keyword_text,
    CAST(match_type AS TEXT) AS search_match_type,
    CAST(search_term_text AS TEXT) AS search_query,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__search_term_report
), amazon_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('amazon_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(keyword_id AS TEXT) AS keyword_id,
    CAST(keyword_text AS TEXT) AS keyword_text,
    CAST(match_type AS TEXT) AS search_match_type,
    CAST(search_term AS TEXT) AS search_query,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_amazon_ads.amazon_ads__search_report
), unioned AS (
  SELECT
    *
  FROM amazon_ads
  UNION ALL
  SELECT
    *
  FROM apple_search_ads
  UNION ALL
  SELECT
    *
  FROM microsoft_ads
)
SELECT
  *
FROM unioned"
model.ad_reporting.int_ad_reporting__ad_report,"WITH google_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('google_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(ad_id AS TEXT) AS ad_id,
    CAST(ad_name AS TEXT) AS ad_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_google_ads.google_ads__ad_report
), microsoft_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('microsoft_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(ad_id AS TEXT) AS ad_id,
    CAST(ad_name AS TEXT) AS ad_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__ad_report
), apple_search_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('apple_search_ads' AS TEXT) AS platform,
    CAST(organization_id AS TEXT) AS account_id,
    CAST(organization_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(ad_id AS TEXT) AS ad_id,
    CAST(ad_name AS TEXT) AS ad_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(taps AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__ad_report
), facebook_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('facebook_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_set_id AS TEXT) AS ad_group_id,
    CAST(ad_set_name AS TEXT) AS ad_group_name,
    CAST(ad_id AS TEXT) AS ad_id,
    CAST(ad_name AS TEXT) AS ad_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_facebook_ads.facebook_ads__ad_report
), linkedin_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('linkedin_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS ad_group_id,
    CAST(campaign_name AS TEXT) AS ad_group_name,
    CAST(creative_id AS TEXT) AS ad_id,
    CAST(NULL AS TEXT) AS ad_name,
    CAST(campaign_group_id AS TEXT) AS campaign_id,
    CAST(campaign_group_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__creative_report
), pinterest_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('pinterest_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(pin_promotion_id AS TEXT) AS ad_id,
    CAST(pin_name AS TEXT) AS ad_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_pinterest.pinterest_ads__pin_promotion_report
), snapchat_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('snapchat_ads' AS TEXT) AS platform,
    CAST(ad_account_id AS TEXT) AS account_id,
    CAST(ad_account_name AS TEXT) AS account_name,
    CAST(NULL AS TEXT) AS ad_group_id,
    CAST(NULL AS TEXT) AS ad_group_name,
    CAST(ad_id AS TEXT) AS ad_id,
    CAST(ad_name AS TEXT) AS ad_name,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS TEXT) AS campaign_name,
    CAST(swipes AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__ad_report
), tiktok_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('tiktok_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(ad_id AS TEXT) AS ad_id,
    CAST(ad_name AS TEXT) AS ad_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__ad_report
), twitter_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('twitter_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(line_item_id AS TEXT) AS ad_group_id,
    CAST(line_item_name AS TEXT) AS ad_group_name,
    CAST(promoted_tweet_id AS TEXT) AS ad_id,
    CAST(tweet_name AS TEXT) AS ad_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_twitter_ads.twitter_ads__promoted_tweet_report
), amazon_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('amazon_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(ad_id AS TEXT) AS ad_id,
    CAST(advertised_asin AS TEXT) AS ad_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_amazon_ads.amazon_ads__ad_report
), reddit_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('reddit_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(ad_id AS TEXT) AS ad_id,
    CAST(ad_name AS TEXT) AS ad_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_reddit_ads.reddit_ads__ad_report
), unioned AS (
  SELECT
    *
  FROM amazon_ads
  UNION ALL
  SELECT
    *
  FROM apple_search_ads
  UNION ALL
  SELECT
    *
  FROM facebook_ads
  UNION ALL
  SELECT
    *
  FROM google_ads
  UNION ALL
  SELECT
    *
  FROM linkedin_ads
  UNION ALL
  SELECT
    *
  FROM microsoft_ads
  UNION ALL
  SELECT
    *
  FROM pinterest_ads
  UNION ALL
  SELECT
    *
  FROM snapchat_ads
  UNION ALL
  SELECT
    *
  FROM tiktok_ads
  UNION ALL
  SELECT
    *
  FROM twitter_ads
  UNION ALL
  SELECT
    *
  FROM reddit_ads
)
SELECT
  *
FROM unioned"
model.ad_reporting.int_ad_reporting__url_report,"WITH google_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('google_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(base_url AS TEXT) AS base_url,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend,
    CAST(url_host AS TEXT) AS url_host,
    CAST(url_path AS TEXT) AS url_path,
    CAST(utm_campaign AS TEXT) AS utm_campaign,
    CAST(utm_content AS TEXT) AS utm_content,
    CAST(utm_medium AS TEXT) AS utm_medium,
    CAST(utm_source AS TEXT) AS utm_source,
    CAST(utm_term AS TEXT) AS utm_term
  FROM TEST.PUBLIC_google_ads.google_ads__url_report
), microsoft_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('microsoft_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(base_url AS TEXT) AS base_url,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend,
    CAST(url_host AS TEXT) AS url_host,
    CAST(url_path AS TEXT) AS url_path,
    CAST(utm_campaign AS TEXT) AS utm_campaign,
    CAST(utm_content AS TEXT) AS utm_content,
    CAST(utm_medium AS TEXT) AS utm_medium,
    CAST(utm_source AS TEXT) AS utm_source,
    CAST(utm_term AS TEXT) AS utm_term
  FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__url_report
), facebook_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('facebook_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_set_id AS TEXT) AS ad_group_id,
    CAST(ad_set_name AS TEXT) AS ad_group_name,
    CAST(base_url AS TEXT) AS base_url,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend,
    CAST(url_host AS TEXT) AS url_host,
    CAST(url_path AS TEXT) AS url_path,
    CAST(utm_campaign AS TEXT) AS utm_campaign,
    CAST(utm_content AS TEXT) AS utm_content,
    CAST(utm_medium AS TEXT) AS utm_medium,
    CAST(utm_source AS TEXT) AS utm_source,
    CAST(utm_term AS TEXT) AS utm_term
  FROM TEST.PUBLIC_facebook_ads.facebook_ads__url_report
), linkedin_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('linkedin_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS ad_group_id,
    CAST(campaign_name AS TEXT) AS ad_group_name,
    CAST(base_url AS TEXT) AS base_url,
    CAST(campaign_group_id AS TEXT) AS campaign_id,
    CAST(campaign_group_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(cost AS FLOAT) AS spend,
    CAST(url_host AS TEXT) AS url_host,
    CAST(url_path AS TEXT) AS url_path,
    CAST(utm_campaign AS TEXT) AS utm_campaign,
    CAST(utm_content AS TEXT) AS utm_content,
    CAST(utm_medium AS TEXT) AS utm_medium,
    CAST(utm_source AS TEXT) AS utm_source,
    CAST(utm_term AS TEXT) AS utm_term
  FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__url_report
), pinterest_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('pinterest_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(base_url AS TEXT) AS base_url,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend,
    CAST(url_host AS TEXT) AS url_host,
    CAST(url_path AS TEXT) AS url_path,
    CAST(utm_campaign AS TEXT) AS utm_campaign,
    CAST(utm_content AS TEXT) AS utm_content,
    CAST(utm_medium AS TEXT) AS utm_medium,
    CAST(utm_source AS TEXT) AS utm_source,
    CAST(utm_term AS TEXT) AS utm_term
  FROM TEST.PUBLIC_pinterest.pinterest_ads__url_report
), snapchat_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('snapchat_ads' AS TEXT) AS platform,
    CAST(ad_account_id AS TEXT) AS account_id,
    CAST(ad_account_name AS TEXT) AS account_name,
    CAST(ad_squad_id AS TEXT) AS ad_group_id,
    CAST(ad_squad_name AS TEXT) AS ad_group_name,
    CAST(base_url AS TEXT) AS base_url,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(swipes AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend,
    CAST(url_host AS TEXT) AS url_host,
    CAST(url_path AS TEXT) AS url_path,
    CAST(utm_campaign AS TEXT) AS utm_campaign,
    CAST(utm_content AS TEXT) AS utm_content,
    CAST(utm_medium AS TEXT) AS utm_medium,
    CAST(utm_source AS TEXT) AS utm_source,
    CAST(utm_term AS TEXT) AS utm_term
  FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__url_report
), tiktok_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('tiktok_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(base_url AS TEXT) AS base_url,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend,
    CAST(url_host AS TEXT) AS url_host,
    CAST(url_path AS TEXT) AS url_path,
    CAST(utm_campaign AS TEXT) AS utm_campaign,
    CAST(utm_content AS TEXT) AS utm_content,
    CAST(utm_medium AS TEXT) AS utm_medium,
    CAST(utm_source AS TEXT) AS utm_source,
    CAST(utm_term AS TEXT) AS utm_term
  FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__url_report
), twitter_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('twitter_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(line_item_id AS TEXT) AS ad_group_id,
    CAST(line_item_name AS TEXT) AS ad_group_name,
    CAST(base_url AS TEXT) AS base_url,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend,
    CAST(url_host AS TEXT) AS url_host,
    CAST(url_path AS TEXT) AS url_path,
    CAST(utm_campaign AS TEXT) AS utm_campaign,
    CAST(utm_content AS TEXT) AS utm_content,
    CAST(utm_medium AS TEXT) AS utm_medium,
    CAST(utm_source AS TEXT) AS utm_source,
    CAST(utm_term AS TEXT) AS utm_term
  FROM TEST.PUBLIC_twitter_ads.twitter_ads__url_report
), reddit_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('reddit_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(base_url AS TEXT) AS base_url,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend,
    CAST(url_host AS TEXT) AS url_host,
    CAST(url_path AS TEXT) AS url_path,
    CAST(utm_campaign AS TEXT) AS utm_campaign,
    CAST(utm_content AS TEXT) AS utm_content,
    CAST(utm_medium AS TEXT) AS utm_medium,
    CAST(utm_source AS TEXT) AS utm_source,
    CAST(utm_term AS TEXT) AS utm_term
  FROM TEST.PUBLIC_reddit_ads.reddit_ads__url_report
), unioned AS (
  SELECT
    *
  FROM facebook_ads
  UNION ALL
  SELECT
    *
  FROM google_ads
  UNION ALL
  SELECT
    *
  FROM linkedin_ads
  UNION ALL
  SELECT
    *
  FROM microsoft_ads
  UNION ALL
  SELECT
    *
  FROM pinterest_ads
  UNION ALL
  SELECT
    *
  FROM snapchat_ads
  UNION ALL
  SELECT
    *
  FROM tiktok_ads
  UNION ALL
  SELECT
    *
  FROM twitter_ads
  UNION ALL
  SELECT
    *
  FROM reddit_ads
)
SELECT
  *
FROM unioned"
model.ad_reporting.int_ad_reporting__campaign_report,"WITH twitter_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('twitter_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_twitter_ads.twitter_ads__campaign_report
), facebook_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('facebook_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_facebook_ads.facebook_ads__campaign_report
), google_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('google_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_google_ads.google_ads__campaign_report
), microsoft_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('microsoft_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__campaign_report
), apple_search_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('apple_search_ads' AS TEXT) AS platform,
    CAST(organization_id AS TEXT) AS account_id,
    CAST(organization_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(taps AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__campaign_report
), linkedin_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('linkedin_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(campaign_group_id AS TEXT) AS campaign_id,
    CAST(campaign_group_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_linkedin_ads.linkedin_ads__campaign_group_report
), pinterest_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('pinterest_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_pinterest.pinterest_ads__campaign_report
), snapchat_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('snapchat_ads' AS TEXT) AS platform,
    CAST(ad_account_id AS TEXT) AS account_id,
    CAST(ad_account_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(swipes AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_snapchat_ads.snapchat_ads__campaign_report
), tiktok_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('tiktok_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_tiktok_ads.tiktok_ads__campaign_report
), amazon_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('amazon_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_amazon_ads.amazon_ads__campaign_report
), reddit_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('reddit_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS account_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_reddit_ads.reddit_ads__campaign_report
), unioned AS (
  SELECT
    *
  FROM amazon_ads
  UNION ALL
  SELECT
    *
  FROM apple_search_ads
  UNION ALL
  SELECT
    *
  FROM facebook_ads
  UNION ALL
  SELECT
    *
  FROM google_ads
  UNION ALL
  SELECT
    *
  FROM linkedin_ads
  UNION ALL
  SELECT
    *
  FROM microsoft_ads
  UNION ALL
  SELECT
    *
  FROM pinterest_ads
  UNION ALL
  SELECT
    *
  FROM snapchat_ads
  UNION ALL
  SELECT
    *
  FROM tiktok_ads
  UNION ALL
  SELECT
    *
  FROM twitter_ads
  UNION ALL
  SELECT
    *
  FROM reddit_ads
)
SELECT
  *
FROM unioned"
model.ad_reporting.int_ad_reporting__keyword_report,"WITH apple_search_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('apple_search_ads' AS TEXT) AS platform,
    CAST(organization_id AS TEXT) AS account_id,
    CAST(organization_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(taps AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(keyword_id AS TEXT) AS keyword_id,
    CAST(match_type AS TEXT) AS keyword_match_type,
    CAST(keyword_text AS TEXT) AS keyword_text,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_apple_search_ads.apple_search_ads__keyword_report
), google_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('google_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(criterion_id AS TEXT) AS keyword_id,
    CAST(keyword_match_type AS TEXT) AS keyword_match_type,
    CAST(keyword_text AS TEXT) AS keyword_text,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_google_ads.google_ads__keyword_report
), microsoft_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('microsoft_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(keyword_id AS TEXT) AS keyword_id,
    CAST(match_type AS TEXT) AS keyword_match_type,
    CAST(keyword_name AS TEXT) AS keyword_text,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_microsoft_ads.microsoft_ads__keyword_report
), pinterest_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('pinterest_ads' AS TEXT) AS platform,
    CAST(advertiser_id AS TEXT) AS account_id,
    CAST(advertiser_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(keyword_id AS TEXT) AS keyword_id,
    CAST(match_type AS TEXT) AS keyword_match_type,
    CAST(keyword_value AS TEXT) AS keyword_text,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_pinterest.pinterest_ads__keyword_report
), twitter_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('twitter_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(line_item_id AS TEXT) AS ad_group_id,
    CAST(line_item_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(keyword_id AS TEXT) AS keyword_id,
    CAST(NULL AS TEXT) AS keyword_match_type,
    CAST(keyword AS TEXT) AS keyword_text,
    CAST(spend AS FLOAT) AS spend
  FROM TEST.PUBLIC_twitter_ads.twitter_ads__keyword_report
), amazon_ads AS (
  SELECT
    source_relation,
    TO_DATE(TO_TIMESTAMP(date_day)) AS date_day,
    CAST('amazon_ads' AS TEXT) AS platform,
    CAST(account_id AS TEXT) AS account_id,
    CAST(account_name AS TEXT) AS account_name,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    CAST(ad_group_name AS TEXT) AS ad_group_name,
    CAST(campaign_id AS TEXT) AS campaign_id,
    CAST(campaign_name AS TEXT) AS campaign_name,
    CAST(clicks AS INT) AS clicks,
    CAST(impressions AS INT) AS impressions,
    CAST(keyword_id AS TEXT) AS keyword_id,
    CAST(match_type AS TEXT) AS keyword_match_type,
    CAST(keyword_text AS TEXT) AS keyword_text,
    CAST(cost AS FLOAT) AS spend
  FROM TEST.PUBLIC_amazon_ads.amazon_ads__keyword_report
), unioned AS (
  SELECT
    *
  FROM amazon_ads
  UNION ALL
  SELECT
    *
  FROM apple_search_ads
  UNION ALL
  SELECT
    *
  FROM google_ads
  UNION ALL
  SELECT
    *
  FROM microsoft_ads
  UNION ALL
  SELECT
    *
  FROM pinterest_ads
  UNION ALL
  SELECT
    *
  FROM twitter_ads
)
SELECT
  *
FROM unioned"
model.facebook_ads.facebook_ads__ad_set_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__basic_ad
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_sets AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__ad_set_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_id,
    accounts.account_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    ad_sets.ad_set_id,
    ad_sets.ad_set_name,
    ad_sets.start_at,
    ad_sets.end_at,
    ad_sets.bid_strategy,
    ad_sets.daily_budget,
    ad_sets.budget_remaining,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN campaigns
    ON ads.campaign_id = campaigns.campaign_id
    AND ads.source_relation = campaigns.source_relation
  LEFT JOIN ad_sets
    ON ads.ad_set_id = ad_sets.ad_set_id
    AND ads.source_relation = ad_sets.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13
)
SELECT
  *
FROM joined"
model.facebook_ads.facebook_ads__url_tags,"

with base as (

    select *
    from TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__creative_history
    where is_most_recent_record = true
), 

required_fields as (

    select
        source_relation,
        _fivetran_id,
        creative_id,
        url_tags
    from base
    where url_tags is not null
), 



  cleaned_fields as (

      select
          source_relation,
          _fivetran_id,
          creative_id,
          parse_json(url_tags) as url_tags
      from required_fields
      where url_tags is not null
  ), 

  fields as (

      select
          source_relation,
          _fivetran_id,
          creative_id,
          url_tags.value:key::string as key,
          url_tags.value:value::string as value,
          url_tags.value:type::string as type
      from cleaned_fields,
      lateral flatten( input => url_tags ) as url_tags
  )

 

select *
from fields"
model.facebook_ads.facebook_ads__account_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__basic_ad
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_id,
    accounts.account_name,
    accounts.account_status,
    accounts.business_country_code,
    accounts.created_at,
    accounts.currency,
    accounts.timezone_name,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9
)
SELECT
  *
FROM joined"
model.facebook_ads.facebook_ads__campaign_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__basic_ad
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_id,
    accounts.account_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    campaigns.start_at,
    campaigns.end_at,
    campaigns.status,
    campaigns.daily_budget,
    campaigns.lifetime_budget,
    campaigns.budget_remaining,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN campaigns
    ON ads.campaign_id = campaigns.campaign_id
    AND ads.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
)
SELECT
  *
FROM joined"
model.facebook_ads.facebook_ads__url_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__basic_ad
), creatives AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads.int_facebook_ads__creative_history
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), ad_sets AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__ad_set_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_id,
    accounts.account_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    ad_sets.ad_set_id,
    ad_sets.ad_set_name,
    ads.ad_id,
    ads.ad_name,
    creatives.creative_id,
    creatives.creative_name,
    creatives.base_url,
    creatives.url_host,
    creatives.url_path,
    creatives.utm_source,
    creatives.utm_medium,
    creatives.utm_campaign,
    creatives.utm_content,
    creatives.utm_term,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN creatives
    ON ads.creative_id = creatives.creative_id
    AND ads.source_relation = creatives.source_relation
  LEFT JOIN ad_sets
    ON ads.ad_set_id = ad_sets.ad_set_id
    AND ads.source_relation = ad_sets.source_relation
  LEFT JOIN campaigns
    ON ads.campaign_id = campaigns.campaign_id
    AND ads.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  WHERE
    NOT creatives.url IS NULL
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20
)
SELECT
  *
FROM joined"
model.facebook_ads.facebook_ads__ad_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__basic_ad
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_sets AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__ad_set_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_id,
    accounts.account_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    ad_sets.ad_set_id,
    ad_sets.ad_set_name,
    ads.ad_id,
    ads.ad_name,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN campaigns
    ON ads.campaign_id = campaigns.campaign_id
    AND ads.source_relation = campaigns.source_relation
  LEFT JOIN ad_sets
    ON ads.ad_set_id = ad_sets.ad_set_id
    AND ads.source_relation = ad_sets.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10
)
SELECT
  *
FROM joined"
model.facebook_ads.int_facebook_ads__creative_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__creative_history
  WHERE
    is_most_recent_record = TRUE
), url_tags AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads.facebook_ads__url_tags
), url_tags_pivoted AS (
  SELECT
    source_relation,
    _fivetran_id,
    creative_id,
    MIN(CASE WHEN key = 'utm_source' THEN value END) AS utm_source,
    MIN(CASE WHEN key = 'utm_medium' THEN value END) AS utm_medium,
    MIN(CASE WHEN key = 'utm_campaign' THEN value END) AS utm_campaign,
    MIN(CASE WHEN key = 'utm_content' THEN value END) AS utm_content,
    MIN(CASE WHEN key = 'utm_term' THEN value END) AS utm_term
  FROM url_tags
  GROUP BY
    1,
    2,
    3
), fields AS (
  SELECT
    base.source_relation,
    base._fivetran_id,
    base.creative_id,
    base.account_id,
    base.creative_name,
    COALESCE(page_link, template_page_link) AS url,
    SPLIT_PART(COALESCE(page_link, template_page_link), '?', 1) AS base_url,
    TRY_CAST(SPLIT_PART(
      SPLIT_PART(
        REPLACE(
          REPLACE(
            REPLACE(COALESCE(page_link, template_page_link), 'android-app://', ''),
            'http://',
            ''
          ),
          'https://',
          ''
        ),
        '/',
        1
      ),
      '?',
      1
    ) AS TEXT) AS url_host,
    '/' || TRY_CAST(SPLIT_PART(
      CASE
        WHEN LENGTH(
          REPLACE(REPLACE(COALESCE(page_link, template_page_link), 'http://', ''), 'https://', '')
        ) - COALESCE(
          NULLIF(
            STR_POSITION(
              REPLACE(REPLACE(COALESCE(page_link, template_page_link), 'http://', ''), 'https://', ''),
              '/'
            ),
            0
          ),
          STR_POSITION(
            REPLACE(REPLACE(COALESCE(page_link, template_page_link), 'http://', ''), 'https://', ''),
            '?'
          ) - 1
        ) = 0
        THEN ''
        ELSE RIGHT(
          REPLACE(REPLACE(COALESCE(page_link, template_page_link), 'http://', ''), 'https://', ''),
          LENGTH(
            REPLACE(REPLACE(COALESCE(page_link, template_page_link), 'http://', ''), 'https://', '')
          ) - COALESCE(
            NULLIF(
              STR_POSITION(
                REPLACE(REPLACE(COALESCE(page_link, template_page_link), 'http://', ''), 'https://', ''),
                '/'
              ),
              0
            ),
            STR_POSITION(
              REPLACE(REPLACE(COALESCE(page_link, template_page_link), 'http://', ''), 'https://', ''),
              '?'
            ) - 1
          )
        )
      END,
      '?',
      1
    ) AS TEXT) AS url_path,
    COALESCE(
      url_tags_pivoted.utm_source,
      NULLIF(
        SPLIT_PART(SPLIT_PART(COALESCE(page_link, template_page_link), 'utm_source=', 2), '&', 1),
        ''
      )
    ) AS utm_source,
    COALESCE(
      url_tags_pivoted.utm_medium,
      NULLIF(
        SPLIT_PART(SPLIT_PART(COALESCE(page_link, template_page_link), 'utm_medium=', 2), '&', 1),
        ''
      )
    ) AS utm_medium,
    COALESCE(
      url_tags_pivoted.utm_campaign,
      NULLIF(
        SPLIT_PART(SPLIT_PART(COALESCE(page_link, template_page_link), 'utm_campaign=', 2), '&', 1),
        ''
      )
    ) AS utm_campaign,
    COALESCE(
      url_tags_pivoted.utm_content,
      NULLIF(
        SPLIT_PART(SPLIT_PART(COALESCE(page_link, template_page_link), 'utm_content=', 2), '&', 1),
        ''
      )
    ) AS utm_content,
    COALESCE(
      url_tags_pivoted.utm_term,
      NULLIF(
        SPLIT_PART(SPLIT_PART(COALESCE(page_link, template_page_link), 'utm_term=', 2), '&', 1),
        ''
      )
    ) AS utm_term
  FROM base
  LEFT JOIN url_tags_pivoted
    ON base._fivetran_id = url_tags_pivoted._fivetran_id
    AND base.source_relation = url_tags_pivoted.source_relation
    AND base.creative_id = url_tags_pivoted.creative_id
)
SELECT
  *
FROM fields"
model.amazon_ads_source.stg_amazon_ads__keyword_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__keyword_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS FLOAT) AS bid,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS creation_date,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS keyword_text,
    CAST(NULL AS TIMESTAMP) AS last_updated_date,
    CAST(NULL AS TEXT) AS match_type,
    CAST(NULL AS TEXT) AS native_language_keyword,
    CAST(NULL AS TEXT) AS serving_status,
    CAST(NULL AS TEXT) AS state,
    CAST(NULL AS TEXT) AS native_language_locale,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(id AS TEXT) AS keyword_id,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    bid,
    CAST(campaign_id AS TEXT) AS campaign_id,
    creation_date,
    keyword_text,
    last_updated_date,
    match_type,
    native_language_keyword,
    serving_status,
    state,
    native_language_locale,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY last_updated_date DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__advertised_product_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__advertised_product_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS INT) AS ad_id,
    CAST(NULL AS TEXT) AS advertised_asin,
    CAST(NULL AS TEXT) AS advertised_sku,
    CAST(NULL AS FLOAT) AS campaign_budget_amount,
    CAST(NULL AS TEXT) AS campaign_budget_currency_code,
    CAST(NULL AS TEXT) AS campaign_budget_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS FLOAT) AS cost,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(ad_id AS TEXT) AS ad_id,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    advertised_asin,
    advertised_sku,
    campaign_budget_amount,
    campaign_budget_currency_code,
    campaign_budget_type,
    CAST(campaign_id AS TEXT) AS campaign_id,
    clicks,
    cost,
    date AS date_day,
    impressions
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__targeting_keyword_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__targeting_keyword_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TEXT) AS ad_keyword_status,
    CAST(NULL AS FLOAT) AS campaign_budget_amount,
    CAST(NULL AS TEXT) AS campaign_budget_currency_code,
    CAST(NULL AS TEXT) AS campaign_budget_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS FLOAT) AS cost,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS FLOAT) AS keyword_bid,
    CAST(NULL AS INT) AS keyword_id,
    CAST(NULL AS TEXT) AS keyword_type,
    CAST(NULL AS TEXT) AS match_type,
    CAST(NULL AS TEXT) AS targeting,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    ad_keyword_status,
    campaign_budget_amount,
    campaign_budget_currency_code,
    campaign_budget_type,
    CAST(campaign_id AS TEXT) AS campaign_id,
    clicks,
    cost,
    date AS date_day,
    impressions,
    keyword_bid,
    CAST(keyword_id AS TEXT) AS keyword_id,
    keyword_type,
    match_type,
    targeting
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__ad_group_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__ad_group_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS creation_date,
    CAST(NULL AS FLOAT) AS default_bid,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TIMESTAMP) AS last_updated_date,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS serving_status,
    CAST(NULL AS TEXT) AS state,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(id AS TEXT) AS ad_group_id,
    CAST(campaign_id AS TEXT) AS campaign_id,
    creation_date,
    default_bid,
    last_updated_date,
    name AS ad_group_name,
    serving_status,
    state,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY last_updated_date DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__product_ad_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__product_ad_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TEXT) AS asin,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS creation_date,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TIMESTAMP) AS last_updated_date,
    CAST(NULL AS TEXT) AS serving_status,
    CAST(NULL AS TEXT) AS sku,
    CAST(NULL AS TEXT) AS state,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(id AS TEXT) AS ad_id,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    asin,
    CAST(campaign_id AS TEXT) AS campaign_id,
    creation_date,
    last_updated_date,
    serving_status,
    sku,
    state,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY last_updated_date DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__campaign_level_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_level_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS campaign_applicable_budget_rule_id,
    CAST(NULL AS TEXT) AS campaign_applicable_budget_rule_name,
    CAST(NULL AS TEXT) AS campaign_bidding_strategy,
    CAST(NULL AS FLOAT) AS campaign_budget_amount,
    CAST(NULL AS TEXT) AS campaign_budget_currency_code,
    CAST(NULL AS TEXT) AS campaign_budget_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS FLOAT) AS campaign_rule_based_budget_amount,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS FLOAT) AS cost,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    campaign_applicable_budget_rule_id,
    campaign_applicable_budget_rule_name,
    campaign_bidding_strategy,
    campaign_budget_amount,
    campaign_budget_currency_code,
    campaign_budget_type,
    CAST(campaign_id AS TEXT) AS campaign_id,
    campaign_rule_based_budget_amount,
    clicks,
    cost,
    date AS date_day,
    impressions
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__search_term_ad_keyword_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__search_term_ad_keyword_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TEXT) AS ad_keyword_status,
    CAST(NULL AS FLOAT) AS campaign_budget_amount,
    CAST(NULL AS TEXT) AS campaign_budget_currency_code,
    CAST(NULL AS TEXT) AS campaign_budget_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS FLOAT) AS cost,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS FLOAT) AS keyword_bid,
    CAST(NULL AS INT) AS keyword_id,
    CAST(NULL AS TEXT) AS search_term,
    CAST(NULL AS TEXT) AS targeting,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    ad_keyword_status,
    campaign_budget_amount,
    campaign_budget_currency_code,
    campaign_budget_type,
    CAST(campaign_id AS TEXT) AS campaign_id,
    clicks,
    cost,
    date AS date_day,
    impressions,
    keyword_bid,
    CAST(keyword_id AS TEXT) AS keyword_id,
    search_term,
    targeting
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__ad_group_level_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__ad_group_level_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TEXT) AS campaign_bidding_strategy,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS FLOAT) AS cost,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    campaign_bidding_strategy,
    clicks,
    cost,
    date AS date_day,
    impressions
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__profile,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__profile_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS account_marketplace_string_id,
    CAST(NULL AS TEXT) AS account_name,
    CAST(NULL AS TEXT) AS account_sub_type,
    CAST(NULL AS TEXT) AS account_type,
    CAST(NULL AS BOOLEAN) AS account_valid_payment_method,
    CAST(NULL AS TEXT) AS country_code,
    CAST(NULL AS TEXT) AS currency_code,
    CAST(NULL AS INT) AS daily_budget,
    CAST(NULL AS TEXT) AS timezone,
    CAST(NULL AS BOOLEAN) AS _fivetran_deleted,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(id AS TEXT) AS profile_id,
    CAST(account_id AS TEXT) AS account_id,
    account_marketplace_string_id,
    account_name,
    account_sub_type,
    account_type,
    account_valid_payment_method,
    country_code,
    currency_code,
    daily_budget,
    timezone,
    _fivetran_deleted
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__campaign_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS bidding_strategy,
    CAST(NULL AS TIMESTAMP) AS creation_date,
    CAST(NULL AS DATE) AS end_date,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TIMESTAMP) AS last_updated_date,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS INT) AS portfolio_id,
    CAST(NULL AS INT) AS profile_id,
    CAST(NULL AS TEXT) AS serving_status,
    CAST(NULL AS DATE) AS start_date,
    CAST(NULL AS TEXT) AS state,
    CAST(NULL AS TEXT) AS targeting_type,
    CAST(NULL AS FLOAT) AS budget,
    CAST(NULL AS TEXT) AS budget_type,
    CAST(NULL AS FLOAT) AS effective_budget,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(id AS TEXT) AS campaign_id,
    last_updated_date,
    bidding_strategy,
    creation_date,
    end_date,
    name AS campaign_name,
    CAST(portfolio_id AS TEXT) AS portfolio_id,
    CAST(profile_id AS TEXT) AS profile_id,
    serving_status,
    start_date,
    state,
    targeting_type,
    budget,
    budget_type,
    effective_budget,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY last_updated_date DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__portfolio_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__portfolio_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS FLOAT) AS budget_amount,
    CAST(NULL AS TEXT) AS budget_currency_code,
    CAST(NULL AS DATE) AS budget_end_date,
    CAST(NULL AS TEXT) AS budget_policy,
    CAST(NULL AS DATE) AS budget_start_date,
    CAST(NULL AS TIMESTAMP) AS creation_date,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS BOOLEAN) AS in_budget,
    CAST(NULL AS TIMESTAMP) AS last_updated_date,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS INT) AS profile_id,
    CAST(NULL AS TEXT) AS serving_status,
    CAST(NULL AS TEXT) AS state,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(id AS TEXT) AS portfolio_id,
    budget_amount,
    budget_currency_code,
    budget_end_date,
    budget_policy,
    budget_start_date,
    creation_date,
    in_budget,
    last_updated_date,
    name AS portfolio_name,
    CAST(profile_id AS TEXT) AS profile_id,
    serving_status,
    state,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY last_updated_date DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.amazon_ads_source.stg_amazon_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__keyword_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__profile_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__ad_group_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__advertised_product_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__search_term_ad_keyword_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__portfolio_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__ad_group_level_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__product_ad_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__targeting_keyword_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.amazon_ads_source.stg_amazon_ads__campaign_level_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads.microsoft_ads__ad_group_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_name,
    report.account_id,
    campaigns.campaign_name,
    report.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    report.device_os,
    report.device_type,
    report.network,
    report.currency_code,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  LEFT JOIN ad_groups
    ON report.ad_group_id = ad_groups.ad_group_id
    AND report.source_relation = ad_groups.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
)
SELECT
  *
FROM joined"
model.microsoft_ads.microsoft_ads__url_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_daily_report
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_name,
    report.account_id,
    campaigns.campaign_name,
    report.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    ads.ad_name,
    report.ad_id,
    report.device_os,
    report.device_type,
    report.network,
    report.currency_code,
    SPLIT_PART(ads.final_url, '?', 1) AS base_url,
    TRY_CAST(SPLIT_PART(
      SPLIT_PART(
        REPLACE(REPLACE(REPLACE(ads.final_url, 'android-app://', ''), 'http://', ''), 'https://', ''),
        '/',
        1
      ),
      '?',
      1
    ) AS TEXT) AS url_host,
    '/' || TRY_CAST(SPLIT_PART(
      CASE
        WHEN LENGTH(REPLACE(REPLACE(ads.final_url, 'http://', ''), 'https://', '')) - COALESCE(
          NULLIF(
            STR_POSITION(REPLACE(REPLACE(ads.final_url, 'http://', ''), 'https://', ''), '/'),
            0
          ),
          STR_POSITION(REPLACE(REPLACE(ads.final_url, 'http://', ''), 'https://', ''), '?') - 1
        ) = 0
        THEN ''
        ELSE RIGHT(
          REPLACE(REPLACE(ads.final_url, 'http://', ''), 'https://', ''),
          LENGTH(REPLACE(REPLACE(ads.final_url, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(
              STR_POSITION(REPLACE(REPLACE(ads.final_url, 'http://', ''), 'https://', ''), '/'),
              0
            ),
            STR_POSITION(REPLACE(REPLACE(ads.final_url, 'http://', ''), 'https://', ''), '?') - 1
          )
        )
      END,
      '?',
      1
    ) AS TEXT) AS url_path,
    NULLIF(SPLIT_PART(SPLIT_PART(ads.final_url, 'utm_source=', 2), '&', 1), '') AS utm_source,
    NULLIF(SPLIT_PART(SPLIT_PART(ads.final_url, 'utm_medium=', 2), '&', 1), '') AS utm_medium,
    NULLIF(SPLIT_PART(SPLIT_PART(ads.final_url, 'utm_campaign=', 2), '&', 1), '') AS utm_campaign,
    NULLIF(SPLIT_PART(SPLIT_PART(ads.final_url, 'utm_content=', 2), '&', 1), '') AS utm_content,
    NULLIF(SPLIT_PART(SPLIT_PART(ads.final_url, 'utm_term=', 2), '&', 1), '') AS utm_term,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN ad_groups
    ON report.ad_group_id = ad_groups.ad_group_id
    AND report.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22
), filtered AS (
  SELECT
    *
  FROM joined
  WHERE
    NOT base_url IS NULL
)
SELECT
  *
FROM filtered"
model.microsoft_ads.microsoft_ads__keyword_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__keyword_daily_report
), keywords AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__keyword_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_name,
    report.account_id,
    campaigns.campaign_name,
    report.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    ads.ad_name,
    report.ad_id,
    keywords.keyword_name,
    report.keyword_id,
    keywords.match_type,
    report.device_os,
    report.device_type,
    report.network,
    report.currency_code,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN ad_groups
    ON report.ad_group_id = ad_groups.ad_group_id
    AND report.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN keywords
    ON report.keyword_id = keywords.keyword_id
    AND report.source_relation = keywords.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17
)
SELECT
  *
FROM joined"
model.microsoft_ads.microsoft_ads__campaign_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__campaign_daily_report
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_name,
    report.account_id,
    campaigns.campaign_name,
    report.campaign_id,
    campaigns.type AS campaign_type,
    campaigns.time_zone AS campaign_timezone,
    campaigns.status AS campaign_status,
    report.device_os,
    report.device_type,
    report.network,
    report.currency_code,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13
)
SELECT
  *
FROM joined"
model.microsoft_ads.microsoft_ads__ad_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_daily_report
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_name,
    report.account_id,
    campaigns.campaign_name,
    report.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    ads.ad_name,
    report.ad_id,
    ads.type AS ad_type,
    report.device_os,
    report.device_type,
    report.network,
    report.currency_code,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN ad_groups
    ON report.ad_group_id = ad_groups.ad_group_id
    AND report.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15
)
SELECT
  *
FROM joined"
model.microsoft_ads.microsoft_ads__account_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_daily_report
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_name,
    report.account_id,
    accounts.time_zone AS account_timezone,
    report.device_os,
    report.device_type,
    report.network,
    report.currency_code,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9
)
SELECT
  *
FROM joined"
model.microsoft_ads.microsoft_ads__search_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__search_daily_report
), keywords AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__keyword_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    accounts.account_name,
    report.account_id,
    campaigns.campaign_name,
    report.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    ads.ad_name,
    report.ad_id,
    report.keyword_id,
    keywords.keyword_name,
    COALESCE(report.delivered_match_type, report.bid_match_type) AS match_type,
    report.search_query,
    report.device_os,
    report.device_type,
    report.network,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN ad_groups
    ON report.ad_group_id = ad_groups.ad_group_id
    AND report.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN keywords
    ON report.keyword_id = keywords.keyword_id
    AND report.source_relation = keywords.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17
)
SELECT
  *
FROM joined"
model.apple_search_ads.apple_search_ads__ad_group_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_group_report
), ad_group AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), organization AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__organization
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    organization.organization_id,
    organization.organization_name,
    campaign.campaign_id,
    campaign.campaign_name,
    ad_group.ad_group_id,
    ad_group.ad_group_name,
    report.currency,
    ad_group.ad_group_status,
    ad_group.start_at,
    ad_group.end_at,
    SUM(report.taps) AS taps,
    SUM(report.new_downloads) AS new_downloads,
    SUM(report.redownloads) AS redownloads,
    SUM(report.new_downloads + report.redownloads) AS total_downloads,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  JOIN ad_group
    ON report.ad_group_id = ad_group.ad_group_id
    AND report.source_relation = ad_group.source_relation
  JOIN campaign
    ON ad_group.campaign_id = campaign.campaign_id
    AND ad_group.source_relation = campaign.source_relation
  JOIN organization
    ON ad_group.organization_id = organization.organization_id
    AND ad_group.source_relation = organization.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
)
SELECT
  *
FROM joined"
model.apple_search_ads.apple_search_ads__organization_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_report
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), organization AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__organization
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    organization.organization_id,
    organization.organization_name,
    organization.currency,
    SUM(report.taps) AS taps,
    SUM(report.new_downloads) AS new_downloads,
    SUM(report.redownloads) AS redownloads,
    SUM(report.new_downloads + report.redownloads) AS total_downloads,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  JOIN campaign
    ON report.campaign_id = campaign.campaign_id
    AND report.source_relation = campaign.source_relation
  JOIN organization
    ON campaign.organization_id = organization.organization_id
    AND campaign.source_relation = organization.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5
)
SELECT
  *
FROM joined"
model.apple_search_ads.apple_search_ads__ad_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_report
), ad AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), ad_group AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), organization AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__organization
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    organization.organization_id,
    organization.organization_name,
    campaign.campaign_id,
    campaign.campaign_name,
    ad_group.ad_group_id,
    ad_group.ad_group_name,
    ad.ad_id,
    ad.ad_name,
    report.currency,
    ad.ad_status,
    SUM(report.taps) AS taps,
    SUM(report.new_downloads) AS new_downloads,
    SUM(report.redownloads) AS redownloads,
    SUM(report.new_downloads + report.redownloads) AS total_downloads,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  JOIN ad
    ON report.ad_id = ad.ad_id AND report.source_relation = ad.source_relation
  JOIN ad_group
    ON report.ad_group_id = ad_group.ad_group_id
    AND report.source_relation = ad_group.source_relation
  JOIN campaign
    ON report.campaign_id = campaign.campaign_id
    AND report.source_relation = campaign.source_relation
  JOIN organization
    ON ad.organization_id = organization.organization_id
    AND ad.source_relation = organization.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
)
SELECT
  *
FROM joined"
model.apple_search_ads.apple_search_ads__search_term_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__search_term_report
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), organization AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__organization
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    organization.organization_id,
    organization.organization_name,
    campaign.campaign_id,
    campaign.campaign_name,
    report.ad_group_id,
    report.ad_group_name,
    report.keyword_id,
    report.keyword_text,
    report.search_term_text,
    report.match_type,
    report.currency,
    SUM(report.taps) AS taps,
    SUM(report.new_downloads) AS new_downloads,
    SUM(report.redownloads) AS redownloads,
    SUM(report.new_downloads + report.redownloads) AS total_downloads,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  JOIN campaign
    ON report.campaign_id = campaign.campaign_id
    AND report.source_relation = campaign.source_relation
  JOIN organization
    ON campaign.organization_id = organization.organization_id
    AND campaign.source_relation = organization.source_relation
  WHERE
    NOT report.search_term_text IS NULL
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13
)
SELECT
  *
FROM joined"
model.apple_search_ads.apple_search_ads__keyword_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__keyword_report
), keyword AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__keyword_history
  WHERE
    is_most_recent_record = TRUE
), ad_group AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), organization AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__organization
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    organization.organization_id,
    organization.organization_name,
    campaign.campaign_id,
    campaign.campaign_name,
    ad_group.ad_group_id,
    ad_group.ad_group_name,
    keyword.keyword_id,
    keyword.keyword_text,
    keyword.match_type,
    report.currency,
    keyword.keyword_status,
    SUM(report.taps) AS taps,
    SUM(report.new_downloads) AS new_downloads,
    SUM(report.redownloads) AS redownloads,
    SUM(report.new_downloads + report.redownloads) AS total_downloads,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  JOIN keyword
    ON report.keyword_id = keyword.keyword_id
    AND report.source_relation = keyword.source_relation
  JOIN ad_group
    ON keyword.ad_group_id = ad_group.ad_group_id
    AND keyword.source_relation = ad_group.source_relation
  JOIN campaign
    ON ad_group.campaign_id = campaign.campaign_id
    AND ad_group.source_relation = campaign.source_relation
  JOIN organization
    ON ad_group.organization_id = organization.organization_id
    AND ad_group.source_relation = organization.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13
)
SELECT
  *
FROM joined"
model.apple_search_ads.apple_search_ads__campaign_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_report
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), organization AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__organization
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    campaign.organization_id,
    organization.organization_name,
    campaign.campaign_id,
    campaign.campaign_name,
    report.currency,
    campaign.campaign_status,
    campaign.start_at,
    campaign.end_at,
    SUM(report.taps) AS taps,
    SUM(report.new_downloads) AS new_downloads,
    SUM(report.redownloads) AS redownloads,
    SUM(report.new_downloads + report.redownloads) AS total_downloads,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  JOIN campaign
    ON report.campaign_id = campaign.campaign_id
    AND report.source_relation = campaign.source_relation
  JOIN organization
    ON campaign.organization_id = organization.organization_id
    AND campaign.source_relation = organization.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10
)
SELECT
  *
FROM joined"
model.snapchat_ads_source.stg_snapchat_ads__ad_account_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS advertiser,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS TEXT) AS currency,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS timezone,
    CAST(NULL AS TEXT) AS type,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS ad_account_id,
    name AS ad_account_name,
    CAST(created_at AS TIMESTAMP) AS created_at,
    advertiser,
    currency,
    timezone,
    CAST(_fivetran_synced AS TIMESTAMP) AS _fivetran_synced,
    CAST(updated_at AS TIMESTAMP) AS updated_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS creative_id,
    CAST(NULL AS TEXT) AS key,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST(NULL AS TEXT) AS value,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    creative_id,
    key AS param_key,
    value AS param_value,
    CAST(updated_at AS TIMESTAMP) AS updated_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, creative_id, key ORDER BY updated_at DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS attachment_quartile_1,
    CAST(NULL AS INT) AS attachment_quartile_2,
    CAST(NULL AS INT) AS attachment_quartile_3,
    CAST(NULL AS INT) AS attachment_total_view_time_millis,
    CAST(NULL AS INT) AS attachment_view_completion,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS INT) AS quartile_1,
    CAST(NULL AS INT) AS quartile_2,
    CAST(NULL AS INT) AS quartile_3,
    CAST(NULL AS INT) AS saves,
    CAST(NULL AS INT) AS screen_time_millis,
    CAST(NULL AS INT) AS shares,
    CAST(NULL AS INT) AS spend,
    CAST(NULL AS INT) AS swipes,
    CAST(NULL AS INT) AS video_views,
    CAST(NULL AS INT) AS view_completion,
    CAST(NULL AS INT) AS view_time_millis,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    campaign_id,
    CAST(date AS TIMESTAMP) AS date_hour,
    attachment_quartile_1,
    attachment_quartile_2,
    attachment_quartile_3,
    (
      attachment_total_view_time_millis / 1000000.0
    ) AS attachment_total_view_time,
    attachment_view_completion,
    quartile_1,
    quartile_2,
    quartile_3,
    saves,
    shares,
    (
      screen_time_millis / 1000000.0
    ) AS screen_time,
    video_views,
    view_completion,
    (
      view_time_millis / 1000000.0
    ) AS view_time,
    impressions,
    (
      spend / 1000000.0
    ) AS spend,
    swipes
  FROM fields
)
SELECT
  *
FROM final"
model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS ad_squad_id,
    CAST(NULL AS INT) AS attachment_quartile_1,
    CAST(NULL AS INT) AS attachment_quartile_2,
    CAST(NULL AS INT) AS attachment_quartile_3,
    CAST(NULL AS INT) AS attachment_total_view_time_millis,
    CAST(NULL AS INT) AS attachment_view_completion,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS INT) AS quartile_1,
    CAST(NULL AS INT) AS quartile_2,
    CAST(NULL AS INT) AS quartile_3,
    CAST(NULL AS INT) AS saves,
    CAST(NULL AS INT) AS screen_time_millis,
    CAST(NULL AS INT) AS shares,
    CAST(NULL AS INT) AS spend,
    CAST(NULL AS INT) AS swipes,
    CAST(NULL AS INT) AS video_views,
    CAST(NULL AS INT) AS view_completion,
    CAST(NULL AS INT) AS view_time_millis,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    ad_squad_id,
    CAST(date AS TIMESTAMP) AS date_hour,
    attachment_quartile_1,
    attachment_quartile_2,
    attachment_quartile_3,
    (
      attachment_total_view_time_millis / 1000000.0
    ) AS attachment_total_view_time,
    attachment_view_completion,
    quartile_1,
    quartile_2,
    quartile_3,
    saves,
    shares,
    (
      screen_time_millis / 1000000.0
    ) AS screen_time,
    video_views,
    view_completion,
    (
      view_time_millis / 1000000.0
    ) AS view_time,
    impressions,
    (
      spend / 1000000.0
    ) AS spend,
    swipes
  FROM fields
)
SELECT
  *
FROM final"
model.snapchat_ads_source.stg_snapchat_ads__creative_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__creative_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_account_id,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST(NULL AS TEXT) AS web_view_url,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS creative_id,
    CAST(created_at AS TIMESTAMP) AS created_at,
    ad_account_id,
    name AS creative_name,
    web_view_url AS url,
    CAST(_fivetran_synced AS TIMESTAMP) AS _fivetran_synced,
    CAST(updated_at AS TIMESTAMP) AS updated_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS ad_squad_id,
    name AS ad_squad_name,
    CAST(created_at AS TIMESTAMP) AS created_at,
    campaign_id,
    CAST(_fivetran_synced AS TIMESTAMP) AS _fivetran_synced,
    CAST(updated_at AS TIMESTAMP) AS updated_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.snapchat_ads_source.stg_snapchat_ads__ad_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_squad_id,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS TEXT) AS creative_id,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS ad_id,
    name AS ad_name,
    CAST(created_at AS TIMESTAMP) AS created_at,
    ad_squad_id,
    creative_id,
    CAST(_fivetran_synced AS TIMESTAMP) AS _fivetran_synced,
    CAST(updated_at AS TIMESTAMP) AS updated_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS ad_id,
    CAST(NULL AS DECIMAL(28, 6)) AS attachment_quartile_1,
    CAST(NULL AS DECIMAL(28, 6)) AS attachment_quartile_2,
    CAST(NULL AS DECIMAL(28, 6)) AS attachment_quartile_3,
    CAST(NULL AS DECIMAL(28, 6)) AS attachment_total_view_time_millis,
    CAST(NULL AS DECIMAL(28, 6)) AS attachment_view_completion,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS DECIMAL(28, 6)) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS quartile_1,
    CAST(NULL AS DECIMAL(28, 6)) AS quartile_2,
    CAST(NULL AS DECIMAL(28, 6)) AS quartile_3,
    CAST(NULL AS DECIMAL(28, 6)) AS saves,
    CAST(NULL AS DECIMAL(28, 6)) AS screen_time_millis,
    CAST(NULL AS DECIMAL(28, 6)) AS shares,
    CAST(NULL AS DECIMAL(28, 6)) AS spend,
    CAST(NULL AS DECIMAL(28, 6)) AS swipes,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views,
    CAST(NULL AS DECIMAL(28, 6)) AS view_completion,
    CAST(NULL AS DECIMAL(28, 6)) AS view_time_millis,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    ad_id,
    CAST(date AS TIMESTAMP) AS date_hour,
    attachment_quartile_1,
    attachment_quartile_2,
    attachment_quartile_3,
    (
      attachment_total_view_time_millis / 1000000.0
    ) AS attachment_total_view_time,
    attachment_view_completion,
    quartile_1,
    quartile_2,
    quartile_3,
    saves,
    shares,
    (
      screen_time_millis / 1000000.0
    ) AS screen_time,
    video_views,
    view_completion,
    (
      view_time_millis / 1000000.0
    ) AS view_time,
    impressions,
    (
      spend / 1000000.0
    ) AS spend,
    swipes
  FROM fields
)
SELECT
  *
FROM final"
model.snapchat_ads_source.stg_snapchat_ads__campaign_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_account_id,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS campaign_id,
    ad_account_id,
    CAST(created_at AS TIMESTAMP) AS created_at,
    name AS campaign_name,
    CAST(_fivetran_synced AS TIMESTAMP) AS _fivetran_synced,
    CAST(updated_at AS TIMESTAMP) AS updated_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.snapchat_ads_source.stg_snapchat_ads__ad_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.snapchat_ads_source.stg_snapchat_ads__ad_hourly_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.snapchat_ads_source.stg_snapchat_ads__creative_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.snapchat_ads_source.stg_snapchat_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.snapchat_ads_source.stg_snapchat_ads__ad_account_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.snapchat_ads_source.stg_snapchat_ads__ad_squad_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__ad_analytics_by_creative_tmp
), macro AS (
  SELECT
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS DECIMAL(28, 6)) AS cost_in_local_currency,
    CAST(NULL AS DECIMAL(28, 6)) AS cost_in_usd,
    CAST(NULL AS INT) AS creative_id,
    CAST(NULL AS TIMESTAMP) AS day,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS conversion_value_in_local_currency,
    CAST(NULL AS TEXT) AS external_website_conversions,
    CAST(NULL AS TEXT) AS one_click_leads,
    CAST('' AS TEXT) AS source_relation
  FROM base
), fields AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', day) AS date_day,
    creative_id,
    clicks,
    impressions,
    cost_in_usd AS cost,
    COALESCE(CAST(conversion_value_in_local_currency AS FLOAT), 0) AS conversion_value_in_local_currency,
    COALESCE(CAST(external_website_conversions AS BIGINT), 0) AS external_website_conversions,
    COALESCE(CAST(one_click_leads AS BIGINT), 0) AS one_click_leads
  FROM macro
)
SELECT
  *
FROM fields"
model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp
), macro AS (
  SELECT
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS DECIMAL(28, 6)) AS cost_in_local_currency,
    CAST(NULL AS DECIMAL(28, 6)) AS cost_in_usd,
    CAST(NULL AS TIMESTAMP) AS day,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS conversion_value_in_local_currency,
    CAST(NULL AS TEXT) AS external_website_conversions,
    CAST(NULL AS TEXT) AS one_click_leads,
    CAST('' AS TEXT) AS source_relation
  FROM base
), fields AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', day) AS date_day,
    campaign_id,
    clicks,
    impressions,
    cost_in_usd AS cost,
    COALESCE(CAST(conversion_value_in_local_currency AS FLOAT), 0) AS conversion_value_in_local_currency,
    COALESCE(CAST(external_website_conversions AS BIGINT), 0) AS external_website_conversions,
    COALESCE(CAST(one_click_leads AS BIGINT), 0) AS one_click_leads
  FROM macro
)
SELECT
  *
FROM fields"
model.linkedin_source.stg_linkedin_ads__account_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__account_history_tmp
), macro AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS TEXT) AS currency,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TIMESTAMP) AS last_modified_time,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS type,
    CAST(NULL AS TEXT) AS version_tag,
    CAST('' AS TEXT) AS source_relation
  FROM base
), fields AS (
  SELECT
    source_relation,
    id AS account_id,
    name AS account_name,
    currency,
    CAST(version_tag AS DECIMAL) AS version_tag,
    status,
    type,
    CAST(last_modified_time AS TIMESTAMP) AS last_modified_at,
    CAST(created_time AS TIMESTAMP) AS created_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY last_modified_time DESC) = 1 AS is_latest_version
  FROM macro
)
SELECT
  *
FROM fields"
model.linkedin_source.stg_linkedin_ads__campaign_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_history_tmp
), macro AS (
  SELECT
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS BOOLEAN) AS audience_expansion_enabled,
    CAST(NULL AS INT) AS campaign_group_id,
    CAST(NULL AS TEXT) AS cost_type,
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS TEXT) AS creative_selection,
    CAST(NULL AS FLOAT) AS daily_budget_amount,
    CAST(NULL AS TEXT) AS daily_budget_currency_code,
    CAST(NULL AS TEXT) AS format,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TIMESTAMP) AS last_modified_time,
    CAST(NULL AS TEXT) AS locale_country,
    CAST(NULL AS TEXT) AS locale_language,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS objective_type,
    CAST(NULL AS BOOLEAN) AS offsite_delivery_enabled,
    CAST(NULL AS TEXT) AS optimization_target_type,
    CAST(NULL AS TIMESTAMP) AS run_schedule_end,
    CAST(NULL AS TIMESTAMP) AS run_schedule_start,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS type,
    CAST(NULL AS FLOAT) AS unit_cost_amount,
    CAST(NULL AS TEXT) AS unit_cost_currency_code,
    CAST(NULL AS TEXT) AS version_tag,
    CAST('' AS TEXT) AS source_relation
  FROM base
), fields AS (
  SELECT
    source_relation,
    id AS campaign_id,
    name AS campaign_name,
    CAST(version_tag AS DECIMAL) AS version_tag,
    campaign_group_id,
    account_id,
    status,
    type,
    cost_type,
    creative_selection,
    daily_budget_amount,
    daily_budget_currency_code,
    unit_cost_amount,
    unit_cost_currency_code,
    format,
    locale_country,
    locale_language,
    objective_type,
    optimization_target_type,
    audience_expansion_enabled AS is_audience_expansion_enabled,
    offsite_delivery_enabled AS is_offsite_delivery_enabled,
    CAST(run_schedule_start AS TIMESTAMP) AS run_schedule_start_at,
    CAST(run_schedule_end AS TIMESTAMP) AS run_schedule_end_at,
    CAST(last_modified_time AS TIMESTAMP) AS last_modified_at,
    CAST(created_time AS TIMESTAMP) AS created_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY last_modified_time DESC) = 1 AS is_latest_version
  FROM macro
)
SELECT
  *
FROM fields"
model.linkedin_source.stg_linkedin_ads__creative_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__creative_history_tmp
), macro AS (
  SELECT
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS TEXT) AS click_uri,
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TIMESTAMP) AS last_modified_time,
    CAST(NULL AS TIMESTAMP) AS last_modified_at,
    CAST(NULL AS TEXT) AS intended_status,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), fields AS (
  SELECT
    source_relation,
    id AS creative_id,
    campaign_id,
    COALESCE(status, intended_status) AS status,
    click_uri,
    CAST(COALESCE(last_modified_time, last_modified_at) AS TIMESTAMP) AS last_modified_at,
    CAST(COALESCE(created_time, created_at) AS TIMESTAMP) AS created_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY COALESCE(last_modified_time, last_modified_at) DESC) = 1 AS is_latest_version
  FROM macro
), url_fields AS (
  SELECT
    *,
    SPLIT_PART(click_uri, '?', 1) AS base_url,
    TRY_CAST(SPLIT_PART(
      SPLIT_PART(
        REPLACE(REPLACE(REPLACE(click_uri, 'android-app://', ''), 'http://', ''), 'https://', ''),
        '/',
        1
      ),
      '?',
      1
    ) AS TEXT) AS url_host,
    '/' || TRY_CAST(SPLIT_PART(
      CASE
        WHEN LENGTH(REPLACE(REPLACE(click_uri, 'http://', ''), 'https://', '')) - COALESCE(
          NULLIF(STR_POSITION(REPLACE(REPLACE(click_uri, 'http://', ''), 'https://', ''), '/'), 0),
          STR_POSITION(REPLACE(REPLACE(click_uri, 'http://', ''), 'https://', ''), '?') - 1
        ) = 0
        THEN ''
        ELSE RIGHT(
          REPLACE(REPLACE(click_uri, 'http://', ''), 'https://', ''),
          LENGTH(REPLACE(REPLACE(click_uri, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(STR_POSITION(REPLACE(REPLACE(click_uri, 'http://', ''), 'https://', ''), '/'), 0),
            STR_POSITION(REPLACE(REPLACE(click_uri, 'http://', ''), 'https://', ''), '?') - 1
          )
        )
      END,
      '?',
      1
    ) AS TEXT) AS url_path,
    NULLIF(SPLIT_PART(SPLIT_PART(click_uri, 'utm_source=', 2), '&', 1), '') AS utm_source,
    NULLIF(SPLIT_PART(SPLIT_PART(click_uri, 'utm_medium=', 2), '&', 1), '') AS utm_medium,
    NULLIF(SPLIT_PART(SPLIT_PART(click_uri, 'utm_campaign=', 2), '&', 1), '') AS utm_campaign,
    NULLIF(SPLIT_PART(SPLIT_PART(click_uri, 'utm_content=', 2), '&', 1), '') AS utm_content,
    NULLIF(SPLIT_PART(SPLIT_PART(click_uri, 'utm_term=', 2), '&', 1), '') AS utm_term
  FROM fields
)
SELECT
  *
FROM url_fields"
model.linkedin_source.stg_linkedin_ads__campaign_group_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_group_history_tmp
), macro AS (
  SELECT
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS BOOLEAN) AS backfilled,
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TIMESTAMP) AS last_modified_time,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TIMESTAMP) AS run_schedule_end,
    CAST(NULL AS TIMESTAMP) AS run_schedule_start,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), fields AS (
  SELECT
    source_relation,
    id AS campaign_group_id,
    name AS campaign_group_name,
    account_id,
    status,
    backfilled AS is_backfilled,
    CAST(run_schedule_start AS TIMESTAMP) AS run_schedule_start_at,
    CAST(run_schedule_end AS TIMESTAMP) AS run_schedule_end_at,
    CAST(last_modified_time AS TIMESTAMP) AS last_modified_at,
    CAST(created_time AS TIMESTAMP) AS created_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY last_modified_time DESC) = 1 AS is_latest_version
  FROM macro
)
SELECT
  *
FROM fields"
model.linkedin_source.stg_linkedin_ads__campaign_group_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.linkedin_source.stg_linkedin_ads__ad_analytics_by_campaign_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.linkedin_source.stg_linkedin_ads__account_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.linkedin_source.stg_linkedin_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.linkedin_source.stg_linkedin_ads__creative_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.linkedin_source.stg_linkedin_ads__ad_analytics_by_creative_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__keyword_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS DECIMAL(28, 6)) AS bid_amount,
    CAST(NULL AS TEXT) AS bid_currency,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS match_type,
    CAST(NULL AS TIMESTAMP) AS modification_time,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS text,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    modification_time AS modified_at,
    campaign_id,
    ad_group_id,
    id AS keyword_id,
    bid_amount,
    bid_currency,
    match_type,
    status AS keyword_status,
    text AS keyword_text,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY modification_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__ad_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS INT) AS ad_id,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS local_spend_amount,
    CAST(NULL AS TEXT) AS local_spend_currency,
    CAST(NULL AS INT) AS new_downloads,
    CAST(NULL AS INT) AS redownloads,
    CAST(NULL AS INT) AS taps,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    campaign_id,
    ad_group_id,
    ad_id,
    impressions,
    local_spend_amount AS spend,
    local_spend_currency AS currency,
    new_downloads,
    redownloads,
    taps
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__ad_group_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS local_spend_amount,
    CAST(NULL AS TEXT) AS local_spend_currency,
    CAST(NULL AS INT) AS new_downloads,
    CAST(NULL AS INT) AS redownloads,
    CAST(NULL AS INT) AS taps,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    ad_group_id,
    impressions,
    local_spend_amount AS spend,
    local_spend_currency AS currency,
    new_downloads,
    redownloads,
    taps
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__campaign_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS end_time,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TIMESTAMP) AS modification_time,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS INT) AS organization_id,
    CAST(NULL AS TIMESTAMP) AS start_time,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    modification_time AS modified_at,
    organization_id,
    name AS campaign_name,
    id AS campaign_id,
    status AS campaign_status,
    start_time AS start_at,
    end_time AS end_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY modification_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__search_term_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS _fivetran_id,
    CAST(NULL AS BOOLEAN) AS ad_group_deleted,
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TEXT) AS ad_group_name,
    CAST(NULL AS DECIMAL(28, 6)) AS bid_amount_amount,
    CAST(NULL AS TEXT) AS bid_amount_currency,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS BOOLEAN) AS deleted,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS keyword,
    CAST(NULL AS TEXT) AS keyword_display_status,
    CAST(NULL AS INT) AS keyword_id,
    CAST(NULL AS DECIMAL(28, 6)) AS local_spend_amount,
    CAST(NULL AS TEXT) AS local_spend_currency,
    CAST(NULL AS TEXT) AS match_type,
    CAST(NULL AS INT) AS new_downloads,
    CAST(NULL AS INT) AS redownloads,
    CAST(NULL AS TEXT) AS search_term_source,
    CAST(NULL AS TEXT) AS search_term_text,
    CAST(NULL AS INT) AS taps,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    _fivetran_id,
    campaign_id,
    ad_group_id,
    ad_group_name,
    bid_amount_amount AS bid_amount,
    bid_amount_currency AS bid_currency,
    keyword AS keyword_text,
    keyword_display_status,
    keyword_id,
    local_spend_amount AS spend,
    local_spend_currency AS currency,
    match_type,
    search_term_source,
    search_term_text,
    impressions,
    taps,
    new_downloads,
    redownloads
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__campaign_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS local_spend_amount,
    CAST(NULL AS TEXT) AS local_spend_currency,
    CAST(NULL AS INT) AS new_downloads,
    CAST(NULL AS INT) AS redownloads,
    CAST(NULL AS INT) AS taps,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    id AS campaign_id,
    impressions,
    local_spend_amount AS spend,
    local_spend_currency AS currency,
    new_downloads,
    redownloads,
    taps
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__ad_group_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS end_time,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TIMESTAMP) AS modification_time,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS INT) AS organization_id,
    CAST(NULL AS TIMESTAMP) AS start_time,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    modification_time AS modified_at,
    organization_id,
    campaign_id,
    name AS ad_group_name,
    id AS ad_group_id,
    status AS ad_group_status,
    start_time AS start_at,
    end_time AS end_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY modification_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__organization,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__organization_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS currency,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS payment_model,
    CAST(NULL AS TEXT) AS time_zone,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS organization_id,
    currency,
    payment_model,
    name AS organization_name,
    time_zone
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__ad_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__ad_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS creation_time,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TIMESTAMP) AS modification_time,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS INT) AS org_id,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    creation_time AS created_at,
    modification_time AS modified_at,
    org_id AS organization_id,
    campaign_id,
    ad_group_id,
    name AS ad_name,
    id AS ad_id,
    status AS ad_status,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY modification_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__keyword_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS local_spend_amount,
    CAST(NULL AS TEXT) AS local_spend_currency,
    CAST(NULL AS INT) AS new_downloads,
    CAST(NULL AS INT) AS redownloads,
    CAST(NULL AS INT) AS taps,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    id AS keyword_id,
    impressions,
    local_spend_amount AS spend,
    local_spend_currency AS currency,
    new_downloads,
    redownloads,
    taps
  FROM fields
)
SELECT
  *
FROM final"
model.apple_search_ads_source.stg_apple_search_ads__ad_group_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__ad_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__ad_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__search_term_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__organization_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__campaign_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__ad_group_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__keyword_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.apple_search_ads_source.stg_apple_search_ads__keyword_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__campaign_stats,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__campaign_stats_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS _fivetran_id,
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_network_type,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS INT) AS cost_micros,
    CAST(NULL AS INT) AS customer_id,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS device,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS INT) AS conversions,
    CAST(NULL AS INT) AS conversions_value,
    CAST(NULL AS INT) AS view_through_conversions,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    customer_id AS account_id,
    date AS date_day,
    id AS campaign_id,
    ad_network_type,
    device,
    COALESCE(clicks, 0) AS clicks,
    COALESCE(cost_micros, 0) / 1000000.0 AS spend,
    COALESCE(impressions, 0) AS impressions,
    COALESCE(conversions, 0) AS conversions,
    COALESCE(conversions_value, 0) AS conversions_value,
    COALESCE(view_through_conversions, 0) AS view_through_conversions
  FROM fields
)
SELECT
  *
FROM final"
model.google_ads_source.stg_google_ads__account_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__account_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS BOOLEAN) AS auto_tagging_enabled,
    CAST(NULL AS TEXT) AS currency_code,
    CAST(NULL AS TEXT) AS descriptive_name,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS time_zone,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST(NULL AS BOOLEAN) AS _fivetran_active,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS account_id,
    updated_at,
    currency_code,
    auto_tagging_enabled,
    time_zone,
    descriptive_name AS account_name,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_at DESC) = 1 AS is_most_recent_record
  FROM fields
  WHERE
    COALESCE(_fivetran_active, TRUE)
)
SELECT
  *
FROM final"
model.google_ads_source.stg_google_ads__ad_stats,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_stats_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS ad_group,
    CAST(NULL AS TEXT) AS ad_group_id,
    CAST(NULL AS INT) AS ad_id,
    CAST(NULL AS TEXT) AS ad_network_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS INT) AS cost_micros,
    CAST(NULL AS INT) AS customer_id,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS device,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS keyword_ad_group_criterion,
    CAST(NULL AS INT) AS conversions,
    CAST(NULL AS INT) AS conversions_value,
    CAST(NULL AS INT) AS view_through_conversions,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    customer_id AS account_id,
    date AS date_day,
    COALESCE(CAST(ad_group_id AS TEXT), SPLIT_PART(ad_group, 'adGroups/', 2)) AS ad_group_id,
    keyword_ad_group_criterion,
    ad_network_type,
    device,
    ad_id,
    campaign_id,
    COALESCE(clicks, 0) AS clicks,
    COALESCE(cost_micros, 0) / 1000000.0 AS spend,
    COALESCE(impressions, 0) AS impressions,
    COALESCE(conversions, 0) AS conversions,
    COALESCE(conversions_value, 0) AS conversions_value,
    COALESCE(view_through_conversions, 0) AS view_through_conversions
  FROM fields
)
SELECT
  *
FROM final"
model.google_ads_source.stg_google_ads__campaign_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__campaign_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS advertising_channel_subtype,
    CAST(NULL AS TEXT) AS advertising_channel_type,
    CAST(NULL AS INT) AS customer_id,
    CAST(NULL AS TEXT) AS end_date,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS serving_status,
    CAST(NULL AS TEXT) AS start_date,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS tracking_url_template,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST(NULL AS BOOLEAN) AS _fivetran_active,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS campaign_id,
    updated_at,
    name AS campaign_name,
    customer_id AS account_id,
    advertising_channel_type,
    advertising_channel_subtype,
    start_date,
    end_date,
    serving_status,
    status,
    tracking_url_template,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_at DESC) = 1 AS is_most_recent_record
  FROM fields
  WHERE
    COALESCE(_fivetran_active, TRUE)
)
SELECT
  *
FROM final"
model.google_ads_source.stg_google_ads__account_stats,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__account_stats_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS _fivetran_id,
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_network_type,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS INT) AS cost_micros,
    CAST(NULL AS INT) AS customer_id,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS device,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS INT) AS conversions,
    CAST(NULL AS INT) AS conversions_value,
    CAST(NULL AS INT) AS view_through_conversions,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    customer_id AS account_id,
    date AS date_day,
    ad_network_type,
    device,
    COALESCE(clicks, 0) AS clicks,
    COALESCE(cost_micros, 0) / 1000000.0 AS spend,
    COALESCE(impressions, 0) AS impressions,
    COALESCE(conversions, 0) AS conversions,
    COALESCE(conversions_value, 0) AS conversions_value,
    COALESCE(view_through_conversions, 0) AS view_through_conversions
  FROM fields
)
SELECT
  *
FROM final"
model.google_ads_source.stg_google_ads__ad_group_stats,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_group_stats_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS _fivetran_id,
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_network_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS INT) AS cost_micros,
    CAST(NULL AS INT) AS customer_id,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS device,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS INT) AS conversions,
    CAST(NULL AS INT) AS conversions_value,
    CAST(NULL AS INT) AS view_through_conversions,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    customer_id AS account_id,
    date AS date_day,
    CAST(id AS TEXT) AS ad_group_id,
    campaign_id,
    device,
    ad_network_type,
    COALESCE(clicks, 0) AS clicks,
    COALESCE(cost_micros, 0) / 1000000.0 AS spend,
    COALESCE(impressions, 0) AS impressions,
    COALESCE(conversions, 0) AS conversions,
    COALESCE(conversions_value, 0) AS conversions_value,
    COALESCE(view_through_conversions, 0) AS view_through_conversions
  FROM fields
)
SELECT
  *
FROM final"
model.google_ads_source.stg_google_ads__keyword_stats,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__keyword_stats_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS _fivetran_id,
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS INT) AS ad_group_criterion_criterion_id,
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TEXT) AS ad_network_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS INT) AS cost_micros,
    CAST(NULL AS INT) AS customer_id,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS device,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS INT) AS conversions,
    CAST(NULL AS INT) AS conversions_value,
    CAST(NULL AS INT) AS view_through_conversions,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    _fivetran_id AS keyword_id,
    customer_id AS account_id,
    date AS date_day,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    ad_group_criterion_criterion_id AS criterion_id,
    campaign_id,
    COALESCE(clicks, 0) AS clicks,
    COALESCE(cost_micros, 0) / 1000000.0 AS spend,
    COALESCE(impressions, 0) AS impressions,
    COALESCE(conversions, 0) AS conversions,
    COALESCE(conversions_value, 0) AS conversions_value,
    COALESCE(view_through_conversions, 0) AS view_through_conversions
  FROM fields
)
SELECT
  *
FROM final"
model.google_ads_source.stg_google_ads__ad_group_criterion_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_group_criterion_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS id,
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS INT) AS base_campaign_id,
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST(NULL AS TEXT) AS type,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS keyword_match_type,
    CAST(NULL AS TEXT) AS keyword_text,
    CAST(NULL AS BOOLEAN) AS _fivetran_active,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS criterion_id,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    base_campaign_id,
    updated_at,
    type,
    status,
    keyword_match_type,
    keyword_text,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_at DESC) = 1 AS is_most_recent_record
  FROM fields
  WHERE
    COALESCE(_fivetran_active, TRUE)
)
SELECT
  *
FROM final"
model.google_ads_source.stg_google_ads__ad_group_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_group_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS TEXT) AS campaign_name,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS type,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST(NULL AS BOOLEAN) AS _fivetran_active,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(id AS TEXT) AS ad_group_id,
    updated_at,
    type AS ad_group_type,
    campaign_id,
    campaign_name,
    name AS ad_group_name,
    status AS ad_group_status,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_at DESC) = 1 AS is_most_recent_record
  FROM fields
  WHERE
    COALESCE(_fivetran_active, TRUE)
)
SELECT
  *
FROM final"
model.google_ads_source.stg_google_ads__ad_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TEXT) AS display_url,
    CAST(NULL AS TEXT) AS final_urls,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS type,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST(NULL AS BOOLEAN) AS _fivetran_active,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(ad_group_id AS TEXT) AS ad_group_id,
    id AS ad_id,
    name AS ad_name,
    updated_at,
    type AS ad_type,
    status AS ad_status,
    display_url,
    final_urls AS source_final_urls,
    REPLACE(REPLACE(final_urls, '[', ''), ']', '') AS final_urls,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id, ad_group_id ORDER BY updated_at DESC) = 1 AS is_most_recent_record
  FROM fields
  WHERE
    COALESCE(_fivetran_active, TRUE)
), final_urls AS (
  SELECT
    *,
    SPLIT_PART(final_urls, ',', 1) AS final_url /* Extract the first url within the list of urls provided within the final_urls field */
  FROM final
), url_fields AS (
  SELECT
    *,
    SPLIT_PART(final_url, '?', 1) AS base_url,
    TRY_CAST(SPLIT_PART(
      SPLIT_PART(
        REPLACE(REPLACE(REPLACE(final_url, 'android-app://', ''), 'http://', ''), 'https://', ''),
        '/',
        1
      ),
      '?',
      1
    ) AS TEXT) AS url_host,
    '/' || TRY_CAST(SPLIT_PART(
      CASE
        WHEN LENGTH(REPLACE(REPLACE(final_url, 'http://', ''), 'https://', '')) - COALESCE(
          NULLIF(STR_POSITION(REPLACE(REPLACE(final_url, 'http://', ''), 'https://', ''), '/'), 0),
          STR_POSITION(REPLACE(REPLACE(final_url, 'http://', ''), 'https://', ''), '?') - 1
        ) = 0
        THEN ''
        ELSE RIGHT(
          REPLACE(REPLACE(final_url, 'http://', ''), 'https://', ''),
          LENGTH(REPLACE(REPLACE(final_url, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(STR_POSITION(REPLACE(REPLACE(final_url, 'http://', ''), 'https://', ''), '/'), 0),
            STR_POSITION(REPLACE(REPLACE(final_url, 'http://', ''), 'https://', ''), '?') - 1
          )
        )
      END,
      '?',
      1
    ) AS TEXT) AS url_path,
    NULLIF(SPLIT_PART(SPLIT_PART(final_url, 'utm_source=', 2), '&', 1), '') AS utm_source,
    NULLIF(SPLIT_PART(SPLIT_PART(final_url, 'utm_medium=', 2), '&', 1), '') AS utm_medium,
    NULLIF(SPLIT_PART(SPLIT_PART(final_url, 'utm_campaign=', 2), '&', 1), '') AS utm_campaign,
    NULLIF(SPLIT_PART(SPLIT_PART(final_url, 'utm_content=', 2), '&', 1), '') AS utm_content,
    NULLIF(SPLIT_PART(SPLIT_PART(final_url, 'utm_term=', 2), '&', 1), '') AS utm_term
  FROM final_urls
)
SELECT
  *
FROM url_fields"
model.google_ads_source.stg_google_ads__ad_stats_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__ad_group_criterion_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__ad_group_stats_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__ad_group_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__account_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__campaign_stats_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__ad_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__account_stats_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.google_ads_source.stg_google_ads__keyword_stats_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.facebook_ads_source.stg_facebook_ads__basic_ad,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__basic_ad_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS ad_id,
    CAST(NULL AS TEXT) AS ad_name,
    CAST(NULL AS TEXT) AS adset_name,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS INT) AS inline_link_clicks,
    CAST(NULL AS FLOAT) AS spend,
    CAST(NULL AS INT) AS reach,
    CAST(NULL AS FLOAT) AS frequency,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(ad_id AS BIGINT) AS ad_id,
    ad_name,
    adset_name AS ad_set_name,
    date AS date_day,
    CAST(account_id AS BIGINT) AS account_id,
    impressions,
    COALESCE(inline_link_clicks, 0) AS clicks,
    spend,
    reach,
    frequency
  FROM fields
)
SELECT
  *
FROM final"
model.facebook_ads_source.stg_facebook_ads__account_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__account_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS account_status,
    CAST(NULL AS TEXT) AS business_country_code,
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS TEXT) AS currency,
    CAST(NULL AS TEXT) AS timezone_name,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    CAST(id AS BIGINT) AS account_id,
    _fivetran_synced,
    name AS account_name,
    account_status,
    business_country_code,
    created_time AS created_at,
    currency,
    timezone_name,
    CASE
      WHEN id IS NULL AND _fivetran_synced IS NULL
      THEN ROW_NUMBER() OVER (PARTITION BY source_relation ORDER BY source_relation)
      ELSE ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC)
    END = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.facebook_ads_source.stg_facebook_ads__creative_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__creative_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS _fivetran_id,
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS page_link,
    CAST(NULL AS TEXT) AS template_page_link,
    CAST(NULL AS TEXT) AS url_tags,
    CAST(NULL AS TEXT) AS asset_feed_spec_link_urls,
    CAST(NULL AS TEXT) AS object_story_link_data_child_attachments,
    CAST(NULL AS TEXT) AS object_story_link_data_caption,
    CAST(NULL AS TEXT) AS object_story_link_data_description,
    CAST(NULL AS TEXT) AS object_story_link_data_link,
    CAST(NULL AS TEXT) AS object_story_link_data_message,
    CAST(NULL AS TEXT) AS template_app_link_spec_android,
    CAST(NULL AS TEXT) AS template_app_link_spec_ios,
    CAST(NULL AS TEXT) AS template_app_link_spec_ipad,
    CAST(NULL AS TEXT) AS template_app_link_spec_iphone,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    _fivetran_id,
    _fivetran_synced,
    CAST(id AS BIGINT) AS creative_id,
    CAST(account_id AS BIGINT) AS account_id,
    name AS creative_name,
    page_link,
    template_page_link,
    url_tags,
    asset_feed_spec_link_urls,
    object_story_link_data_child_attachments,
    object_story_link_data_caption,
    object_story_link_data_description,
    object_story_link_data_link,
    object_story_link_data_message,
    template_app_link_spec_ios,
    template_app_link_spec_ipad,
    template_app_link_spec_android,
    template_app_link_spec_iphone,
    CASE
      WHEN id IS NULL AND _fivetran_synced IS NULL
      THEN ROW_NUMBER() OVER (PARTITION BY source_relation ORDER BY source_relation)
      ELSE ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC)
    END = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.facebook_ads_source.stg_facebook_ads__campaign_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__campaign_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS updated_time,
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TIMESTAMP) AS start_time,
    CAST(NULL AS TIMESTAMP) AS stop_time,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS INT) AS daily_budget,
    CAST(NULL AS INT) AS lifetime_budget,
    CAST(NULL AS FLOAT) AS budget_remaining,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    updated_time AS updated_at,
    created_time AS created_at,
    CAST(account_id AS BIGINT) AS account_id,
    CAST(id AS BIGINT) AS campaign_id,
    name AS campaign_name,
    start_time AS start_at,
    stop_time AS end_at,
    status,
    daily_budget,
    lifetime_budget,
    budget_remaining,
    CASE
      WHEN id IS NULL AND updated_time IS NULL
      THEN ROW_NUMBER() OVER (PARTITION BY source_relation ORDER BY source_relation)
      ELSE ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_time DESC)
    END = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.facebook_ads_source.stg_facebook_ads__ad_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__ad_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS updated_time,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS INT) AS ad_set_id,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS creative_id,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    updated_time AS updated_at,
    CAST(id AS BIGINT) AS ad_id,
    name AS ad_name,
    CAST(account_id AS BIGINT) AS account_id,
    CAST(ad_set_id AS BIGINT) AS ad_set_id,
    CAST(campaign_id AS BIGINT) AS campaign_id,
    CAST(creative_id AS BIGINT) AS creative_id,
    CASE
      WHEN id IS NULL AND updated_time IS NULL
      THEN ROW_NUMBER() OVER (PARTITION BY source_relation ORDER BY source_relation)
      ELSE ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_time DESC)
    END = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.facebook_ads_source.stg_facebook_ads__ad_set_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_facebook_ads_source.stg_facebook_ads__ad_set_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS updated_time,
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS start_time,
    CAST(NULL AS TIMESTAMP) AS end_time,
    CAST(NULL AS TEXT) AS bid_strategy,
    CAST(NULL AS INT) AS daily_budget,
    CAST(NULL AS INT) AS budget_remaining,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    updated_time AS updated_at,
    CAST(id AS BIGINT) AS ad_set_id,
    name AS ad_set_name,
    CAST(account_id AS BIGINT) AS account_id,
    CAST(campaign_id AS BIGINT) AS campaign_id,
    start_time AS start_at,
    end_time AS end_at,
    bid_strategy,
    daily_budget,
    budget_remaining,
    status,
    CASE
      WHEN id IS NULL AND updated_time IS NULL
      THEN ROW_NUMBER() OVER (PARTITION BY source_relation ORDER BY source_relation)
      ELSE ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_time DESC)
    END = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.facebook_ads_source.stg_facebook_ads__creative_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.facebook_ads_source.stg_facebook_ads__account_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.facebook_ads_source.stg_facebook_ads__ad_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.snapchat_ads.snapchat_ads__url_report,"WITH __dbt__cte__snapchat_ads__creative_history_prep AS (
  WITH base AS (
    SELECT
      *
    FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__creative_history
    WHERE
      is_most_recent_record = TRUE
  ), url_tags AS (
    SELECT
      *
    FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history
    WHERE
      is_most_recent_record = TRUE
  ), url_tags_pivoted AS (
    SELECT
      source_relation,
      creative_id,
      MIN(CASE WHEN param_key = 'utm_source' THEN param_value END) AS utm_source,
      MIN(CASE WHEN param_key = 'utm_medium' THEN param_value END) AS utm_medium,
      MIN(CASE WHEN param_key = 'utm_campaign' THEN param_value END) AS utm_campaign,
      MIN(CASE WHEN param_key = 'utm_content' THEN param_value END) AS utm_content,
      MIN(CASE WHEN param_key = 'utm_term' THEN param_value END) AS utm_term
    FROM url_tags
    GROUP BY
      1,
      2
  ), fields AS (
    SELECT
      base.source_relation,
      base.creative_id,
      base.ad_account_id,
      base.creative_name,
      base.url,
      SPLIT_PART(base.url, '?', 1) AS base_url,
      TRY_CAST(SPLIT_PART(
        SPLIT_PART(
          REPLACE(REPLACE(REPLACE(base.url, 'android-app://', ''), 'http://', ''), 'https://', ''),
          '/',
          1
        ),
        '?',
        1
      ) AS TEXT) AS url_host,
      '/' || TRY_CAST(SPLIT_PART(
        CASE
          WHEN LENGTH(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '/'), 0),
            STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '?') - 1
          ) = 0
          THEN ''
          ELSE RIGHT(
            REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''),
            LENGTH(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', '')) - COALESCE(
              NULLIF(STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '/'), 0),
              STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '?') - 1
            )
          )
        END,
        '?',
        1
      ) AS TEXT) AS url_path,
      COALESCE(
        url_tags_pivoted.utm_source,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_source=', 2), '&', 1), '')
      ) AS utm_source,
      COALESCE(
        url_tags_pivoted.utm_medium,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_medium=', 2), '&', 1), '')
      ) AS utm_medium,
      COALESCE(
        url_tags_pivoted.utm_campaign,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_campaign=', 2), '&', 1), '')
      ) AS utm_campaign,
      COALESCE(
        url_tags_pivoted.utm_content,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_content=', 2), '&', 1), '')
      ) AS utm_content,
      COALESCE(
        url_tags_pivoted.utm_term,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_term=', 2), '&', 1), '')
      ) AS utm_term
    FROM base
    LEFT JOIN url_tags_pivoted
      ON base.creative_id = url_tags_pivoted.creative_id
      AND base.source_relation = url_tags_pivoted.source_relation
  )
  SELECT
    *
  FROM fields
), ad_hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_hourly_report
), creatives AS (
  SELECT
    *
  FROM __dbt__cte__snapchat_ads__creative_history_prep
), account AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_account_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), ad_squads AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_squad_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), aggregated AS (
  SELECT
    ad_hourly.source_relation,
    CAST(ad_hourly.date_hour AS DATE) AS date_day,
    account.ad_account_id,
    account.ad_account_name,
    ad_hourly.ad_id,
    ads.ad_name,
    ad_squads.ad_squad_id,
    ad_squads.ad_squad_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    account.currency,
    creatives.base_url,
    creatives.url_host,
    creatives.url_path,
    creatives.utm_source,
    creatives.utm_medium,
    creatives.utm_campaign,
    creatives.utm_content,
    creatives.utm_term,
    SUM(ad_hourly.swipes) AS swipes,
    SUM(ad_hourly.impressions) AS impressions,
    ROUND(SUM(ad_hourly.spend), 2) AS spend
  FROM ad_hourly
  LEFT JOIN ads
    ON ad_hourly.ad_id = ads.ad_id AND ad_hourly.source_relation = ads.source_relation
  LEFT JOIN creatives
    ON ads.creative_id = creatives.creative_id
    AND ads.source_relation = creatives.source_relation
  LEFT JOIN ad_squads
    ON ads.ad_squad_id = ad_squads.ad_squad_id
    AND ads.source_relation = ad_squads.source_relation
  LEFT JOIN campaigns
    ON ad_squads.campaign_id = campaigns.campaign_id
    AND ad_squads.source_relation = campaigns.source_relation
  LEFT JOIN account
    ON creatives.ad_account_id = account.ad_account_id
    AND creatives.source_relation = account.source_relation
  /* We only want utm ads to populate this report. Therefore, we filter where url ads are populated. */
  WHERE
    NOT creatives.url IS NULL
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19
)
SELECT
  *
FROM aggregated"
model.snapchat_ads.snapchat_ads__ad_squad_report,"WITH ad_squad_hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_squad_hourly_report
), account AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_account_history
  WHERE
    is_most_recent_record = TRUE
), ad_squads AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_squad_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), aggregated AS (
  SELECT
    ad_squad_hourly.source_relation,
    CAST(ad_squad_hourly.date_hour AS DATE) AS date_day,
    account.ad_account_id,
    account.ad_account_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    ad_squad_hourly.ad_squad_id,
    ad_squads.ad_squad_name,
    account.currency,
    SUM(ad_squad_hourly.swipes) AS swipes,
    SUM(ad_squad_hourly.impressions) AS impressions,
    ROUND(SUM(ad_squad_hourly.spend), 2) AS spend
  FROM ad_squad_hourly
  LEFT JOIN ad_squads
    ON ad_squad_hourly.ad_squad_id = ad_squads.ad_squad_id
    AND ad_squad_hourly.source_relation = ad_squads.source_relation
  LEFT JOIN campaigns
    ON ad_squads.campaign_id = campaigns.campaign_id
    AND ad_squads.source_relation = campaigns.source_relation
  LEFT JOIN account
    ON campaigns.ad_account_id = account.ad_account_id
    AND campaigns.source_relation = account.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9
)
SELECT
  *
FROM aggregated"
model.snapchat_ads.snapchat_ads__account_report,"WITH ad_hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_hourly_report
), account AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_account_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), ad_squads AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_squad_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), aggregated AS (
  SELECT
    ad_hourly.source_relation,
    CAST(ad_hourly.date_hour AS DATE) AS date_day,
    account.ad_account_id,
    account.ad_account_name,
    account.currency,
    SUM(ad_hourly.swipes) AS swipes,
    SUM(ad_hourly.impressions) AS impressions,
    ROUND(SUM(ad_hourly.spend), 2) AS spend
  FROM ad_hourly
  LEFT JOIN ads
    ON ad_hourly.ad_id = ads.ad_id AND ad_hourly.source_relation = ads.source_relation
  LEFT JOIN ad_squads
    ON ads.ad_squad_id = ad_squads.ad_squad_id
    AND ads.source_relation = ad_squads.source_relation
  LEFT JOIN campaigns
    ON ad_squads.campaign_id = campaigns.campaign_id
    AND ad_squads.source_relation = campaigns.source_relation
  LEFT JOIN account
    ON campaigns.ad_account_id = account.ad_account_id
    AND campaigns.source_relation = account.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5
)
SELECT
  *
FROM aggregated"
model.snapchat_ads.snapchat_ads__ad_report,"WITH __dbt__cte__snapchat_ads__creative_history_prep AS (
  WITH base AS (
    SELECT
      *
    FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__creative_history
    WHERE
      is_most_recent_record = TRUE
  ), url_tags AS (
    SELECT
      *
    FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history
    WHERE
      is_most_recent_record = TRUE
  ), url_tags_pivoted AS (
    SELECT
      source_relation,
      creative_id,
      MIN(CASE WHEN param_key = 'utm_source' THEN param_value END) AS utm_source,
      MIN(CASE WHEN param_key = 'utm_medium' THEN param_value END) AS utm_medium,
      MIN(CASE WHEN param_key = 'utm_campaign' THEN param_value END) AS utm_campaign,
      MIN(CASE WHEN param_key = 'utm_content' THEN param_value END) AS utm_content,
      MIN(CASE WHEN param_key = 'utm_term' THEN param_value END) AS utm_term
    FROM url_tags
    GROUP BY
      1,
      2
  ), fields AS (
    SELECT
      base.source_relation,
      base.creative_id,
      base.ad_account_id,
      base.creative_name,
      base.url,
      SPLIT_PART(base.url, '?', 1) AS base_url,
      TRY_CAST(SPLIT_PART(
        SPLIT_PART(
          REPLACE(REPLACE(REPLACE(base.url, 'android-app://', ''), 'http://', ''), 'https://', ''),
          '/',
          1
        ),
        '?',
        1
      ) AS TEXT) AS url_host,
      '/' || TRY_CAST(SPLIT_PART(
        CASE
          WHEN LENGTH(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '/'), 0),
            STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '?') - 1
          ) = 0
          THEN ''
          ELSE RIGHT(
            REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''),
            LENGTH(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', '')) - COALESCE(
              NULLIF(STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '/'), 0),
              STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '?') - 1
            )
          )
        END,
        '?',
        1
      ) AS TEXT) AS url_path,
      COALESCE(
        url_tags_pivoted.utm_source,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_source=', 2), '&', 1), '')
      ) AS utm_source,
      COALESCE(
        url_tags_pivoted.utm_medium,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_medium=', 2), '&', 1), '')
      ) AS utm_medium,
      COALESCE(
        url_tags_pivoted.utm_campaign,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_campaign=', 2), '&', 1), '')
      ) AS utm_campaign,
      COALESCE(
        url_tags_pivoted.utm_content,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_content=', 2), '&', 1), '')
      ) AS utm_content,
      COALESCE(
        url_tags_pivoted.utm_term,
        NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_term=', 2), '&', 1), '')
      ) AS utm_term
    FROM base
    LEFT JOIN url_tags_pivoted
      ON base.creative_id = url_tags_pivoted.creative_id
      AND base.source_relation = url_tags_pivoted.source_relation
  )
  SELECT
    *
  FROM fields
), ad_hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_hourly_report
), creatives AS (
  SELECT
    *
  FROM __dbt__cte__snapchat_ads__creative_history_prep
), account AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_account_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), aggregated AS (
  SELECT
    ad_hourly.source_relation,
    CAST(ad_hourly.date_hour AS DATE) AS date_day,
    account.ad_account_id,
    account.ad_account_name,
    ad_hourly.ad_id,
    ads.ad_name,
    account.currency,
    SUM(ad_hourly.swipes) AS swipes,
    SUM(ad_hourly.impressions) AS impressions,
    ROUND(SUM(ad_hourly.spend), 2) AS spend
  FROM ad_hourly
  LEFT JOIN ads
    ON ad_hourly.ad_id = ads.ad_id AND ad_hourly.source_relation = ads.source_relation
  LEFT JOIN creatives
    ON ads.creative_id = creatives.creative_id
    AND ads.source_relation = creatives.source_relation
  LEFT JOIN account
    ON creatives.ad_account_id = account.ad_account_id
    AND creatives.source_relation = account.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7
)
SELECT
  *
FROM aggregated"
model.snapchat_ads.snapchat_ads__campaign_report,"WITH campaign_hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__campaign_hourly_report
), account AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__ad_account_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), aggregated AS (
  SELECT
    campaign_hourly.source_relation,
    CAST(campaign_hourly.date_hour AS DATE) AS date_day,
    account.ad_account_id,
    account.ad_account_name,
    campaign_hourly.campaign_id,
    campaigns.campaign_name,
    account.currency,
    SUM(campaign_hourly.swipes) AS swipes,
    SUM(campaign_hourly.impressions) AS impressions,
    ROUND(SUM(campaign_hourly.spend), 2) AS spend
  FROM campaign_hourly
  LEFT JOIN campaigns
    ON campaign_hourly.campaign_id = campaigns.campaign_id
    AND campaign_hourly.source_relation = campaigns.source_relation
  LEFT JOIN account
    ON campaigns.ad_account_id = account.ad_account_id
    AND campaigns.source_relation = account.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7
)
SELECT
  *
FROM aggregated"
model.snapchat_ads.snapchat_ads__creative_history_prep,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__creative_history
  WHERE
    is_most_recent_record = TRUE
), url_tags AS (
  SELECT
    *
  FROM TEST.PUBLIC_snapchat_ads_source.stg_snapchat_ads__creative_url_tag_history
  WHERE
    is_most_recent_record = TRUE
), url_tags_pivoted AS (
  SELECT
    source_relation,
    creative_id,
    MIN(CASE WHEN param_key = 'utm_source' THEN param_value END) AS utm_source,
    MIN(CASE WHEN param_key = 'utm_medium' THEN param_value END) AS utm_medium,
    MIN(CASE WHEN param_key = 'utm_campaign' THEN param_value END) AS utm_campaign,
    MIN(CASE WHEN param_key = 'utm_content' THEN param_value END) AS utm_content,
    MIN(CASE WHEN param_key = 'utm_term' THEN param_value END) AS utm_term
  FROM url_tags
  GROUP BY
    1,
    2
), fields AS (
  SELECT
    base.source_relation,
    base.creative_id,
    base.ad_account_id,
    base.creative_name,
    base.url,
    SPLIT_PART(base.url, '?', 1) AS base_url,
    TRY_CAST(SPLIT_PART(
      SPLIT_PART(
        REPLACE(REPLACE(REPLACE(base.url, 'android-app://', ''), 'http://', ''), 'https://', ''),
        '/',
        1
      ),
      '?',
      1
    ) AS TEXT) AS url_host,
    '/' || TRY_CAST(SPLIT_PART(
      CASE
        WHEN LENGTH(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', '')) - COALESCE(
          NULLIF(STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '/'), 0),
          STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '?') - 1
        ) = 0
        THEN ''
        ELSE RIGHT(
          REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''),
          LENGTH(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '/'), 0),
            STR_POSITION(REPLACE(REPLACE(base.url, 'http://', ''), 'https://', ''), '?') - 1
          )
        )
      END,
      '?',
      1
    ) AS TEXT) AS url_path,
    COALESCE(
      url_tags_pivoted.utm_source,
      NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_source=', 2), '&', 1), '')
    ) AS utm_source,
    COALESCE(
      url_tags_pivoted.utm_medium,
      NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_medium=', 2), '&', 1), '')
    ) AS utm_medium,
    COALESCE(
      url_tags_pivoted.utm_campaign,
      NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_campaign=', 2), '&', 1), '')
    ) AS utm_campaign,
    COALESCE(
      url_tags_pivoted.utm_content,
      NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_content=', 2), '&', 1), '')
    ) AS utm_content,
    COALESCE(
      url_tags_pivoted.utm_term,
      NULLIF(SPLIT_PART(SPLIT_PART(base.url, 'utm_term=', 2), '&', 1), '')
    ) AS utm_term
  FROM base
  LEFT JOIN url_tags_pivoted
    ON base.creative_id = url_tags_pivoted.creative_id
    AND base.source_relation = url_tags_pivoted.source_relation
)
SELECT
  *
FROM fields"
model.microsoft_ads_source.stg_microsoft_ads__ad_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS title_part_1,
    CAST(NULL AS TEXT) AS final_url,
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TIMESTAMP) AS modified_time,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS type,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS ad_id,
    title_part_1 AS ad_name,
    final_url,
    ad_group_id,
    modified_time AS modified_at,
    status,
    type,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY modified_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__account_daily_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS TEXT) AS ad_distribution,
    CAST(NULL AS TEXT) AS bid_match_type,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS TEXT) AS currency_code,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS delivered_match_type,
    CAST(NULL AS TEXT) AS device_os,
    CAST(NULL AS TEXT) AS device_type,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS network,
    CAST(NULL AS FLOAT) AS spend,
    CAST(NULL AS TEXT) AS top_vs_other,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    account_id,
    device_os,
    device_type,
    network,
    currency_code,
    ad_distribution,
    bid_match_type,
    delivered_match_type,
    top_vs_other,
    clicks,
    impressions,
    spend
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__search_daily_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS INT) AS ad_id,
    CAST(NULL AS TEXT) AS bid_match_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS delivered_match_type,
    CAST(NULL AS TEXT) AS device_os,
    CAST(NULL AS TEXT) AS device_type,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS INT) AS keyword_id,
    CAST(NULL AS TEXT) AS language,
    CAST(NULL AS TEXT) AS network,
    CAST(NULL AS TEXT) AS search_query,
    CAST(NULL AS FLOAT) AS spend,
    CAST(NULL AS TEXT) AS top_vs_other,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    account_id,
    campaign_id,
    ad_group_id,
    ad_id,
    keyword_id,
    search_query,
    device_os,
    device_type,
    network,
    language,
    bid_match_type,
    delivered_match_type,
    top_vs_other,
    clicks,
    impressions,
    spend
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS TEXT) AS ad_distribution,
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS INT) AS ad_id,
    CAST(NULL AS TEXT) AS bid_match_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS TEXT) AS currency_code,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS delivered_match_type,
    CAST(NULL AS TEXT) AS device_os,
    CAST(NULL AS TEXT) AS device_type,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS INT) AS keyword_id,
    CAST(NULL AS TEXT) AS language,
    CAST(NULL AS TEXT) AS network,
    CAST(NULL AS FLOAT) AS spend,
    CAST(NULL AS TEXT) AS top_vs_other,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    account_id,
    campaign_id,
    ad_group_id,
    ad_id,
    keyword_id,
    currency_code,
    device_os,
    device_type,
    network,
    language,
    ad_distribution,
    bid_match_type,
    delivered_match_type,
    top_vs_other,
    clicks,
    impressions,
    spend
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__keyword_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TIMESTAMP) AS modified_time,
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TEXT) AS match_type,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS keyword_id,
    name AS keyword_name,
    modified_time AS modified_at,
    ad_group_id,
    match_type,
    status,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY modified_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__campaign_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS TIMESTAMP) AS modified_time,
    CAST(NULL AS TEXT) AS type,
    CAST(NULL AS TEXT) AS time_zone,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS campaign_id,
    name AS campaign_name,
    account_id,
    modified_time AS modified_at,
    type,
    time_zone,
    status,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY modified_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS TEXT) AS ad_distribution,
    CAST(NULL AS TEXT) AS bid_match_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS TEXT) AS currency_code,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS delivered_match_type,
    CAST(NULL AS TEXT) AS device_os,
    CAST(NULL AS TEXT) AS device_type,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS network,
    CAST(NULL AS FLOAT) AS spend,
    CAST(NULL AS TEXT) AS top_vs_other,
    CAST(NULL AS TEXT) AS budget_association_status,
    CAST(NULL AS TEXT) AS budget_name,
    CAST(NULL AS TEXT) AS budget_status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    account_id,
    campaign_id,
    currency_code,
    device_os,
    device_type,
    network,
    ad_distribution,
    bid_match_type,
    delivered_match_type,
    top_vs_other,
    budget_association_status,
    budget_name,
    budget_status,
    clicks,
    impressions,
    spend
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS TEXT) AS ad_distribution,
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS INT) AS ad_id,
    CAST(NULL AS TEXT) AS bid_match_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS TEXT) AS currency_code,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS delivered_match_type,
    CAST(NULL AS TEXT) AS device_os,
    CAST(NULL AS TEXT) AS device_type,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS language,
    CAST(NULL AS TEXT) AS network,
    CAST(NULL AS FLOAT) AS spend,
    CAST(NULL AS TEXT) AS top_vs_other,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    account_id,
    campaign_id,
    ad_group_id,
    ad_id,
    currency_code,
    device_os,
    device_type,
    network,
    language,
    ad_distribution,
    bid_match_type,
    delivered_match_type,
    top_vs_other,
    clicks,
    impressions,
    spend
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS account_id,
    CAST(NULL AS TEXT) AS ad_distribution,
    CAST(NULL AS INT) AS ad_group_id,
    CAST(NULL AS TEXT) AS bid_match_type,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS TEXT) AS currency_code,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS TEXT) AS delivered_match_type,
    CAST(NULL AS TEXT) AS device_os,
    CAST(NULL AS TEXT) AS device_type,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS language,
    CAST(NULL AS TEXT) AS network,
    CAST(NULL AS FLOAT) AS spend,
    CAST(NULL AS TEXT) AS top_vs_other,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    date AS date_day,
    account_id,
    campaign_id,
    ad_group_id,
    currency_code,
    device_os,
    device_type,
    network,
    language,
    ad_distribution,
    bid_match_type,
    delivered_match_type,
    top_vs_other,
    clicks,
    impressions,
    spend
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__ad_group_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS modified_time,
    CAST(NULL AS DATE) AS start_date,
    CAST(NULL AS DATE) AS end_date,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS ad_group_id,
    name AS ad_group_name,
    campaign_id,
    modified_time AS modified_at,
    start_date,
    end_date,
    status,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY modified_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__account_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_microsoft_ads_source.stg_microsoft_ads__account_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS INT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TIMESTAMP) AS last_modified_time,
    CAST(NULL AS TEXT) AS time_zone,
    CAST(NULL AS TEXT) AS currency_code,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS account_id,
    name AS account_name,
    last_modified_time AS modified_at,
    time_zone,
    currency_code,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY last_modified_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.microsoft_ads_source.stg_microsoft_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__ad_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__ad_group_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__keyword_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__keyword_daily_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__campaign_daily_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__ad_group_daily_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__ad_daily_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__account_daily_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__account_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.microsoft_ads_source.stg_microsoft_ads__search_daily_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.reddit_ads_source.stg_reddit_ads__campaign_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__campaign_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS region,
    CAST(NULL AS INT) AS spend,
    CAST(NULL AS DATE) AS date_day,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    account_id,
    campaign_id,
    clicks,
    date AS date_day,
    impressions,
    region,
    (
      spend / 1000000
    ) AS spend
  FROM fields
)
SELECT
  *
FROM final"
model.reddit_ads_source.stg_reddit_ads__ad_group,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_group_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS bid_strategy,
    CAST(NULL AS INT) AS bid_value,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS TEXT) AS configured_status,
    CAST(NULL AS TEXT) AS effective_status,
    CAST(NULL AS TIMESTAMP) AS end_time,
    CAST(NULL AS BOOLEAN) AS expand_targeting,
    CAST(NULL AS TEXT) AS goal_type,
    CAST(NULL AS INT) AS goal_value,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS BOOLEAN) AS is_processing,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS optimization_strategy_type,
    CAST(NULL AS TIMESTAMP) AS start_time,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    account_id,
    bid_strategy,
    bid_value,
    campaign_id,
    configured_status,
    effective_status,
    CAST(end_time AS TIMESTAMP) AS end_time_at,
    expand_targeting,
    goal_type,
    goal_value,
    id AS ad_group_id,
    is_processing,
    name AS ad_group_name,
    optimization_strategy_type,
    CAST(start_time AS TIMESTAMP) AS start_time_at
  FROM fields
)
SELECT
  *
FROM final"
model.reddit_ads_source.stg_reddit_ads__campaign,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__campaign_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS configured_status,
    CAST(NULL AS TEXT) AS effective_status,
    CAST(NULL AS TEXT) AS funding_instrument_id,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS BOOLEAN) AS is_processing,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS objective,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    account_id,
    configured_status,
    effective_status,
    funding_instrument_id,
    id AS campaign_id,
    is_processing,
    name AS campaign_name,
    objective
  FROM fields
)
SELECT
  *
FROM final"
model.reddit_ads_source.stg_reddit_ads__ad,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS ad_group_id,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS TEXT) AS click_url,
    CAST(NULL AS TEXT) AS configured_status,
    CAST(NULL AS TEXT) AS effective_status,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS BOOLEAN) AS is_processing,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS post_id,
    CAST(NULL AS TEXT) AS post_url,
    CAST(NULL AS TEXT) AS rejection_reason,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    account_id,
    ad_group_id,
    campaign_id,
    click_url,
    configured_status,
    effective_status,
    id AS ad_id,
    is_processing,
    name AS ad_name,
    post_id,
    post_url,
    rejection_reason
  FROM fields
)
SELECT
  *
FROM final"
model.reddit_ads_source.stg_reddit_ads__ad_group_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_group_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS ad_group_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS region,
    CAST(NULL AS INT) AS spend,
    CAST(NULL AS DATE) AS date_day,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    account_id,
    ad_group_id,
    clicks,
    date AS date_day,
    impressions,
    region,
    (
      spend / 1000000
    ) AS spend
  FROM fields
)
SELECT
  *
FROM final"
model.reddit_ads_source.stg_reddit_ads__account_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__account_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS region,
    CAST(NULL AS INT) AS spend,
    CAST(NULL AS DATE) AS date_day,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    account_id,
    clicks,
    date AS date_day,
    impressions,
    region,
    (
      spend / 1000000
    ) AS spend
  FROM fields
)
SELECT
  *
FROM final"
model.reddit_ads_source.stg_reddit_ads__account,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__account_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS attribution_type,
    CAST(NULL AS TEXT) AS click_attribution_window,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS TEXT) AS currency,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS time_zone_id,
    CAST(NULL AS TEXT) AS view_attribution_window,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    attribution_type,
    click_attribution_window,
    CAST(created_at AS TIMESTAMP) AS created_at,
    currency,
    id AS account_id,
    status,
    time_zone_id,
    view_attribution_window
  FROM fields
)
SELECT
  *
FROM final"
model.reddit_ads_source.stg_reddit_ads__ad_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS ad_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS DATE) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS region,
    CAST(NULL AS INT) AS spend,
    CAST(NULL AS DATE) AS date_day,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    account_id,
    ad_id,
    clicks,
    date AS date_day,
    impressions,
    region,
    (
      spend / 1000000
    ) AS spend
  FROM fields
)
SELECT
  *
FROM final"
model.reddit_ads_source.stg_reddit_ads__ad_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.reddit_ads_source.stg_reddit_ads__ad_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.reddit_ads_source.stg_reddit_ads__campaign_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.reddit_ads_source.stg_reddit_ads__account_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.reddit_ads_source.stg_reddit_ads__account_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.reddit_ads_source.stg_reddit_ads__ad_group_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.reddit_ads_source.stg_reddit_ads__ad_group_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.reddit_ads_source.stg_reddit_ads__campaign_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__campaign_report_hourly_tmp
), fields AS (
  SELECT
    CAST(NULL AS DECIMAL(28, 6)) AS campaign_id,
    CAST(NULL AS FLOAT) AS average_video_play,
    CAST(NULL AS FLOAT) AS average_video_play_per_user,
    CAST(NULL AS DECIMAL(28, 6)) AS clicks,
    CAST(NULL AS DECIMAL(28, 6)) AS comments,
    CAST(NULL AS DECIMAL(28, 6)) AS conversion,
    CAST(NULL AS FLOAT) AS conversion_rate,
    CAST(NULL AS FLOAT) AS cost_per_conversion,
    CAST(NULL AS FLOAT) AS cpc,
    CAST(NULL AS FLOAT) AS cpm,
    CAST(NULL AS FLOAT) AS ctr,
    CAST(NULL AS DECIMAL(28, 6)) AS follows,
    CAST(NULL AS DECIMAL(28, 6)) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS likes,
    CAST(NULL AS DECIMAL(28, 6)) AS profile_visits,
    CAST(NULL AS DECIMAL(28, 6)) AS reach,
    CAST(NULL AS DECIMAL(28, 6)) AS shares,
    CAST(NULL AS DECIMAL(28, 6)) AS spend,
    CAST(NULL AS TIMESTAMP) AS stat_time_hour,
    CAST(NULL AS DECIMAL(28, 6)) AS video_play_actions,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views_p_25,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views_p_50,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views_p_75,
    CAST(NULL AS DECIMAL(28, 6)) AS video_watched_2_s,
    CAST(NULL AS DECIMAL(28, 6)) AS video_watched_6_s,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    campaign_id,
    CAST(stat_time_hour AS TIMESTAMP) AS stat_time_hour,
    cpc,
    cpm,
    ctr,
    impressions,
    clicks,
    spend,
    reach,
    conversion,
    cost_per_conversion,
    conversion_rate,
    likes,
    comments,
    shares,
    profile_visits,
    follows,
    video_play_actions,
    video_watched_2_s,
    video_watched_6_s,
    video_views_p_25,
    video_views_p_50,
    video_views_p_75,
    average_video_play,
    average_video_play_per_user
  FROM fields
)
SELECT
  *
FROM final"
model.tiktok_ads_source.stg_tiktok_ads__ad_group_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_group_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS DECIMAL(28, 6)) AS action_days,
    CAST(NULL AS DECIMAL(28, 6)) AS adgroup_id,
    CAST(NULL AS TEXT) AS adgroup_name,
    CAST(NULL AS DECIMAL(28, 6)) AS advertiser_id,
    CAST(NULL AS TEXT) AS audience_type,
    CAST(NULL AS FLOAT) AS budget,
    CAST(NULL AS DECIMAL(28, 6)) AS campaign_id,
    CAST(NULL AS DECIMAL(28, 6)) AS category,
    CAST(NULL AS TEXT) AS display_name,
    CAST(NULL AS DECIMAL(28, 6)) AS frequency,
    CAST(NULL AS DECIMAL(28, 6)) AS frequency_schedule,
    CAST(NULL AS TEXT) AS gender,
    CAST(NULL AS TEXT) AS landing_page_url,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST(NULL AS TEXT) AS interest_category_v_2,
    CAST(NULL AS TEXT) AS action_categories,
    CAST(NULL AS TEXT) AS age,
    CAST(NULL AS TEXT) AS age_groups,
    CAST(NULL AS TEXT) AS languages,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    adgroup_id AS ad_group_id,
    CAST(updated_at AS TIMESTAMP) AS updated_at,
    advertiser_id,
    campaign_id,
    action_days,
    action_categories,
    adgroup_name AS ad_group_name,
    COALESCE(age_groups, age) AS age_groups,
    audience_type,
    budget,
    category,
    display_name,
    interest_category_v_2 AS interest_category,
    frequency,
    frequency_schedule,
    gender,
    languages,
    landing_page_url,
    ROW_NUMBER() OVER (PARTITION BY source_relation, adgroup_id ORDER BY updated_at DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_report_hourly_tmp
), fields AS (
  SELECT
    CAST(NULL AS DECIMAL(28, 6)) AS ad_id,
    CAST(NULL AS FLOAT) AS average_video_play,
    CAST(NULL AS FLOAT) AS average_video_play_per_user,
    CAST(NULL AS DECIMAL(28, 6)) AS clicks,
    CAST(NULL AS DECIMAL(28, 6)) AS comments,
    CAST(NULL AS DECIMAL(28, 6)) AS conversion,
    CAST(NULL AS FLOAT) AS conversion_rate,
    CAST(NULL AS FLOAT) AS cost_per_conversion,
    CAST(NULL AS FLOAT) AS cpc,
    CAST(NULL AS FLOAT) AS cpm,
    CAST(NULL AS FLOAT) AS ctr,
    CAST(NULL AS DECIMAL(28, 6)) AS follows,
    CAST(NULL AS DECIMAL(28, 6)) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS likes,
    CAST(NULL AS DECIMAL(28, 6)) AS profile_visits,
    CAST(NULL AS DECIMAL(28, 6)) AS reach,
    CAST(NULL AS DECIMAL(28, 6)) AS shares,
    CAST(NULL AS DECIMAL(28, 6)) AS spend,
    CAST(NULL AS TIMESTAMP) AS stat_time_hour,
    CAST(NULL AS DECIMAL(28, 6)) AS video_play_actions,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views_p_25,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views_p_50,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views_p_75,
    CAST(NULL AS DECIMAL(28, 6)) AS video_watched_2_s,
    CAST(NULL AS DECIMAL(28, 6)) AS video_watched_6_s,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    ad_id,
    CAST(stat_time_hour AS TIMESTAMP) AS stat_time_hour,
    cpc,
    cpm,
    ctr,
    impressions,
    clicks,
    spend,
    reach,
    conversion,
    cost_per_conversion,
    conversion_rate,
    likes,
    comments,
    shares,
    profile_visits,
    follows,
    video_play_actions,
    video_watched_2_s,
    video_watched_6_s,
    video_views_p_25,
    video_views_p_50,
    video_views_p_75,
    average_video_play,
    average_video_play_per_user
  FROM fields
)
SELECT
  *
FROM final"
model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_group_report_hourly_tmp
), fields AS (
  SELECT
    CAST(NULL AS DECIMAL(28, 6)) AS adgroup_id,
    CAST(NULL AS FLOAT) AS average_video_play,
    CAST(NULL AS FLOAT) AS average_video_play_per_user,
    CAST(NULL AS DECIMAL(28, 6)) AS clicks,
    CAST(NULL AS DECIMAL(28, 6)) AS comments,
    CAST(NULL AS DECIMAL(28, 6)) AS conversion,
    CAST(NULL AS FLOAT) AS conversion_rate,
    CAST(NULL AS FLOAT) AS cost_per_conversion,
    CAST(NULL AS FLOAT) AS cpc,
    CAST(NULL AS FLOAT) AS cpm,
    CAST(NULL AS FLOAT) AS ctr,
    CAST(NULL AS DECIMAL(28, 6)) AS follows,
    CAST(NULL AS DECIMAL(28, 6)) AS impressions,
    CAST(NULL AS DECIMAL(28, 6)) AS likes,
    CAST(NULL AS DECIMAL(28, 6)) AS profile_visits,
    CAST(NULL AS DECIMAL(28, 6)) AS reach,
    CAST(NULL AS DECIMAL(28, 6)) AS shares,
    CAST(NULL AS DECIMAL(28, 6)) AS spend,
    CAST(NULL AS TIMESTAMP) AS stat_time_hour,
    CAST(NULL AS DECIMAL(28, 6)) AS video_play_actions,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views_p_25,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views_p_50,
    CAST(NULL AS DECIMAL(28, 6)) AS video_views_p_75,
    CAST(NULL AS DECIMAL(28, 6)) AS video_watched_2_s,
    CAST(NULL AS DECIMAL(28, 6)) AS video_watched_6_s,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    adgroup_id AS ad_group_id,
    CAST(stat_time_hour AS TIMESTAMP) AS stat_time_hour,
    cpc,
    cpm,
    ctr,
    impressions,
    clicks,
    spend,
    reach,
    conversion,
    cost_per_conversion,
    conversion_rate,
    likes,
    comments,
    shares,
    profile_visits,
    follows,
    video_play_actions,
    video_watched_2_s,
    video_watched_6_s,
    video_views_p_25,
    video_views_p_50,
    video_views_p_75,
    average_video_play,
    average_video_play_per_user
  FROM fields
)
SELECT
  *
FROM final"
model.tiktok_ads_source.stg_tiktok_ads__advertiser,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__advertiser_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS address,
    CAST(NULL AS FLOAT) AS balance,
    CAST(NULL AS TEXT) AS cellphone_number,
    CAST(NULL AS TEXT) AS company,
    CAST(NULL AS TEXT) AS contacter,
    CAST(NULL AS TEXT) AS country,
    CAST(NULL AS TEXT) AS currency,
    CAST(NULL AS TEXT) AS description,
    CAST(NULL AS TEXT) AS email,
    CAST(NULL AS DECIMAL(28, 6)) AS id,
    CAST(NULL AS TEXT) AS industry,
    CAST(NULL AS TEXT) AS language,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS phone_number,
    CAST(NULL AS TEXT) AS telephone,
    CAST(NULL AS TEXT) AS telephone_number,
    CAST(NULL AS TEXT) AS timezone,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS advertiser_id,
    address,
    balance,
    company,
    contacter,
    country,
    currency,
    description,
    email,
    industry,
    language,
    name AS advertiser_name,
    COALESCE(cellphone_number, phone_number) AS cellphone_number,
    COALESCE(telephone_number, telephone) AS telephone_number,
    timezone
  FROM fields
)
SELECT
  *
FROM final"
model.tiktok_ads_source.stg_tiktok_ads__campaign_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__campaign_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS DECIMAL(28, 6)) AS advertiser_id,
    CAST(NULL AS DECIMAL(28, 6)) AS campaign_id,
    CAST(NULL AS TEXT) AS campaign_name,
    CAST(NULL AS TEXT) AS campaign_type,
    CAST(NULL AS TEXT) AS split_test_variable,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    campaign_id,
    CAST(updated_at AS TIMESTAMP) AS updated_at,
    advertiser_id,
    campaign_name,
    campaign_type,
    split_test_variable,
    ROW_NUMBER() OVER (PARTITION BY source_relation, campaign_id ORDER BY updated_at DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.tiktok_ads_source.stg_tiktok_ads__ad_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS DECIMAL(28, 6)) AS ad_id,
    CAST(NULL AS TEXT) AS ad_name,
    CAST(NULL AS DECIMAL(28, 6)) AS adgroup_id,
    CAST(NULL AS DECIMAL(28, 6)) AS advertiser_id,
    CAST(NULL AS TEXT) AS call_to_action,
    CAST(NULL AS DECIMAL(28, 6)) AS campaign_id,
    CAST(NULL AS TEXT) AS click_tracking_url,
    CAST(NULL AS TEXT) AS impression_tracking_url,
    CAST(NULL AS TEXT) AS landing_page_url,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    ad_id,
    CAST(updated_at AS TIMESTAMP) AS updated_at,
    adgroup_id AS ad_group_id,
    advertiser_id,
    campaign_id,
    ad_name,
    call_to_action,
    click_tracking_url,
    impression_tracking_url,
    SPLIT_PART(landing_page_url, '?', 1) AS base_url,
    TRY_CAST(SPLIT_PART(
      SPLIT_PART(
        REPLACE(
          REPLACE(REPLACE(landing_page_url, 'android-app://', ''), 'http://', ''),
          'https://',
          ''
        ),
        '/',
        1
      ),
      '?',
      1
    ) AS TEXT) AS url_host,
    '/' || TRY_CAST(SPLIT_PART(
      CASE
        WHEN LENGTH(REPLACE(REPLACE(landing_page_url, 'http://', ''), 'https://', '')) - COALESCE(
          NULLIF(
            STR_POSITION(REPLACE(REPLACE(landing_page_url, 'http://', ''), 'https://', ''), '/'),
            0
          ),
          STR_POSITION(REPLACE(REPLACE(landing_page_url, 'http://', ''), 'https://', ''), '?') - 1
        ) = 0
        THEN ''
        ELSE RIGHT(
          REPLACE(REPLACE(landing_page_url, 'http://', ''), 'https://', ''),
          LENGTH(REPLACE(REPLACE(landing_page_url, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(
              STR_POSITION(REPLACE(REPLACE(landing_page_url, 'http://', ''), 'https://', ''), '/'),
              0
            ),
            STR_POSITION(REPLACE(REPLACE(landing_page_url, 'http://', ''), 'https://', ''), '?') - 1
          )
        )
      END,
      '?',
      1
    ) AS TEXT) AS url_path,
    NULLIF(SPLIT_PART(SPLIT_PART(landing_page_url, 'utm_source=', 2), '&', 1), '') AS utm_source,
    NULLIF(SPLIT_PART(SPLIT_PART(landing_page_url, 'utm_medium=', 2), '&', 1), '') AS utm_medium,
    NULLIF(SPLIT_PART(SPLIT_PART(landing_page_url, 'utm_campaign=', 2), '&', 1), '') AS utm_campaign,
    NULLIF(SPLIT_PART(SPLIT_PART(landing_page_url, 'utm_content=', 2), '&', 1), '') AS utm_content,
    NULLIF(SPLIT_PART(SPLIT_PART(landing_page_url, 'utm_term=', 2), '&', 1), '') AS utm_term,
    landing_page_url,
    ROW_NUMBER() OVER (PARTITION BY source_relation, ad_id ORDER BY updated_at DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.tiktok_ads_source.stg_tiktok_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.tiktok_ads_source.stg_tiktok_ads__ad_group_report_hourly_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.tiktok_ads_source.stg_tiktok_ads__campaign_report_hourly_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.tiktok_ads_source.stg_tiktok_ads__ad_report_hourly_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.tiktok_ads_source.stg_tiktok_ads__advertiser_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.tiktok_ads_source.stg_tiktok_ads__ad_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.tiktok_ads_source.stg_tiktok_ads__ad_group_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.tiktok_ads.tiktok_ads__url_report,"WITH hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_report_hourly
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_history
  WHERE
    is_most_recent_record
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_group_history
  WHERE
    is_most_recent_record
), advertiser AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__advertiser
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__campaign_history
  WHERE
    is_most_recent_record
), aggregated AS (
  SELECT
    hourly.source_relation,
    CAST(hourly.stat_time_hour AS DATE) AS date_day,
    ad_groups.advertiser_id,
    advertiser.advertiser_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    ad_groups.ad_group_id,
    ad_groups.ad_group_name,
    hourly.ad_id,
    ads.ad_name,
    ads.base_url,
    ads.url_host,
    ads.url_path,
    ads.utm_source,
    ads.utm_medium,
    ads.utm_campaign,
    ads.utm_content,
    ads.utm_term,
    advertiser.currency,
    ad_groups.category,
    ad_groups.gender,
    ad_groups.audience_type,
    ad_groups.budget,
    SUM(hourly.impressions) AS impressions,
    SUM(hourly.clicks) AS clicks,
    SUM(hourly.spend) AS spend,
    SUM(hourly.reach) AS reach,
    SUM(hourly.conversion) AS conversion,
    SUM(hourly.likes) AS likes,
    SUM(hourly.comments) AS comments,
    SUM(hourly.shares) AS shares,
    SUM(hourly.profile_visits) AS profile_visits,
    SUM(hourly.follows) AS follows,
    SUM(hourly.video_watched_2_s) AS video_watched_2_s,
    SUM(hourly.video_watched_6_s) AS video_watched_6_s,
    SUM(hourly.video_views_p_25) AS video_views_p_25,
    SUM(hourly.video_views_p_50) AS video_views_p_50,
    SUM(hourly.video_views_p_75) AS video_views_p_75,
    SUM(hourly.spend) / NULLIF(SUM(hourly.clicks), 0) AS daily_cpc,
    (
      SUM(hourly.spend) / NULLIF(SUM(hourly.impressions), 0)
    ) * 1000 AS daily_cpm,
    (
      SUM(hourly.clicks) / NULLIF(SUM(hourly.impressions), 0)
    ) * 100 AS daily_ctr
  FROM hourly
  LEFT JOIN ads
    ON hourly.ad_id = ads.ad_id AND hourly.source_relation = ads.source_relation
  LEFT JOIN ad_groups
    ON ads.ad_group_id = ad_groups.ad_group_id
    AND ads.source_relation = ad_groups.source_relation
  LEFT JOIN advertiser
    ON ads.advertiser_id = advertiser.advertiser_id
    AND ads.source_relation = advertiser.source_relation
  LEFT JOIN campaigns
    ON ads.campaign_id = campaigns.campaign_id
    AND ads.source_relation = campaigns.source_relation
  /* We are filtering for only ads where url fields are populated. */
  WHERE
    NOT ads.landing_page_url IS NULL
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23
)
SELECT
  *
FROM aggregated"
model.tiktok_ads.tiktok_ads__campaign_report,"WITH hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__campaign_report_hourly
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__campaign_history
  WHERE
    is_most_recent_record
), advertiser AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__advertiser
), aggregated AS (
  SELECT
    hourly.source_relation,
    CAST(hourly.stat_time_hour AS DATE) AS date_day,
    advertiser.advertiser_id,
    advertiser.advertiser_name,
    hourly.campaign_id,
    campaigns.campaign_name,
    advertiser.currency,
    SUM(hourly.impressions) AS impressions,
    SUM(hourly.clicks) AS clicks,
    SUM(hourly.spend) AS spend,
    SUM(hourly.reach) AS reach,
    SUM(hourly.conversion) AS conversion,
    SUM(hourly.likes) AS likes,
    SUM(hourly.comments) AS comments,
    SUM(hourly.shares) AS shares,
    SUM(hourly.profile_visits) AS profile_visits,
    SUM(hourly.follows) AS follows,
    SUM(hourly.video_watched_2_s) AS video_watched_2_s,
    SUM(hourly.video_watched_6_s) AS video_watched_6_s,
    SUM(hourly.video_views_p_25) AS video_views_p_25,
    SUM(hourly.video_views_p_50) AS video_views_p_50,
    SUM(hourly.video_views_p_75) AS video_views_p_75,
    SUM(hourly.spend) / NULLIF(SUM(hourly.clicks), 0) AS daily_cpc,
    (
      SUM(hourly.spend) / NULLIF(SUM(hourly.impressions), 0)
    ) * 1000 AS daily_cpm,
    (
      SUM(hourly.clicks) / NULLIF(SUM(hourly.impressions), 0)
    ) * 100 AS daily_ctr
  FROM hourly
  LEFT JOIN campaigns
    ON hourly.campaign_id = campaigns.campaign_id
    AND hourly.source_relation = campaigns.source_relation
  LEFT JOIN advertiser
    ON campaigns.advertiser_id = advertiser.advertiser_id
    AND campaigns.source_relation = advertiser.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7
)
SELECT
  *
FROM aggregated"
model.tiktok_ads.tiktok_ads__ad_report,"WITH hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_report_hourly
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_history
  WHERE
    is_most_recent_record
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_group_history
  WHERE
    is_most_recent_record
), advertiser AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__advertiser
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__campaign_history
  WHERE
    is_most_recent_record
), aggregated AS (
  SELECT
    hourly.source_relation,
    CAST(hourly.stat_time_hour AS DATE) AS date_day,
    ad_groups.advertiser_id,
    advertiser.advertiser_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    ad_groups.ad_group_id,
    ad_groups.ad_group_name,
    hourly.ad_id,
    ads.ad_name,
    advertiser.currency,
    ad_groups.category,
    ad_groups.gender,
    ad_groups.audience_type,
    ad_groups.budget,
    SUM(hourly.impressions) AS impressions,
    SUM(hourly.clicks) AS clicks,
    SUM(hourly.spend) AS spend,
    SUM(hourly.reach) AS reach,
    SUM(hourly.conversion) AS conversion,
    SUM(hourly.likes) AS likes,
    SUM(hourly.comments) AS comments,
    SUM(hourly.shares) AS shares,
    SUM(hourly.profile_visits) AS profile_visits,
    SUM(hourly.follows) AS follows,
    SUM(hourly.video_watched_2_s) AS video_watched_2_s,
    SUM(hourly.video_watched_6_s) AS video_watched_6_s,
    SUM(hourly.video_views_p_25) AS video_views_p_25,
    SUM(hourly.video_views_p_50) AS video_views_p_50,
    SUM(hourly.video_views_p_75) AS video_views_p_75,
    SUM(hourly.spend) / NULLIF(SUM(hourly.clicks), 0) AS daily_cpc,
    (
      SUM(hourly.spend) / NULLIF(SUM(hourly.impressions), 0)
    ) * 1000 AS daily_cpm,
    (
      SUM(hourly.clicks) / NULLIF(SUM(hourly.impressions), 0)
    ) * 100 AS daily_ctr
  FROM hourly
  LEFT JOIN ads
    ON hourly.ad_id = ads.ad_id AND hourly.source_relation = ads.source_relation
  LEFT JOIN ad_groups
    ON ads.ad_group_id = ad_groups.ad_group_id
    AND ads.source_relation = ad_groups.source_relation
  LEFT JOIN advertiser
    ON ads.advertiser_id = advertiser.advertiser_id
    AND ads.source_relation = advertiser.source_relation
  LEFT JOIN campaigns
    ON ads.campaign_id = campaigns.campaign_id
    AND ads.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15
)
SELECT
  *
FROM aggregated"
model.tiktok_ads.tiktok_ads__advertiser_report,"WITH hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_report_hourly
), advertiser AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__advertiser
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_history
  WHERE
    is_most_recent_record
), joined AS (
  SELECT
    hourly.source_relation,
    CAST(hourly.stat_time_hour AS DATE) AS date_day,
    ads.advertiser_id,
    advertiser.advertiser_name,
    advertiser.currency,
    SUM(hourly.clicks) AS clicks,
    SUM(hourly.impressions) AS impressions,
    SUM(hourly.spend) AS spend,
    SUM(hourly.reach) AS reach,
    SUM(hourly.conversion) AS conversion,
    SUM(hourly.likes) AS likes,
    SUM(hourly.comments) AS comments,
    SUM(hourly.shares) AS shares,
    SUM(hourly.profile_visits) AS profile_visits,
    SUM(hourly.follows) AS follows,
    SUM(hourly.video_watched_2_s) AS video_watched_2_s,
    SUM(hourly.video_watched_6_s) AS video_watched_6_s,
    SUM(hourly.video_views_p_25) AS video_views_p_25,
    SUM(hourly.video_views_p_50) AS video_views_p_50,
    SUM(hourly.video_views_p_75) AS video_views_p_75,
    SUM(hourly.spend) / NULLIF(SUM(hourly.clicks), 0) AS daily_cpc,
    (
      SUM(hourly.spend) / NULLIF(SUM(hourly.impressions), 0)
    ) * 1000 AS daily_cpm,
    (
      SUM(hourly.clicks) / NULLIF(SUM(hourly.impressions), 0)
    ) * 100 AS daily_ctr
  FROM hourly
  LEFT JOIN ads
    ON hourly.ad_id = ads.ad_id AND hourly.source_relation = ads.source_relation
  LEFT JOIN advertiser
    ON ads.advertiser_id = advertiser.advertiser_id
    AND ads.source_relation = advertiser.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5
)
SELECT
  *
FROM joined"
model.tiktok_ads.tiktok_ads__ad_group_report,"WITH hourly AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_group_report_hourly
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__ad_group_history
  WHERE
    is_most_recent_record
), advertiser AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__advertiser
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_stg_tiktok_ads.stg_tiktok_ads__campaign_history
  WHERE
    is_most_recent_record
), aggregated AS (
  SELECT
    hourly.source_relation,
    CAST(hourly.stat_time_hour AS DATE) AS date_day,
    ad_groups.advertiser_id,
    advertiser.advertiser_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    hourly.ad_group_id,
    ad_groups.ad_group_name,
    advertiser.currency,
    ad_groups.category,
    ad_groups.gender,
    ad_groups.audience_type,
    ad_groups.budget,
    SUM(hourly.impressions) AS impressions,
    SUM(hourly.clicks) AS clicks,
    SUM(hourly.spend) AS spend,
    SUM(hourly.reach) AS reach,
    SUM(hourly.conversion) AS conversion,
    SUM(hourly.likes) AS likes,
    SUM(hourly.comments) AS comments,
    SUM(hourly.shares) AS shares,
    SUM(hourly.profile_visits) AS profile_visits,
    SUM(hourly.follows) AS follows,
    SUM(hourly.video_watched_2_s) AS video_watched_2_s,
    SUM(hourly.video_watched_6_s) AS video_watched_6_s,
    SUM(hourly.video_views_p_25) AS video_views_p_25,
    SUM(hourly.video_views_p_50) AS video_views_p_50,
    SUM(hourly.video_views_p_75) AS video_views_p_75,
    SUM(hourly.spend) / NULLIF(SUM(hourly.clicks), 0) AS daily_cpc,
    (
      SUM(hourly.spend) / NULLIF(SUM(hourly.impressions), 0)
    ) * 1000 AS daily_cpm,
    (
      SUM(hourly.clicks) / NULLIF(SUM(hourly.impressions), 0)
    ) * 100 AS daily_ctr
  FROM hourly
  LEFT JOIN ad_groups
    ON hourly.ad_group_id = ad_groups.ad_group_id
    AND hourly.source_relation = ad_groups.source_relation
  LEFT JOIN advertiser
    ON ad_groups.advertiser_id = advertiser.advertiser_id
    AND ad_groups.source_relation = advertiser.source_relation
  LEFT JOIN campaigns
    ON ad_groups.campaign_id = campaigns.campaign_id
    AND ad_groups.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13
)
SELECT
  *
FROM aggregated"
model.linkedin.linkedin_ads__campaign_group_report,"WITH campaign_group AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_group_history
  WHERE
    is_latest_version
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_history
  WHERE
    is_latest_version
), account AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__account_history
  WHERE
    is_latest_version
), report AS (
  SELECT
    *,
    external_website_conversions + one_click_leads AS total_conversions
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__ad_analytics_by_campaign
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    campaign_group.campaign_group_id,
    campaign_group.campaign_group_name,
    account.account_id,
    account.account_name,
    campaign_group.status,
    account.currency,
    campaign_group.is_backfilled,
    campaign_group.run_schedule_start_at,
    campaign_group.run_schedule_end_at,
    campaign_group.last_modified_at,
    campaign_group.created_at,
    SUM(report.total_conversions) AS total_conversions,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.cost) AS cost,
    SUM(COALESCE(report.conversion_value_in_local_currency, 0)) AS conversion_value_in_local_currency,
    SUM(COALESCE(external_website_conversions, 0)) AS external_website_conversions,
    SUM(COALESCE(one_click_leads, 0)) AS one_click_leads
  FROM report
  LEFT JOIN campaign
    ON report.campaign_id = campaign.campaign_id
    AND report.source_relation = campaign.source_relation
  LEFT JOIN campaign_group
    ON campaign.campaign_group_id = campaign_group.campaign_group_id
    AND campaign.source_relation = campaign_group.source_relation
  LEFT JOIN account
    ON campaign.account_id = account.account_id
    AND campaign.source_relation = account.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13
)
SELECT
  *
FROM final"
model.linkedin.linkedin_ads__creative_report,"WITH creative AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__creative_history
  WHERE
    is_latest_version
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_history
  WHERE
    is_latest_version
), campaign_group AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_group_history
  WHERE
    is_latest_version
), account AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__account_history
  WHERE
    is_latest_version
), report AS (
  SELECT
    *,
    external_website_conversions + one_click_leads AS total_conversions
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__ad_analytics_by_creative
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.creative_id,
    campaign.campaign_id,
    campaign.campaign_name,
    campaign_group.campaign_group_id,
    campaign_group.campaign_group_name,
    account.account_id,
    account.account_name,
    creative.click_uri,
    creative.status AS creative_status,
    campaign.status AS campaign_status,
    campaign_group.status AS campaign_group_status,
    account.currency,
    creative.last_modified_at,
    creative.created_at,
    SUM(report.total_conversions) AS total_conversions,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.cost) AS cost,
    SUM(COALESCE(report.conversion_value_in_local_currency, 0)) AS conversion_value_in_local_currency,
    SUM(COALESCE(external_website_conversions, 0)) AS external_website_conversions,
    SUM(COALESCE(one_click_leads, 0)) AS one_click_leads
  FROM report
  LEFT JOIN creative
    ON report.creative_id = creative.creative_id
    AND report.source_relation = creative.source_relation
  LEFT JOIN campaign
    ON creative.campaign_id = campaign.campaign_id
    AND creative.source_relation = campaign.source_relation
  LEFT JOIN campaign_group
    ON campaign.campaign_group_id = campaign_group.campaign_group_id
    AND campaign.source_relation = campaign_group.source_relation
  LEFT JOIN account
    ON campaign.account_id = account.account_id
    AND campaign.source_relation = account.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16
)
SELECT
  *
FROM final"
model.linkedin.linkedin_ads__url_report,"WITH creative AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__creative_history
  WHERE
    is_latest_version
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_history
  WHERE
    is_latest_version
), campaign_group AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_group_history
  WHERE
    is_latest_version
), account AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__account_history
  WHERE
    is_latest_version
), report AS (
  SELECT
    *,
    external_website_conversions + one_click_leads AS total_conversions
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__ad_analytics_by_creative
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    creative.click_uri,
    creative.base_url,
    creative.url_host,
    creative.url_path,
    creative.utm_source,
    creative.utm_medium,
    creative.utm_campaign,
    creative.utm_content,
    creative.utm_term,
    report.creative_id,
    campaign.campaign_id,
    campaign.campaign_name,
    campaign_group.campaign_group_id,
    campaign_group.campaign_group_name,
    account.account_id,
    account.account_name,
    account.currency,
    SUM(report.total_conversions) AS total_conversions,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.cost) AS cost,
    SUM(COALESCE(report.conversion_value_in_local_currency, 0)) AS conversion_value_in_local_currency,
    SUM(COALESCE(external_website_conversions, 0)) AS external_website_conversions,
    SUM(COALESCE(one_click_leads, 0)) AS one_click_leads
  FROM report
  LEFT JOIN creative
    ON report.creative_id = creative.creative_id
    AND report.source_relation = creative.source_relation
  LEFT JOIN campaign
    ON creative.campaign_id = campaign.campaign_id
    AND creative.source_relation = campaign.source_relation
  LEFT JOIN campaign_group
    ON campaign.campaign_group_id = campaign_group.campaign_group_id
    AND campaign.source_relation = campaign_group.source_relation
  LEFT JOIN account
    ON campaign.account_id = account.account_id
    AND campaign.source_relation = account.source_relation
  WHERE
    NOT creative.click_uri IS NULL
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19
)
SELECT
  *
FROM final"
model.linkedin.linkedin_ads__campaign_report,"WITH campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_history
  WHERE
    is_latest_version
), campaign_group AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_group_history
  WHERE
    is_latest_version
), account AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__account_history
  WHERE
    is_latest_version
), report AS (
  SELECT
    *,
    external_website_conversions + one_click_leads AS total_conversions
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__ad_analytics_by_campaign
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.campaign_id,
    campaign.campaign_name,
    campaign.version_tag,
    campaign_group.campaign_group_id,
    campaign_group.campaign_group_name,
    account.account_id,
    account.account_name,
    campaign.status AS campaign_status,
    campaign_group.status AS campaign_group_status,
    campaign.type,
    campaign.cost_type,
    campaign.creative_selection,
    campaign.daily_budget_amount,
    campaign.daily_budget_currency_code,
    campaign.unit_cost_amount,
    campaign.unit_cost_currency_code,
    account.currency,
    campaign.format,
    campaign.locale_country,
    campaign.locale_language,
    campaign.objective_type,
    campaign.optimization_target_type,
    campaign.is_audience_expansion_enabled,
    campaign.is_offsite_delivery_enabled,
    campaign.run_schedule_start_at,
    campaign.run_schedule_end_at,
    campaign.last_modified_at,
    campaign.created_at,
    SUM(report.total_conversions) AS total_conversions,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.cost) AS cost,
    SUM(COALESCE(report.conversion_value_in_local_currency, 0)) AS conversion_value_in_local_currency,
    SUM(COALESCE(external_website_conversions, 0)) AS external_website_conversions,
    SUM(COALESCE(one_click_leads, 0)) AS one_click_leads
  FROM report
  LEFT JOIN campaign
    ON report.campaign_id = campaign.campaign_id
    AND report.source_relation = campaign.source_relation
  LEFT JOIN campaign_group
    ON campaign.campaign_group_id = campaign_group.campaign_group_id
    AND campaign.source_relation = campaign_group.source_relation
  LEFT JOIN account
    ON campaign.account_id = account.account_id
    AND campaign.source_relation = account.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30
)
SELECT
  *
FROM final"
model.linkedin.linkedin_ads__account_report,"WITH account AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__account_history
  WHERE
    is_latest_version
), campaign AS (
  SELECT
    *
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__campaign_history
  WHERE
    is_latest_version
), report AS (
  SELECT
    *,
    external_website_conversions + one_click_leads AS total_conversions
  FROM TEST.PUBLIC_linkedin_ads_source.stg_linkedin_ads__ad_analytics_by_campaign
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    account.account_id,
    account.account_name,
    account.version_tag,
    account.currency,
    account.status,
    account.type,
    account.last_modified_at,
    account.created_at,
    SUM(report.total_conversions) AS total_conversions,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.cost) AS cost,
    SUM(COALESCE(report.conversion_value_in_local_currency, 0)) AS conversion_value_in_local_currency,
    SUM(COALESCE(external_website_conversions, 0)) AS external_website_conversions,
    SUM(COALESCE(one_click_leads, 0)) AS one_click_leads
  FROM report
  LEFT JOIN campaign
    ON report.campaign_id = campaign.campaign_id
    AND report.source_relation = campaign.source_relation
  LEFT JOIN account
    ON campaign.account_id = account.account_id
    AND campaign.source_relation = account.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10
)
SELECT
  *
FROM final"
model.pinterest.pinterest_ads__pin_promotion_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__pin_promotion_report
), pins AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__pin_promotion_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), advertisers AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__advertiser_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    campaigns.advertiser_id,
    advertisers.advertiser_name,
    report.campaign_id,
    campaigns.campaign_name,
    campaigns.campaign_status,
    report.ad_group_id,
    ad_groups.ad_group_name,
    ad_groups.ad_group_status,
    pins.creative_type,
    report.pin_promotion_id,
    pins.pin_name,
    pins.pin_status,
    pins.destination_url,
    pins.base_url,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN pins
    ON report.pin_promotion_id = pins.pin_promotion_id
    AND report.source_relation = pins.source_relation
  LEFT JOIN ad_groups
    ON report.ad_group_id = ad_groups.ad_group_id
    AND report.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  LEFT JOIN advertisers
    ON campaigns.advertiser_id = advertisers.advertiser_id
    AND campaigns.source_relation = advertisers.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16
)
SELECT
  *
FROM joined"
model.pinterest.pinterest_ads__campaign_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__campaign_report
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), advertisers AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__advertiser_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    advertisers.advertiser_name,
    advertisers.advertiser_id,
    campaigns.campaign_name,
    report.campaign_id,
    campaigns.campaign_status,
    SUM(report.spend) AS spend,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  FROM report
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  LEFT JOIN advertisers
    ON campaigns.advertiser_id = advertisers.advertiser_id
    AND campaigns.source_relation = advertisers.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7
)
SELECT
  *
FROM fields"
model.pinterest.pinterest_ads__ad_group_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__ad_group_report
), advertisers AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__advertiser_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    advertisers.advertiser_name,
    advertisers.advertiser_id,
    campaigns.campaign_name,
    campaigns.campaign_status,
    campaigns.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    ad_groups.created_at,
    ad_groups.start_time,
    ad_groups.end_time,
    ad_groups.ad_group_status,
    SUM(report.spend) AS spend,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  FROM report
  LEFT JOIN ad_groups
    ON report.ad_group_id = ad_groups.ad_group_id
    AND report.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON ad_groups.campaign_id = campaigns.campaign_id
    AND ad_groups.source_relation = campaigns.source_relation
  LEFT JOIN advertisers
    ON campaigns.advertiser_id = advertisers.advertiser_id
    AND campaigns.source_relation = advertisers.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13
)
SELECT
  *
FROM fields"
model.pinterest.pinterest_ads__url_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__pin_promotion_report
), pins AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__pin_promotion_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), advertisers AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__advertiser_history
  WHERE
    is_most_recent_record = TRUE
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    campaigns.advertiser_id,
    advertisers.advertiser_name,
    report.campaign_id,
    campaigns.campaign_name,
    campaigns.campaign_status,
    report.ad_group_id,
    ad_groups.ad_group_name,
    ad_groups.ad_group_status,
    pins.destination_url,
    pins.creative_type,
    report.pin_promotion_id,
    pins.pin_name,
    pins.pin_status,
    pins.base_url,
    pins.url_host,
    pins.url_path,
    pins.utm_source,
    pins.utm_medium,
    pins.utm_campaign,
    pins.utm_content,
    pins.utm_term,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN pins
    ON report.pin_promotion_id = pins.pin_promotion_id
    AND report.source_relation = pins.source_relation
  LEFT JOIN ad_groups
    ON report.ad_group_id = ad_groups.ad_group_id
    AND report.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  LEFT JOIN advertisers
    ON campaigns.advertiser_id = advertisers.advertiser_id
    AND campaigns.source_relation = advertisers.source_relation
  WHERE
    NOT pins.destination_url IS NULL
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23
)
SELECT
  *
FROM joined"
model.pinterest.pinterest_ads__keyword_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__keyword_report
), advertisers AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__advertiser_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), keywords AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__keyword_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    advertisers.advertiser_name,
    advertisers.advertiser_id,
    campaigns.campaign_name,
    campaigns.campaign_id,
    ad_groups.ad_group_name,
    ad_groups.ad_group_id,
    report.keyword_id,
    keywords.match_type,
    keywords.parent_type,
    keywords.keyword_value,
    SUM(report.spend) AS spend,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  FROM report
  LEFT JOIN keywords
    ON report.keyword_id = keywords.keyword_id
    AND report.source_relation = keywords.source_relation
  LEFT JOIN ad_groups
    ON keywords.ad_group_id = ad_groups.ad_group_id
    AND keywords.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON ad_groups.campaign_id = campaigns.campaign_id
    AND ad_groups.source_relation = campaigns.source_relation
  LEFT JOIN advertisers
    ON campaigns.advertiser_id = advertisers.advertiser_id
    AND campaigns.source_relation = advertisers.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
)
SELECT
  *
FROM fields"
model.pinterest.pinterest_ads__advertiser_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__advertiser_report
), advertisers AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__advertiser_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    advertisers.advertiser_name,
    report.advertiser_id,
    advertisers.currency_code,
    advertisers.country,
    SUM(report.spend) AS spend,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  FROM report
  LEFT JOIN advertisers
    ON report.advertiser_id = advertisers.advertiser_id
    AND report.source_relation = advertisers.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6
)
SELECT
  *
FROM fields"
model.twitter_ads_source.stg_twitter_ads__line_item_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__line_item_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS INT) AS billed_charge_local_micro,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS line_item_id,
    CAST(NULL AS TEXT) AS placement,
    CAST(NULL AS INT) AS url_clicks,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', date) AS date_day,
    account_id,
    line_item_id,
    placement,
    clicks,
    impressions,
    billed_charge_local_micro AS spend_micro,
    ROUND(billed_charge_local_micro / 1000000.0, 2) AS spend,
    url_clicks
  FROM fields
)
SELECT
  *
FROM final"
model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS INT) AS billed_charge_local_micro,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS line_item_id,
    CAST(NULL AS TEXT) AS placement,
    CAST(NULL AS TEXT) AS segment,
    CAST(NULL AS INT) AS url_clicks,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', date) AS date_day,
    MD5(
      CAST(COALESCE(CAST(account_id AS TEXT), '_dbt_utils_surrogate_key_null_') || '-' || COALESCE(CAST(line_item_id AS TEXT), '_dbt_utils_surrogate_key_null_') || '-' || COALESCE(CAST(segment AS TEXT), '_dbt_utils_surrogate_key_null_') || '-' || COALESCE(CAST(placement AS TEXT), '_dbt_utils_surrogate_key_null_') AS TEXT)
    ) AS keyword_id,
    account_id,
    line_item_id,
    segment AS keyword,
    placement,
    clicks,
    impressions,
    billed_charge_local_micro AS spend_micro,
    ROUND(billed_charge_local_micro / 1000000.0, 2) AS spend,
    url_clicks
  FROM fields
)
SELECT
  *
FROM final"
model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history,"WITH source AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS approval_status,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS BOOLEAN) AS deleted,
    CAST(NULL AS TEXT) AS entity_status,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS line_item_id,
    CAST(NULL AS TEXT) AS tweet_id,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM source
), final AS (
  SELECT
    source_relation,
    approval_status,
    created_at AS created_timestamp,
    deleted AS is_deleted,
    entity_status,
    id AS promoted_tweet_id,
    line_item_id,
    tweet_id,
    updated_at AS updated_timestamp,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_at DESC) = 1 AS is_latest_version
  FROM fields
)
SELECT
  *
FROM final"
model.twitter_ads_source.stg_twitter_ads__account_history,"WITH source AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__account_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS approval_status,
    CAST(NULL AS TEXT) AS business_id,
    CAST(NULL AS TEXT) AS business_name,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS BOOLEAN) AS deleted,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS industry_type,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS salt,
    CAST(NULL AS TEXT) AS timezone,
    CAST(NULL AS TIMESTAMP) AS timezone_switch_at,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM source
), final AS (
  SELECT
    source_relation,
    approval_status,
    business_id,
    business_name,
    created_at AS created_timestamp,
    deleted AS is_deleted,
    id AS account_id,
    industry_type,
    name,
    salt,
    timezone,
    timezone_switch_at AS timezone_switched_timestamp,
    updated_at AS updated_timestamp,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_at DESC) = 1 AS is_latest_version
  FROM fields
)
SELECT
  *
FROM final"
model.twitter_ads_source.stg_twitter_ads__line_item_history,"WITH source AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__line_item_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS advertiser_domain,
    CAST(NULL AS INT) AS advertiser_user_id,
    CAST(NULL AS BOOLEAN) AS automatically_select_bid,
    CAST(NULL AS INT) AS bid_amount_local_micro,
    CAST(NULL AS TEXT) AS bid_type,
    CAST(NULL AS TEXT) AS bid_unit,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS TEXT) AS charge_by,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS TEXT) AS creative_source,
    CAST(NULL AS TEXT) AS currency,
    CAST(NULL AS BOOLEAN) AS deleted,
    CAST(NULL AS TIMESTAMP) AS end_time,
    CAST(NULL AS TEXT) AS entity_status,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS objective,
    CAST(NULL AS TEXT) AS optimization,
    CAST(NULL AS TEXT) AS primary_web_event_tag,
    CAST(NULL AS TEXT) AS product_type,
    CAST(NULL AS TIMESTAMP) AS start_time,
    CAST(NULL AS INT) AS target_cpa_local_micro,
    CAST(NULL AS INT) AS total_budget_amount_local_micro,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM source
), final AS (
  SELECT
    source_relation,
    advertiser_domain,
    advertiser_user_id,
    automatically_select_bid,
    bid_amount_local_micro,
    bid_type,
    bid_unit,
    campaign_id,
    charge_by,
    created_at AS created_timestamp,
    creative_source,
    currency,
    deleted AS is_deleted,
    end_time AS end_timestamp,
    entity_status,
    id AS line_item_id,
    name,
    objective,
    optimization,
    primary_web_event_tag,
    product_type,
    start_time AS start_timestamp,
    target_cpa_local_micro,
    total_budget_amount_local_micro,
    updated_at AS updated_timestamp,
    ROUND(bid_amount_local_micro / 1000000.0, 2) AS bid_amount,
    ROUND(total_budget_amount_local_micro / 1000000.0, 2) AS total_budget_amount,
    ROUND(target_cpa_local_micro / 1000000.0, 2) AS target_cpa,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_at DESC) = 1 AS is_latest_version
  FROM fields
)
SELECT
  *
FROM final"
model.twitter_ads_source.stg_twitter_ads__campaign_history,"WITH source AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__campaign_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS TIMESTAMP) AS created_at,
    CAST(NULL AS TEXT) AS currency,
    CAST(NULL AS INT) AS daily_budget_amount_local_micro,
    CAST(NULL AS BOOLEAN) AS deleted,
    CAST(NULL AS INT) AS duration_in_days,
    CAST(NULL AS TIMESTAMP) AS end_time,
    CAST(NULL AS TEXT) AS entity_status,
    CAST(NULL AS INT) AS frequency_cap,
    CAST(NULL AS TEXT) AS funding_instrument_id,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS BOOLEAN) AS servable,
    CAST(NULL AS BOOLEAN) AS standard_delivery,
    CAST(NULL AS TIMESTAMP) AS start_time,
    CAST(NULL AS INT) AS total_budget_amount_local_micro,
    CAST(NULL AS TIMESTAMP) AS updated_at,
    CAST('' AS TEXT) AS source_relation
  FROM source
), final AS (
  SELECT
    source_relation,
    account_id,
    created_at AS created_timestamp,
    currency,
    daily_budget_amount_local_micro,
    deleted AS is_deleted,
    duration_in_days,
    end_time AS end_timestamp,
    entity_status,
    frequency_cap,
    funding_instrument_id,
    id AS campaign_id,
    name AS campaign_name,
    servable AS is_servable,
    standard_delivery AS is_standard_delivery,
    start_time AS start_timestamp,
    total_budget_amount_local_micro,
    updated_at AS updated_timestamp,
    ROUND(daily_budget_amount_local_micro / 1000000.0, 2) AS daily_budget_amount,
    ROUND(total_budget_amount_local_micro / 1000000.0, 2) AS total_budget_amount,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_at DESC) = 1 AS is_latest_version
  FROM fields
)
SELECT
  *
FROM final"
model.twitter_ads_source.stg_twitter_ads__tweet,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__tweet_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS TEXT) AS full_text,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS lang,
    CAST(NULL AS TEXT) AS name,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    account_id,
    id AS tweet_id,
    name,
    full_text,
    lang AS language
  FROM fields
)
SELECT
  *
FROM final"
model.twitter_ads_source.stg_twitter_ads__campaign_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__campaign_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS INT) AS billed_charge_local_micro,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS placement,
    CAST(NULL AS INT) AS url_clicks,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', date) AS date_day,
    account_id,
    campaign_id,
    placement,
    clicks,
    impressions,
    billed_charge_local_micro AS spend_micro,
    ROUND(billed_charge_local_micro / 1000000.0, 2) AS spend,
    url_clicks
  FROM fields
)
SELECT
  *
FROM final"
model.twitter_ads_source.stg_twitter_ads__tweet_url,"WITH source AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__tweet_url_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS display_url,
    CAST(NULL AS TEXT) AS expanded_url,
    CAST(NULL AS INT) AS index,
    CAST(NULL AS TEXT) AS indices,
    CAST(NULL AS TEXT) AS tweet_id,
    CAST(NULL AS TEXT) AS url,
    CAST('' AS TEXT) AS source_relation
  FROM source
), final AS (
  SELECT
    source_relation,
    display_url,
    expanded_url,
    index,
    indices,
    tweet_id,
    url,
    SPLIT_PART(expanded_url, '?', 1) AS base_url,
    TRY_CAST(SPLIT_PART(
      SPLIT_PART(
        REPLACE(REPLACE(REPLACE(expanded_url, 'android-app://', ''), 'http://', ''), 'https://', ''),
        '/',
        1
      ),
      '?',
      1
    ) AS TEXT) AS url_host,
    '/' || TRY_CAST(SPLIT_PART(
      CASE
        WHEN LENGTH(REPLACE(REPLACE(expanded_url, 'http://', ''), 'https://', '')) - COALESCE(
          NULLIF(
            STR_POSITION(REPLACE(REPLACE(expanded_url, 'http://', ''), 'https://', ''), '/'),
            0
          ),
          STR_POSITION(REPLACE(REPLACE(expanded_url, 'http://', ''), 'https://', ''), '?') - 1
        ) = 0
        THEN ''
        ELSE RIGHT(
          REPLACE(REPLACE(expanded_url, 'http://', ''), 'https://', ''),
          LENGTH(REPLACE(REPLACE(expanded_url, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(
              STR_POSITION(REPLACE(REPLACE(expanded_url, 'http://', ''), 'https://', ''), '/'),
              0
            ),
            STR_POSITION(REPLACE(REPLACE(expanded_url, 'http://', ''), 'https://', ''), '?') - 1
          )
        )
      END,
      '?',
      1
    ) AS TEXT) AS url_path,
    NULLIF(SPLIT_PART(SPLIT_PART(expanded_url, 'utm_source=', 2), '&', 1), '') AS utm_source,
    NULLIF(SPLIT_PART(SPLIT_PART(expanded_url, 'utm_medium=', 2), '&', 1), '') AS utm_medium,
    NULLIF(SPLIT_PART(SPLIT_PART(expanded_url, 'utm_campaign=', 2), '&', 1), '') AS utm_campaign,
    NULLIF(SPLIT_PART(SPLIT_PART(expanded_url, 'utm_content=', 2), '&', 1), '') AS utm_content,
    NULLIF(SPLIT_PART(SPLIT_PART(expanded_url, 'utm_term=', 2), '&', 1), '') AS utm_term
  FROM fields
)
SELECT
  *
FROM final"
model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report,"WITH source AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp
), renamed AS (
  SELECT
    CAST(NULL AS TEXT) AS account_id,
    CAST(NULL AS INT) AS billed_charge_local_micro,
    CAST(NULL AS INT) AS clicks,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impressions,
    CAST(NULL AS TEXT) AS placement,
    CAST(NULL AS TEXT) AS promoted_tweet_id,
    CAST(NULL AS INT) AS url_clicks,
    CAST('' AS TEXT) AS source_relation
  FROM source
), spend_calc AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', date) AS date_day,
    account_id,
    promoted_tweet_id,
    placement,
    clicks AS clicks,
    impressions AS impressions,
    billed_charge_local_micro AS spend_micro,
    ROUND(billed_charge_local_micro / 1000000.0, 2) AS spend,
    url_clicks AS url_clicks
  FROM renamed
)
SELECT
  *
FROM spend_calc"
model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads_source.stg_twitter_ads__line_item_keywords_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads_source.stg_twitter_ads__tweet_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads_source.stg_twitter_ads__line_item_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads_source.stg_twitter_ads__account_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads_source.stg_twitter_ads__campaign_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.reddit_ads.reddit_ads__url_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_report
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_group
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__campaign
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__account
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    ads.ad_name,
    report.ad_id,
    report.account_id,
    campaigns.campaign_name,
    ads.campaign_id,
    ad_groups.ad_group_name,
    ads.ad_group_id,
    accounts.currency,
    ads.post_id,
    ads.post_url,
    ads.click_url,
    SPLIT_PART(ads.click_url, '?', 1) AS base_url,
    TRY_CAST(SPLIT_PART(
      SPLIT_PART(
        REPLACE(REPLACE(REPLACE(ads.click_url, 'android-app://', ''), 'http://', ''), 'https://', ''),
        '/',
        1
      ),
      '?',
      1
    ) AS TEXT) AS url_host,
    '/' || TRY_CAST(SPLIT_PART(
      CASE
        WHEN LENGTH(REPLACE(REPLACE(ads.click_url, 'http://', ''), 'https://', '')) - COALESCE(
          NULLIF(
            STR_POSITION(REPLACE(REPLACE(ads.click_url, 'http://', ''), 'https://', ''), '/'),
            0
          ),
          STR_POSITION(REPLACE(REPLACE(ads.click_url, 'http://', ''), 'https://', ''), '?') - 1
        ) = 0
        THEN ''
        ELSE RIGHT(
          REPLACE(REPLACE(ads.click_url, 'http://', ''), 'https://', ''),
          LENGTH(REPLACE(REPLACE(ads.click_url, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(
              STR_POSITION(REPLACE(REPLACE(ads.click_url, 'http://', ''), 'https://', ''), '/'),
              0
            ),
            STR_POSITION(REPLACE(REPLACE(ads.click_url, 'http://', ''), 'https://', ''), '?') - 1
          )
        )
      END,
      '?',
      1
    ) AS TEXT) AS url_path,
    NULLIF(SPLIT_PART(SPLIT_PART(ads.click_url, 'utm_source=', 2), '&', 1), '') AS utm_source,
    NULLIF(SPLIT_PART(SPLIT_PART(ads.click_url, 'utm_medium=', 2), '&', 1), '') AS utm_medium,
    NULLIF(SPLIT_PART(SPLIT_PART(ads.click_url, 'utm_term=', 2), '&', 1), '') AS utm_term,
    NULLIF(SPLIT_PART(SPLIT_PART(ads.click_url, 'utm_content=', 2), '&', 1), '') AS utm_content,
    COALESCE(
      NULLIF(SPLIT_PART(SPLIT_PART(ads.click_url, 'utm_campaign=', 2), '&', 1), ''),
      campaigns.campaign_name
    ) AS utm_campaign,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN ad_groups
    ON ads.ad_group_id = ad_groups.ad_group_id
    AND ads.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON ads.campaign_id = campaigns.campaign_id
    AND ads.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20
), filtered AS (
  SELECT
    *
  FROM joined
  WHERE
    NOT click_url IS NULL /* filter for only ads with valid URLs */
)
SELECT
  *
FROM filtered"
model.reddit_ads.reddit_ads__account_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__account_report
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__account
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.account_id,
    accounts.currency,
    accounts.attribution_type,
    accounts.status,
    accounts.time_zone_id,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7
)
SELECT
  *
FROM joined"
model.reddit_ads.reddit_ads__ad_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_report
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_group
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__campaign
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__account
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.ad_id,
    ads.ad_name,
    report.account_id,
    campaigns.campaign_name,
    ads.campaign_id,
    ad_groups.ad_group_name,
    ads.ad_group_id,
    accounts.currency,
    ads.post_id,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN ads
    ON report.ad_id = ads.ad_id AND report.source_relation = ads.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN ad_groups
    ON ads.ad_group_id = ad_groups.ad_group_id
    AND ads.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON ads.campaign_id = campaigns.campaign_id
    AND ads.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11
)
SELECT
  *
FROM joined"
model.reddit_ads.reddit_ads__ad_group_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_group_report
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__ad_group
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__campaign
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__account
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.account_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    campaigns.campaign_name,
    ad_groups.campaign_id,
    accounts.currency,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN ad_groups
    ON report.ad_group_id = ad_groups.ad_group_id
    AND report.source_relation = ad_groups.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN campaigns
    ON ad_groups.campaign_id = campaigns.campaign_id
    AND ad_groups.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8
)
SELECT
  *
FROM joined"
model.reddit_ads.reddit_ads__campaign_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__campaign_report
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__campaign
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_reddit_ads_source.stg_reddit_ads__account
), joined AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.account_id,
    campaigns.campaign_name,
    report.campaign_id,
    accounts.currency,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend
  FROM report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6
)
SELECT
  *
FROM joined"
model.google_ads.google_ads__url_report,"WITH stats AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_stats
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    stats.source_relation,
    stats.date_day,
    accounts.account_name,
    accounts.account_id,
    accounts.currency_code,
    campaigns.campaign_name,
    campaigns.campaign_id,
    ad_groups.ad_group_name,
    stats.ad_group_id,
    stats.ad_id,
    ads.base_url,
    ads.url_host,
    ads.url_path,
    ads.utm_source,
    ads.utm_medium,
    ads.utm_campaign,
    ads.utm_content,
    ads.utm_term,
    SUM(stats.spend) AS spend,
    SUM(stats.clicks) AS clicks,
    SUM(stats.impressions) AS impressions,
    SUM(conversions) AS conversions,
    SUM(conversions_value) AS conversions_value,
    SUM(view_through_conversions) AS view_through_conversions
  FROM stats
  LEFT JOIN ads
    ON stats.ad_id = ads.ad_id
    AND stats.source_relation = ads.source_relation
    AND stats.ad_group_id = ads.ad_group_id
  LEFT JOIN ad_groups
    ON ads.ad_group_id = ad_groups.ad_group_id
    AND ads.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON ad_groups.campaign_id = campaigns.campaign_id
    AND ad_groups.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON campaigns.account_id = accounts.account_id
    AND campaigns.source_relation = accounts.source_relation
  WHERE
    NOT ads.source_final_urls IS NULL
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18
)
SELECT
  *
FROM fields"
model.google_ads.google_ads__ad_report,"WITH stats AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_stats
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    stats.source_relation,
    stats.date_day,
    accounts.account_name,
    accounts.account_id,
    accounts.currency_code,
    campaigns.campaign_name,
    campaigns.campaign_id,
    ad_groups.ad_group_name,
    stats.ad_group_id,
    stats.ad_id,
    ads.ad_name,
    ads.ad_status,
    ads.ad_type,
    ads.display_url,
    ads.source_final_urls,
    SUM(stats.spend) AS spend,
    SUM(stats.clicks) AS clicks,
    SUM(stats.impressions) AS impressions,
    SUM(conversions) AS conversions,
    SUM(conversions_value) AS conversions_value,
    SUM(view_through_conversions) AS view_through_conversions
  FROM stats
  LEFT JOIN ads
    ON stats.ad_id = ads.ad_id
    AND stats.source_relation = ads.source_relation
    AND stats.ad_group_id = ads.ad_group_id
  LEFT JOIN ad_groups
    ON ads.ad_group_id = ad_groups.ad_group_id
    AND ads.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON ad_groups.campaign_id = campaigns.campaign_id
    AND ad_groups.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON campaigns.account_id = accounts.account_id
    AND campaigns.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15
)
SELECT
  *
FROM fields"
model.google_ads.google_ads__keyword_report,"WITH stats AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__keyword_stats
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), criterions AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_group_criterion_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    stats.source_relation,
    stats.date_day,
    accounts.account_name,
    stats.account_id,
    accounts.currency_code,
    campaigns.campaign_name,
    stats.campaign_id,
    ad_groups.ad_group_name,
    stats.ad_group_id,
    stats.criterion_id,
    criterions.type,
    criterions.status,
    criterions.keyword_match_type,
    criterions.keyword_text,
    SUM(stats.spend) AS spend,
    SUM(stats.clicks) AS clicks,
    SUM(stats.impressions) AS impressions,
    SUM(conversions) AS conversions,
    SUM(conversions_value) AS conversions_value,
    SUM(view_through_conversions) AS view_through_conversions
  FROM stats
  LEFT JOIN criterions
    ON stats.criterion_id = criterions.criterion_id
    AND stats.source_relation = criterions.source_relation
  LEFT JOIN ad_groups
    ON stats.ad_group_id = ad_groups.ad_group_id
    AND stats.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON stats.campaign_id = campaigns.campaign_id
    AND stats.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON stats.account_id = accounts.account_id
    AND stats.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14
)
SELECT
  *
FROM fields"
model.google_ads.google_ads__ad_group_report,"WITH stats AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_group_stats
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    stats.source_relation,
    stats.date_day,
    accounts.account_name,
    accounts.account_id,
    accounts.currency_code,
    campaigns.campaign_name,
    campaigns.campaign_id,
    ad_groups.ad_group_name,
    stats.ad_group_id,
    ad_groups.ad_group_status,
    ad_groups.ad_group_type,
    SUM(stats.spend) AS spend,
    SUM(stats.clicks) AS clicks,
    SUM(stats.impressions) AS impressions,
    SUM(conversions) AS conversions,
    SUM(conversions_value) AS conversions_value,
    SUM(view_through_conversions) AS view_through_conversions
  FROM stats
  LEFT JOIN ad_groups
    ON stats.ad_group_id = ad_groups.ad_group_id
    AND stats.source_relation = ad_groups.source_relation
  LEFT JOIN campaigns
    ON ad_groups.campaign_id = campaigns.campaign_id
    AND ad_groups.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON campaigns.account_id = accounts.account_id
    AND campaigns.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11
)
SELECT
  *
FROM fields"
model.google_ads.google_ads__campaign_report,"WITH stats AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__campaign_stats
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    stats.source_relation,
    stats.date_day,
    accounts.account_name,
    accounts.account_id,
    accounts.currency_code,
    campaigns.campaign_name,
    stats.campaign_id,
    campaigns.advertising_channel_type,
    campaigns.advertising_channel_subtype,
    campaigns.status,
    SUM(stats.spend) AS spend,
    SUM(stats.clicks) AS clicks,
    SUM(stats.impressions) AS impressions,
    SUM(conversions) AS conversions,
    SUM(conversions_value) AS conversions_value,
    SUM(view_through_conversions) AS view_through_conversions
  FROM stats
  LEFT JOIN campaigns
    ON stats.campaign_id = campaigns.campaign_id
    AND stats.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON campaigns.account_id = accounts.account_id
    AND campaigns.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10
)
SELECT
  *
FROM fields"
model.google_ads.google_ads__account_report,"WITH stats AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__account_stats
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_google_ads_source.stg_google_ads__account_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    stats.source_relation,
    stats.date_day,
    accounts.account_name,
    stats.account_id,
    accounts.currency_code,
    accounts.auto_tagging_enabled,
    accounts.time_zone,
    SUM(stats.spend) AS spend,
    SUM(stats.clicks) AS clicks,
    SUM(stats.impressions) AS impressions,
    SUM(stats.conversions) AS conversions,
    SUM(stats.conversions_value) AS conversions_value,
    SUM(stats.view_through_conversions) AS view_through_conversions
  FROM stats
  LEFT JOIN accounts
    ON stats.account_id = accounts.account_id
    AND stats.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7
)
SELECT
  *
FROM fields"
model.amazon_ads.amazon_ads__portfolio_report,"WITH report AS (
  SELECT
    *
  /* use campaign report since portfolio report not provided */
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_level_report
), account_info AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__profile
  WHERE
    _fivetran_deleted = FALSE
), portfolios AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__portfolio_history
  WHERE
    is_most_recent_record = TRUE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    account_info.account_name,
    account_info.account_id,
    account_info.country_code,
    account_info.profile_id,
    portfolios.portfolio_name,
    portfolios.portfolio_id,
    portfolios.budget_amount,
    portfolios.budget_currency_code,
    portfolios.budget_start_date,
    portfolios.budget_end_date,
    portfolios.budget_policy,
    portfolios.in_budget,
    portfolios.serving_status,
    portfolios.state,
    SUM(report.cost) AS cost,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  /* use campaign report since portfolio report not provided */
  FROM portfolios
  LEFT JOIN campaigns
    ON campaigns.portfolio_id = portfolios.portfolio_id
    AND campaigns.source_relation = portfolios.source_relation
  LEFT JOIN account_info
    ON account_info.profile_id = campaigns.profile_id
    AND account_info.source_relation = campaigns.source_relation
  LEFT JOIN report
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16
)
SELECT
  *
FROM fields"
model.amazon_ads.amazon_ads__keyword_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__targeting_keyword_report
), account_info AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__profile
  WHERE
    _fivetran_deleted = FALSE
), portfolios AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads.int_amazon_ads__portfolio_history
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), keywords AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__keyword_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    account_info.account_name,
    account_info.account_id,
    account_info.country_code,
    account_info.profile_id,
    portfolios.portfolio_name,
    portfolios.portfolio_id,
    campaigns.campaign_name,
    report.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    report.keyword_id,
    keywords.keyword_text,
    keywords.serving_status,
    keywords.state,
    report.keyword_bid,
    report.keyword_type,
    report.match_type,
    SUM(report.cost) AS cost,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  FROM report
  LEFT JOIN keywords
    ON keywords.keyword_id = report.keyword_id
    AND keywords.source_relation = report.source_relation
  LEFT JOIN ad_groups
    ON ad_groups.ad_group_id = report.ad_group_id
    AND ad_groups.source_relation = report.source_relation
  LEFT JOIN campaigns
    ON campaigns.campaign_id = report.campaign_id
    AND campaigns.source_relation = report.source_relation
  LEFT JOIN portfolios
    ON portfolios.portfolio_id = campaigns.portfolio_id
    AND portfolios.source_relation = campaigns.source_relation
  LEFT JOIN account_info
    ON account_info.profile_id = campaigns.profile_id
    AND account_info.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19
)
SELECT
  *
FROM fields"
model.amazon_ads.amazon_ads__ad_group_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__ad_group_level_report
), account_info AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__profile
  WHERE
    _fivetran_deleted = FALSE
), portfolios AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads.int_amazon_ads__portfolio_history
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    account_info.account_name,
    account_info.account_id,
    account_info.country_code,
    account_info.profile_id,
    portfolios.portfolio_name,
    portfolios.portfolio_id,
    campaigns.campaign_name,
    campaigns.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    ad_groups.serving_status,
    ad_groups.state,
    ad_groups.default_bid,
    report.campaign_bidding_strategy,
    SUM(report.cost) AS cost,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  FROM report
  LEFT JOIN ad_groups
    ON ad_groups.ad_group_id = report.ad_group_id
    AND ad_groups.source_relation = report.source_relation
  LEFT JOIN campaigns
    ON campaigns.campaign_id = ad_groups.campaign_id
    AND campaigns.source_relation = ad_groups.source_relation
  LEFT JOIN portfolios
    ON portfolios.portfolio_id = campaigns.portfolio_id
    AND portfolios.source_relation = campaigns.source_relation
  LEFT JOIN account_info
    ON account_info.profile_id = campaigns.profile_id
    AND account_info.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16
)
SELECT
  *
FROM fields"
model.amazon_ads.amazon_ads__account_report,"WITH report AS (
  SELECT
    *
  /* use campaign report since account report not provided */
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_level_report
), account_info AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__profile
  WHERE
    _fivetran_deleted = FALSE
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    account_info.account_name,
    account_info.account_id,
    account_info.country_code,
    account_info.profile_id,
    SUM(report.cost) AS cost,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  /* use campaign report since portfolio report not provided */
  FROM report
  LEFT JOIN campaigns
    ON campaigns.campaign_id = report.campaign_id
    AND campaigns.source_relation = report.source_relation
  LEFT JOIN account_info
    ON account_info.profile_id = campaigns.profile_id
    AND account_info.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6
)
SELECT
  *
FROM fields"
model.amazon_ads.amazon_ads__search_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__search_term_ad_keyword_report
), account_info AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__profile
  WHERE
    _fivetran_deleted = FALSE
), portfolios AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads.int_amazon_ads__portfolio_history
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), keywords AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__keyword_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    account_info.account_name,
    account_info.account_id,
    account_info.country_code,
    account_info.profile_id,
    portfolios.portfolio_name,
    portfolios.portfolio_id,
    campaigns.campaign_name,
    report.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    report.keyword_id,
    keywords.keyword_text,
    keywords.match_type,
    keywords.serving_status,
    keywords.state,
    report.search_term,
    report.targeting,
    SUM(report.cost) AS cost,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  FROM report
  LEFT JOIN keywords
    ON keywords.keyword_id = report.keyword_id
    AND keywords.source_relation = report.source_relation
  LEFT JOIN ad_groups
    ON ad_groups.ad_group_id = report.ad_group_id
    AND ad_groups.source_relation = report.source_relation
  LEFT JOIN campaigns
    ON campaigns.campaign_id = report.campaign_id
    AND campaigns.source_relation = report.source_relation
  LEFT JOIN portfolios
    ON portfolios.portfolio_id = campaigns.portfolio_id
    AND portfolios.source_relation = campaigns.source_relation
  LEFT JOIN account_info
    ON account_info.profile_id = campaigns.profile_id
    AND account_info.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19
)
SELECT
  *
FROM fields"
model.amazon_ads.amazon_ads__campaign_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_level_report
), account_info AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__profile
  WHERE
    _fivetran_deleted = FALSE
), portfolios AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads.int_amazon_ads__portfolio_history
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    account_info.account_name,
    account_info.account_id,
    account_info.country_code,
    account_info.profile_id,
    portfolios.portfolio_name,
    portfolios.portfolio_id,
    campaigns.campaign_name,
    report.campaign_id,
    report.campaign_bidding_strategy,
    report.campaign_budget_amount,
    report.campaign_budget_currency_code,
    report.campaign_budget_type,
    SUM(report.cost) AS cost,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  FROM report
  LEFT JOIN campaigns
    ON campaigns.campaign_id = report.campaign_id
    AND campaigns.source_relation = report.source_relation
  LEFT JOIN portfolios
    ON portfolios.portfolio_id = campaigns.portfolio_id
    AND portfolios.source_relation = campaigns.source_relation
  LEFT JOIN account_info
    ON account_info.profile_id = campaigns.profile_id
    AND account_info.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14
)
SELECT
  *
FROM fields"
model.amazon_ads.amazon_ads__ad_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__advertised_product_report
), account_info AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__profile
  WHERE
    _fivetran_deleted = FALSE
), portfolios AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads.int_amazon_ads__portfolio_history
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__campaign_history
  WHERE
    is_most_recent_record = TRUE
), ad_groups AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__ad_group_history
  WHERE
    is_most_recent_record = TRUE
), ads AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__product_ad_history
  WHERE
    is_most_recent_record = TRUE
), fields AS (
  SELECT
    report.source_relation,
    report.date_day,
    account_info.account_name,
    account_info.account_id,
    account_info.country_code,
    account_info.profile_id,
    portfolios.portfolio_name,
    portfolios.portfolio_id,
    campaigns.campaign_name,
    report.campaign_id,
    ad_groups.ad_group_name,
    report.ad_group_id,
    report.ad_id,
    ads.serving_status,
    ads.state,
    report.advertised_asin,
    report.advertised_sku,
    report.campaign_budget_amount,
    report.campaign_budget_currency_code,
    report.campaign_budget_type,
    SUM(report.cost) AS cost,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions
  FROM report
  LEFT JOIN ads
    ON ads.ad_id = report.ad_id AND ads.source_relation = report.source_relation
  LEFT JOIN ad_groups
    ON ad_groups.ad_group_id = report.ad_group_id
    AND ad_groups.source_relation = report.source_relation
  LEFT JOIN campaigns
    ON campaigns.campaign_id = report.campaign_id
    AND campaigns.source_relation = report.source_relation
  LEFT JOIN portfolios
    ON portfolios.portfolio_id = campaigns.portfolio_id
    AND portfolios.source_relation = campaigns.source_relation
  LEFT JOIN account_info
    ON account_info.profile_id = campaigns.profile_id
    AND account_info.source_relation = campaigns.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20
)
SELECT
  *
FROM fields"
model.amazon_ads.int_amazon_ads__portfolio_history,"WITH portfolios AS (
  SELECT
    *
  FROM TEST.PUBLIC_amazon_ads_source.stg_amazon_ads__portfolio_history
  WHERE
    is_most_recent_record = TRUE
)
SELECT
  *
FROM portfolios"
model.pinterest_source.stg_pinterest_ads__keyword_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__keyword_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TEXT) AS _fivetran_id,
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_group_id,
    CAST(NULL AS TEXT) AS advertiser_id,
    CAST(NULL AS BOOLEAN) AS archived,
    CAST(NULL AS INT) AS bid,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS match_type,
    CAST(NULL AS TEXT) AS parent_type,
    CAST(NULL AS TEXT) AS value,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS keyword_id,
    value AS keyword_value,
    _fivetran_id,
    _fivetran_synced,
    ad_group_id,
    advertiser_id,
    archived,
    bid,
    campaign_id,
    match_type,
    parent_type,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__advertiser_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__advertiser_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS country,
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS TEXT) AS currency,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS owner_user_id,
    CAST(NULL AS TEXT) AS owner_username,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS advertiser_permissions,
    CAST(NULL AS TIMESTAMP) AS updated_time,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS advertiser_id,
    name AS advertiser_name,
    country,
    created_time AS created_at,
    currency AS currency_code,
    owner_user_id,
    owner_username,
    advertiser_permissions, /* permissions was renamed in macro */
    updated_time AS updated_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY updated_time DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__pin_promotion_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_group_id,
    CAST(NULL AS TEXT) AS ad_account_id,
    CAST(NULL AS TEXT) AS android_deep_link,
    CAST(NULL AS TEXT) AS click_tracking_url,
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS TEXT) AS creative_type,
    CAST(NULL AS TEXT) AS destination_url,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS ios_deep_link,
    CAST(NULL AS BOOLEAN) AS is_pin_deleted,
    CAST(NULL AS BOOLEAN) AS is_removable,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS pin_id,
    CAST(NULL AS TEXT) AS review_status,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TIMESTAMP) AS updated_time,
    CAST(NULL AS TEXT) AS view_tracking_url,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS pin_promotion_id,
    ad_account_id AS advertiser_id,
    ad_group_id,
    created_time AS created_at,
    destination_url,
    SPLIT_PART(destination_url, '?', 1) AS base_url,
    TRY_CAST(SPLIT_PART(
      SPLIT_PART(
        REPLACE(
          REPLACE(REPLACE(destination_url, 'android-app://', ''), 'http://', ''),
          'https://',
          ''
        ),
        '/',
        1
      ),
      '?',
      1
    ) AS TEXT) AS url_host,
    '/' || TRY_CAST(SPLIT_PART(
      CASE
        WHEN LENGTH(REPLACE(REPLACE(destination_url, 'http://', ''), 'https://', '')) - COALESCE(
          NULLIF(
            STR_POSITION(REPLACE(REPLACE(destination_url, 'http://', ''), 'https://', ''), '/'),
            0
          ),
          STR_POSITION(REPLACE(REPLACE(destination_url, 'http://', ''), 'https://', ''), '?') - 1
        ) = 0
        THEN ''
        ELSE RIGHT(
          REPLACE(REPLACE(destination_url, 'http://', ''), 'https://', ''),
          LENGTH(REPLACE(REPLACE(destination_url, 'http://', ''), 'https://', '')) - COALESCE(
            NULLIF(
              STR_POSITION(REPLACE(REPLACE(destination_url, 'http://', ''), 'https://', ''), '/'),
              0
            ),
            STR_POSITION(REPLACE(REPLACE(destination_url, 'http://', ''), 'https://', ''), '?') - 1
          )
        )
      END,
      '?',
      1
    ) AS TEXT) AS url_path,
    NULLIF(SPLIT_PART(SPLIT_PART(destination_url, 'utm_source=', 2), '&', 1), '') AS utm_source,
    NULLIF(SPLIT_PART(SPLIT_PART(destination_url, 'utm_medium=', 2), '&', 1), '') AS utm_medium,
    NULLIF(SPLIT_PART(SPLIT_PART(destination_url, 'utm_campaign=', 2), '&', 1), '') AS utm_campaign,
    NULLIF(SPLIT_PART(SPLIT_PART(destination_url, 'utm_content=', 2), '&', 1), '') AS utm_content,
    NULLIF(SPLIT_PART(SPLIT_PART(destination_url, 'utm_term=', 2), '&', 1), '') AS utm_term,
    name AS pin_name,
    pin_id,
    status AS pin_status,
    creative_type,
    _fivetran_synced,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__campaign_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__campaign_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS INT) AS default_ad_group_budget_in_micro_currency,
    CAST(NULL AS BOOLEAN) AS is_automated_campaign,
    CAST(NULL AS BOOLEAN) AS is_campaign_budget_optimization,
    CAST(NULL AS BOOLEAN) AS is_flexible_daily_budgets,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS advertiser_id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS campaign_id,
    name AS campaign_name,
    advertiser_id,
    default_ad_group_budget_in_micro_currency,
    is_automated_campaign,
    is_campaign_budget_optimization,
    is_flexible_daily_budgets,
    status AS campaign_status,
    _fivetran_synced,
    created_time AS created_at,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__ad_group_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__ad_group_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_group_id,
    CAST(NULL AS TEXT) AS ad_group_name,
    CAST(NULL AS TEXT) AS ad_group_status,
    CAST(NULL AS TEXT) AS advertiser_id,
    CAST(NULL AS INT) AS campaign_id,
    CAST(NULL AS INT) AS clickthrough_1,
    CAST(NULL AS INT) AS clickthrough_2,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impression_1,
    CAST(NULL AS INT) AS impression_2,
    CAST(NULL AS INT) AS spend_in_micro_dollar,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', date) AS date_day,
    ad_group_id,
    ad_group_name,
    ad_group_status,
    campaign_id,
    advertiser_id,
    COALESCE(impression_1, 0) + COALESCE(impression_2, 0) AS impressions,
    COALESCE(clickthrough_1, 0) + COALESCE(clickthrough_2, 0) AS clicks,
    spend_in_micro_dollar / 1000000.0 AS spend
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__ad_group_history,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__ad_group_history_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS TIMESTAMP) AS created_time,
    CAST(NULL AS TIMESTAMP) AS end_time,
    CAST(NULL AS TEXT) AS id,
    CAST(NULL AS TEXT) AS ad_account_id,
    CAST(NULL AS TEXT) AS name,
    CAST(NULL AS TEXT) AS pacing_delivery_type,
    CAST(NULL AS TEXT) AS placement_group,
    CAST(NULL AS TIMESTAMP) AS start_time,
    CAST(NULL AS TEXT) AS status,
    CAST(NULL AS TEXT) AS summary_status,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    id AS ad_group_id,
    name AS ad_group_name,
    status AS ad_group_status,
    ad_account_id AS advertiser_id,
    _fivetran_synced,
    campaign_id,
    created_time AS created_at,
    end_time,
    pacing_delivery_type,
    placement_group,
    start_time,
    summary_status,
    ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__campaign_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__campaign_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS advertiser_id,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS TEXT) AS campaign_name,
    CAST(NULL AS TEXT) AS campaign_status,
    CAST(NULL AS INT) AS clickthrough_1,
    CAST(NULL AS INT) AS clickthrough_2,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impression_1,
    CAST(NULL AS INT) AS impression_2,
    CAST(NULL AS INT) AS spend_in_micro_dollar,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', date) AS date_day,
    campaign_id,
    campaign_name,
    campaign_status,
    advertiser_id,
    COALESCE(impression_1, 0) + COALESCE(impression_2, 0) AS impressions,
    COALESCE(clickthrough_1, 0) + COALESCE(clickthrough_2, 0) AS clicks,
    spend_in_micro_dollar / 1000000.0 AS spend
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__advertiser_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__advertiser_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS advertiser_id,
    CAST(NULL AS INT) AS clickthrough_1,
    CAST(NULL AS INT) AS clickthrough_2,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impression_1,
    CAST(NULL AS INT) AS impression_2,
    CAST(NULL AS INT) AS spend_in_micro_dollar,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', date) AS date_day,
    advertiser_id,
    COALESCE(impression_1, 0) + COALESCE(impression_2, 0) AS impressions,
    COALESCE(clickthrough_1, 0) + COALESCE(clickthrough_2, 0) AS clicks,
    spend_in_micro_dollar / 1000000.0 AS spend
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__keyword_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__keyword_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_group_id,
    CAST(NULL AS TEXT) AS ad_group_name,
    CAST(NULL AS TEXT) AS ad_group_status,
    CAST(NULL AS TEXT) AS advertiser_id,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS INT) AS clickthrough_1,
    CAST(NULL AS INT) AS clickthrough_2,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS INT) AS impression_1,
    CAST(NULL AS INT) AS impression_2,
    CAST(NULL AS TEXT) AS keyword_id,
    CAST(NULL AS TEXT) AS pin_promotion_id,
    CAST(NULL AS INT) AS spend_in_micro_dollar,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', date) AS date_day,
    keyword_id,
    pin_promotion_id,
    ad_group_id,
    ad_group_name,
    ad_group_status,
    campaign_id,
    advertiser_id,
    COALESCE(impression_1, 0) + COALESCE(impression_2, 0) AS impressions,
    COALESCE(clickthrough_1, 0) + COALESCE(clickthrough_2, 0) AS clicks,
    spend_in_micro_dollar / 1000000.0 AS spend
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__pin_promotion_report,"WITH base AS (
  SELECT
    *
  FROM TEST.PUBLIC_pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp
), fields AS (
  SELECT
    CAST(NULL AS TIMESTAMP) AS _fivetran_synced,
    CAST(NULL AS TEXT) AS ad_group_id,
    CAST(NULL AS TEXT) AS advertiser_id,
    CAST(NULL AS TEXT) AS campaign_id,
    CAST(NULL AS DECIMAL(28, 6)) AS clickthrough_1,
    CAST(NULL AS DECIMAL(28, 6)) AS clickthrough_2,
    CAST(NULL AS TIMESTAMP) AS date,
    CAST(NULL AS DECIMAL(28, 6)) AS impression_1,
    CAST(NULL AS DECIMAL(28, 6)) AS impression_2,
    CAST(NULL AS TEXT) AS pin_promotion_id,
    CAST(NULL AS DECIMAL(28, 6)) AS spend_in_micro_dollar,
    CAST('' AS TEXT) AS source_relation
  FROM base
), final AS (
  SELECT
    source_relation,
    DATE_TRUNC('DAY', date) AS date_day,
    pin_promotion_id,
    ad_group_id,
    campaign_id,
    advertiser_id,
    COALESCE(impression_1, 0) + COALESCE(impression_2, 0) AS impressions,
    COALESCE(clickthrough_1, 0) + COALESCE(clickthrough_2, 0) AS clicks,
    spend_in_micro_dollar / 1000000.0 AS spend
  FROM fields
)
SELECT
  *
FROM final"
model.pinterest_source.stg_pinterest_ads__campaign_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.pinterest_source.stg_pinterest_ads__ad_group_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.pinterest_source.stg_pinterest_ads__keyword_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.pinterest_source.stg_pinterest_ads__advertiser_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.pinterest_source.stg_pinterest_ads__campaign_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.pinterest_source.stg_pinterest_ads__keyword_report_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp,"SELECT
  CAST(NULL AS TEXT) AS _dbt_source_relation
LIMIT 0"
model.twitter_ads.twitter_ads__campaign_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__campaign_report
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__campaign_history
  WHERE
    is_latest_version
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__account_history
  WHERE
    is_latest_version
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.placement,
    report.account_id,
    accounts.name AS account_name,
    report.campaign_id,
    campaigns.campaign_name,
    campaigns.is_deleted,
    campaigns.entity_status AS campaign_status,
    campaigns.currency,
    campaigns.is_servable,
    campaigns.is_standard_delivery,
    campaigns.frequency_cap,
    campaigns.start_timestamp,
    campaigns.end_timestamp,
    campaigns.created_timestamp,
    campaigns.updated_timestamp,
    campaigns.funding_instrument_id,
    campaigns.daily_budget_amount,
    campaigns.total_budget_amount,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend,
    SUM(report.spend_micro) AS spend_micro,
    SUM(report.url_clicks) AS url_clicks
  FROM report
  LEFT JOIN campaigns
    ON report.campaign_id = campaigns.campaign_id
    AND report.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20
)
SELECT
  *
FROM final"
model.twitter_ads.twitter_ads__account_report,"WITH accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__account_history
  WHERE
    is_latest_version
), promoted_tweet_report AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__promoted_tweet_report
), rollup_report AS (
  SELECT
    source_relation,
    date_day,
    account_id,
    placement,
    SUM(clicks) AS clicks,
    SUM(impressions) AS impressions,
    SUM(spend) AS spend,
    SUM(spend_micro) AS spend_micro,
    SUM(url_clicks) AS url_clicks
  FROM promoted_tweet_report
  GROUP BY
    1,
    2,
    3,
    4
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.placement,
    report.account_id,
    accounts.name AS account_name,
    accounts.is_deleted,
    accounts.timezone,
    accounts.industry_type,
    accounts.approval_status,
    accounts.business_name,
    accounts.business_id,
    accounts.created_timestamp,
    accounts.updated_timestamp,
    accounts.timezone_switched_timestamp,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend,
    SUM(report.spend_micro) AS spend_micro,
    SUM(report.url_clicks) AS url_clicks
  FROM rollup_report AS report
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14
)
SELECT
  *
FROM final"
model.twitter_ads.twitter_ads__url_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__promoted_tweet_report
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__campaign_history
  WHERE
    is_latest_version
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__account_history
  WHERE
    is_latest_version
), line_items AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__line_item_history
  WHERE
    is_latest_version
), promoted_tweets AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__promoted_tweet_history
  WHERE
    is_latest_version
), tweets AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__tweet
), tweet_url AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__tweet_url
  WHERE
    index = 0
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.placement,
    accounts.account_id,
    accounts.name AS account_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    line_items.line_item_id,
    line_items.name AS line_item_name,
    promoted_tweets.promoted_tweet_id,
    promoted_tweets.tweet_id,
    tweets.name AS tweet_name,
    tweets.full_text AS tweet_full_text,
    tweet_url.base_url,
    tweet_url.url_host,
    tweet_url.url_path,
    tweet_url.utm_source,
    tweet_url.utm_medium,
    tweet_url.utm_campaign,
    tweet_url.utm_content,
    tweet_url.utm_term,
    tweet_url.expanded_url,
    tweet_url.display_url,
    campaigns.currency,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend,
    SUM(report.spend_micro) AS spend_micro,
    SUM(report.url_clicks) AS url_clicks
  FROM report
  LEFT JOIN promoted_tweets
    ON report.promoted_tweet_id = promoted_tweets.promoted_tweet_id
    AND report.source_relation = promoted_tweets.source_relation
  LEFT JOIN tweet_url
    ON promoted_tweets.tweet_id = tweet_url.tweet_id
    AND promoted_tweets.source_relation = tweet_url.source_relation
  LEFT JOIN tweets
    ON promoted_tweets.tweet_id = tweets.tweet_id
    AND promoted_tweets.source_relation = tweets.source_relation
  LEFT JOIN line_items
    ON promoted_tweets.line_item_id = line_items.line_item_id
    AND promoted_tweets.source_relation = line_items.source_relation
  LEFT JOIN campaigns
    ON line_items.campaign_id = campaigns.campaign_id
    AND line_items.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  WHERE
    NOT tweet_url.expanded_url IS NULL
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24
)
SELECT
  *
FROM final"
model.twitter_ads.twitter_ads__keyword_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__line_item_keywords_report
), line_items AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__line_item_history
  WHERE
    is_latest_version
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__campaign_history
  WHERE
    is_latest_version
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__account_history
  WHERE
    is_latest_version
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.placement,
    report.account_id,
    accounts.name AS account_name,
    line_items.campaign_id,
    campaigns.campaign_name,
    report.line_item_id,
    line_items.name AS line_item_name,
    report.keyword_id,
    report.keyword,
    line_items.currency,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend,
    SUM(report.spend_micro) AS spend_micro,
    SUM(report.url_clicks) AS url_clicks
  FROM report
  LEFT JOIN line_items
    ON report.line_item_id = line_items.line_item_id
    AND report.source_relation = line_items.source_relation
  LEFT JOIN campaigns
    ON line_items.campaign_id = campaigns.campaign_id
    AND line_items.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
)
SELECT
  *
FROM final"
model.twitter_ads.twitter_ads__promoted_tweet_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__promoted_tweet_report
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__campaign_history
  WHERE
    is_latest_version
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__account_history
  WHERE
    is_latest_version
), line_items AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__line_item_history
  WHERE
    is_latest_version
), promoted_tweets AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__promoted_tweet_history
  WHERE
    is_latest_version
), tweets AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__tweet
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.placement,
    accounts.account_id,
    accounts.name AS account_name,
    campaigns.campaign_id,
    campaigns.campaign_name,
    line_items.line_item_id,
    line_items.name AS line_item_name,
    promoted_tweets.promoted_tweet_id,
    promoted_tweets.tweet_id,
    tweets.name AS tweet_name,
    tweets.full_text,
    promoted_tweets.is_deleted,
    promoted_tweets.entity_status AS promoted_tweet_status,
    campaigns.entity_status AS campaign_status,
    line_items.entity_status AS line_item_status,
    tweets.language,
    campaigns.currency,
    promoted_tweets.approval_status,
    promoted_tweets.created_timestamp,
    promoted_tweets.updated_timestamp,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend,
    SUM(report.spend_micro) AS spend_micro,
    SUM(report.url_clicks) AS url_clicks
  FROM report
  LEFT JOIN promoted_tweets
    ON report.promoted_tweet_id = promoted_tweets.promoted_tweet_id
    AND report.source_relation = promoted_tweets.source_relation
  LEFT JOIN tweets
    ON promoted_tweets.tweet_id = tweets.tweet_id
    AND promoted_tweets.source_relation = tweets.source_relation
  LEFT JOIN line_items
    ON promoted_tweets.line_item_id = line_items.line_item_id
    AND promoted_tweets.source_relation = line_items.source_relation
  LEFT JOIN campaigns
    ON line_items.campaign_id = campaigns.campaign_id
    AND line_items.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22
)
SELECT
  *
FROM final"
model.twitter_ads.twitter_ads__line_item_report,"WITH report AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__line_item_report
), line_items AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__line_item_history
  WHERE
    is_latest_version
), campaigns AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__campaign_history
  WHERE
    is_latest_version
), accounts AS (
  SELECT
    *
  FROM TEST.PUBLIC_twitter_ads_source.stg_twitter_ads__account_history
  WHERE
    is_latest_version
), final AS (
  SELECT
    report.source_relation,
    report.date_day,
    report.placement,
    report.account_id,
    accounts.name AS account_name,
    line_items.campaign_id,
    campaigns.campaign_name,
    report.line_item_id,
    line_items.name AS line_item_name,
    line_items.is_deleted,
    line_items.entity_status AS line_item_status,
    campaigns.entity_status AS campaign_status,
    line_items.currency,
    line_items.advertiser_domain,
    line_items.advertiser_user_id,
    line_items.bid_type,
    line_items.bid_unit,
    line_items.charge_by,
    line_items.objective,
    line_items.optimization,
    line_items.product_type,
    line_items.primary_web_event_tag,
    line_items.creative_source,
    line_items.start_timestamp,
    line_items.end_timestamp,
    line_items.created_timestamp,
    line_items.updated_timestamp,
    line_items.target_cpa,
    line_items.total_budget_amount,
    line_items.bid_amount,
    SUM(report.clicks) AS clicks,
    SUM(report.impressions) AS impressions,
    SUM(report.spend) AS spend,
    SUM(report.spend_micro) AS spend_micro,
    SUM(report.url_clicks) AS url_clicks
  FROM report
  LEFT JOIN line_items
    ON report.line_item_id = line_items.line_item_id
    AND report.source_relation = line_items.source_relation
  LEFT JOIN campaigns
    ON line_items.campaign_id = campaigns.campaign_id
    AND line_items.source_relation = campaigns.source_relation
  LEFT JOIN accounts
    ON report.account_id = accounts.account_id
    AND report.source_relation = accounts.source_relation
  GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30
)
SELECT
  *
FROM final"
