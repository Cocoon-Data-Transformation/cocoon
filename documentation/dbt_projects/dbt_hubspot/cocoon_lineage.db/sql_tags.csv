model_name,summary,tags
model.hubspot.hubspot__contacts,"This SQL query integrates contact data from Hubspot with engagement metrics and email send information. It combines data from multiple tables, including contacts, engagements, and email sends. The query calculates various engagement counts (notes, tasks, calls, meetings, emails) for each contact and joins this information with the main contact data. It also checks if a contact's email address has been used in email sends.","[""Integration"",""Aggregation"",""Featurization""]"
model.hubspot.hubspot__contact_lists,"This SQL query integrates data from two tables: contact lists and email metrics. It performs a left join between these tables using the contact_list_id as the joining key. The query selects all columns from the contact_lists table, effectively combining contact list information with associated email metrics data, if available.","[""Integration""]"
model.hubspot.hubspot__email_campaigns,"This SQL query joins data from two tables: 'stg_hubspot__email_campaign' and 'hubspot__email_sends'. It first creates CTEs for each table, then groups the email sends data by email_campaign_id. Finally, it performs a left join between the campaigns data and the grouped email metrics data, returning all columns from the campaigns table along with the matching email campaign IDs from the email metrics.","[""Integration"",""Aggregation""]"
model.hubspot.hubspot__email_sends,"This SQL query aggregates and integrates various email event metrics from Hubspot data. It starts by creating CTEs for email event aggregates and status changes. Then it joins these aggregates with the main email sent events, adding various metrics like bounces, clicks, opens, etc. Finally, it calculates boolean flags for each metric and adds unsubscribe information. The result is a comprehensive view of email campaign performance with detailed metrics and flags for each email send.","[""Aggregation"",""Integration"",""Featurization""]"
model.hubspot.int_hubspot__contact_merge_adjust,"This query adjusts contact data by removing merged contacts. It first extracts merged contact IDs from a string field, then removes any contacts that appear in this merged list. The result is a dataset of unique, non-merged contacts.","[""Filtering"",""Cleaning"",""Deduplication""]"
model.hubspot.int_hubspot__engagement_metrics__by_contact,"This SQL query calculates engagement metrics for each contact in HubSpot. It joins engagement data with contact data, then counts the number of different types of engagements (notes, tasks, calls, meetings, emails, incoming emails, and forwarded emails) for each contact. The result is a summary of engagement activities per contact.","[""Integration"",""Aggregation"",""Featurization""]"
model.hubspot.int_hubspot__email_event_aggregates,"This SQL query aggregates email event data from the stg_hubspot__email_event table. It counts various types of email events (opens, sends, deliveries, drops, clicks, forwards, deferrals, bounces, spam reports, and prints) for each unique email_send_id. The query filters out rows where sent_by_event_id is null and groups the results by this ID.","[""Filtering"",""Aggregation""]"
model.hubspot.int_hubspot__email_aggregate_status_change,This SQL query aggregates data from the hubspot__email_event_status_change table. It counts the number of unsubscribes for each combination of email_campaign_id and email_send_id. The query filters out rows where email_send_id is null and only considers 'UNSUBSCRIBED' status for counting.,"[""Filtering"",""Aggregation""]"
model.hubspot.int_hubspot__email_metrics__by_contact_list,"This SQL query joins email send data with contact list member data to generate email metrics grouped by contact list. It filters out records where the contact_list_id is null, effectively focusing on email sends associated with specific contact lists.","[""Integration"",""Filtering"",""Aggregation""]"
model.hubspot.hubspot__email_event_status_change,"This SQL query integrates data from three different tables: email event status changes, email events, and contacts. It joins these tables to create a comprehensive view of email status change events, including associated campaign information, recipient details, and contact status. The query uses LEFT JOINs to ensure all status change events are included, even if matching records are not found in the other tables. It also adds a flag to indicate whether the contact has been deleted.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__email_event_bounce,"This SQL query integrates data from multiple tables related to Hubspot email events, specifically focusing on email bounce events. It joins the base email bounce event data with general email event data and contact information. The query enriches the bounce event data with additional details such as creation timestamp, campaign ID, recipient email, send timestamp, and contact information. It also includes a flag to indicate if the contact has been deleted.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__email_event_deferred,"This SQL query integrates data from multiple tables related to Hubspot email events. It starts with the email_event_deferred table and joins it with the email_event table to add more event details. Then, it joins the result with the contact_merge_adjust table to include contact information. The query also adds a column to indicate if a contact is deleted. The final result includes all columns from these joined tables, providing a comprehensive view of deferred email events with associated contact information.","[""Integration"",""Featurization""]"
model.hubspot.hubspot__email_event_delivered,"This SQL query integrates data from three different sources: email event delivered, general email events, and contacts. It joins these tables to create a comprehensive view of email delivery events, including recipient information and contact details. The query also includes a coalesce function to handle potentially null values for the 'is_contact_deleted' field.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__email_event_forward,"This SQL query integrates data from three different tables: email event forwards, general email events, and contacts. It joins these tables to create a comprehensive view of email forward events, including details about the email campaign, recipient, and associated contact information. The query also handles potential deleted contacts by including a flag for this status.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__email_event_print,"This SQL query integrates data from three different sources: email print events, general email events, and contact information. It joins these tables to create a comprehensive view of email print events, including details about the email campaign, recipient, and associated contact. The query also includes a coalesce function to handle potentially null values for the 'is_contact_deleted' field.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__email_event_dropped,"This SQL query integrates data from three different tables: email event dropped, email event, and contact information. It joins these tables to create a comprehensive view of dropped email events, including details about the email campaign, recipient, and associated contact. The query also adds a flag to indicate if the contact has been deleted.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__email_event_opens,This SQL query integrates data from multiple tables related to Hubspot email events. It starts with the email open events and joins them with general email events to get additional information such as campaign ID and send timestamp. Then it joins with contact data to associate the email events with specific contacts. The query also includes a check for deleted contacts.,"[""Integration"",""Cleaning""]"
model.hubspot.hubspot__email_event_clicks,"This SQL query integrates information from multiple tables related to Hubspot email event clicks. It starts with the base table of email event clicks, then joins it with the email events table to get additional event details. Finally, it joins with the contacts table to add contact information. The query also includes some basic data cleaning by coalescing the 'is_contact_deleted' field with a default value of FALSE.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__email_event_sent,"This SQL query integrates data from three sources: email event sent data, general email event data, and contact data. It joins these tables to create a comprehensive view of email events, including recipient information, campaign details, and whether the contact has been deleted. The query doesn't perform any aggregation, filtering, or complex transformations, but focuses on combining related data from different tables.","[""Integration""]"
model.hubspot.hubspot__email_event_spam_report,"This SQL query integrates data from three different sources: email spam report events, general email events, and contact information. It joins these tables to create a comprehensive view of spam report events, including details about the email campaign, recipient, and associated contact. The query also includes a check for deleted contacts.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__contact_history,"This SQL query processes contact property history data from Hubspot. It creates a timeline of changes for each contact's properties, including the source of the change and the time period for which each value was valid. The query also generates a unique identifier for each record using a hash function.","[""Featurization"",""Other""]"
model.hubspot.hubspot__companies,"This SQL query integrates company data with engagement data from HubSpot. It counts different types of engagements (notes, tasks, calls, meetings, emails) for each company and joins this aggregated engagement data with the main company information. The result is a comprehensive view of each company with their details and engagement metrics.","[""Integration"",""Aggregation"",""Featurization""]"
model.hubspot.hubspot__deals,"This SQL query integrates data from multiple Hubspot-related tables to create a comprehensive view of deals. It combines deal information with related pipeline, stage, and owner details. The query also aggregates engagement data (notes, tasks, calls, meetings, emails) for each deal. The result is a detailed dataset that includes deal attributes, associated metadata, and engagement counts.","[""Integration"",""Aggregation"",""Featurization""]"
model.hubspot.hubspot__deal_stages,"This SQL query integrates data from multiple Hubspot-related tables (deals, pipelines, pipeline stages, owners) to create a comprehensive view of deal stages. It combines information about deals, their associated pipelines, stages, and owners, while also adding some derived fields. The query creates a unique identifier for each deal stage, includes various status flags, and incorporates temporal information about stage transitions.","[""Integration"",""Featurization"",""Cleaning""]"
model.hubspot.hubspot__engagements,"This SQL query integrates data from multiple Hubspot engagement-related tables. It aggregates contact IDs, deal IDs, and company IDs associated with each engagement, and then joins this aggregated information with the main engagements table. The result is a comprehensive view of each engagement, including its associated contacts, deals, and companies.","[""Integration"",""Aggregation""]"
model.hubspot.hubspot__engagement_emails,"This SQL query joins engagement email data from a staging table with general engagements data. It combines information from both sources, using COALESCE to handle potential NULL values and ensure data completeness. The query also adds additional fields from the engagements table such as contact_ids, deal_ids, and company_ids to the email engagement data.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__engagement_tasks,"This SQL query combines data from two tables: 'stg_hubspot__engagement_task' and 'hubspot__engagements'. It joins these tables based on the engagement_id, and selects all columns from both tables. The query also applies some data cleaning by using COALESCE to handle potential null values and to determine the is_active status. It integrates additional information such as contact_ids, deal_ids, and company_ids from the engagements table into the result set.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__engagement_meetings,"This SQL query joins engagement meeting data from a staging table with general engagement data, combining and coalescing information from both sources. It enriches the meeting data with additional fields such as contact IDs, deal IDs, and company IDs from the engagements table. The query also determines the active status of the engagement and ensures consistent timestamps and owner information.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__engagement_calls,"This SQL query integrates data from two tables: 'stg_hubspot__engagement_call' and 'hubspot__engagements'. It joins these tables based on the engagement_id, and combines information from both sources. The query also performs some data cleaning by using COALESCE to handle potential null values and ensure data consistency. The final result includes all columns from both tables, with some specific fields being merged or coalesced for completeness.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__engagement_notes,"This SQL query combines engagement note data from a staging table with engagement data from another table. It joins these tables on the engagement_id field and coalesces several fields to use values from the engagements table when available, falling back to the base table values when not. The query also adds fields for contact_ids, deal_ids, and company_ids from the engagements table, and calculates an is_active field based on data from both tables.","[""Integration"",""Cleaning""]"
model.hubspot.int_hubspot__deals_enhanced,"This SQL query integrates data from multiple tables related to HubSpot deals. It joins the main deals table with related tables for pipelines, pipeline stages, and owners. The query enriches the deal data with additional information such as pipeline and stage details, owner information, and various status flags. The result is a comprehensive view of deals with enhanced contextual data.","[""Integration"",""Cleaning""]"
model.hubspot.hubspot__company_history,"This SQL query processes company property history data to create a timeline of changes for each company and property. It establishes valid time ranges for each property value, generates a surrogate key for each record, and prepares the data for historical analysis.","[""Featurization"",""Other""]"
model.hubspot.hubspot__deal_history,"This SQL query processes deal property history data from Hubspot. It creates a comprehensive view of deal property changes over time by establishing valid time ranges for each property value. The query also generates a unique identifier for each record using a combination of field name, deal ID, and valid from date.","[""Featurization"",""Other""]"
model.hubspot_source.stg_hubspot__email_event_bounce,"This SQL query performs a data cleaning and transformation process on the 'stg_hubspot__email_event_bounce_tmp' table. It first creates a base CTE with all columns from the source table. Then, it defines a macro CTE that sets up the desired data types for each column. Finally, it renames and casts the columns in the fields CTE before selecting all columns from the final result.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__deal_pipeline_stage,"This SQL query performs a series of data type conversions and column renamings on the 'stg_hubspot__deal_pipeline_stage' model. It starts by selecting all columns from a temporary table, then creates a macro with null values and specific data types for each column. Finally, it applies these data type conversions and renames several columns to more descriptive names.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__engagement_note,"This SQL query creates a template structure for the 'stg_hubspot__engagement_note' model. It selects all columns from a temporary table and then defines a set of columns with specific data types but null values. The purpose seems to be to establish a consistent schema for the engagement note data, possibly for further processing or as a placeholder for actual data to be inserted later.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__company,"This SQL query is primarily focused on data cleaning and structuring for a HubSpot company staging model. It starts by selecting all columns from a temporary table, then defines a set of columns with specific data types. The query then selects and casts specific fields, potentially adding pass-through columns and calculated fields (as indicated by comments, though not explicitly shown in the provided SQL). The final result is a cleaned and structured dataset of company information from HubSpot.","[""Cleaning"",""Integration""]"
model.hubspot_source.stg_hubspot__engagement_deal,"This SQL query creates a base structure for the 'model.hubspot_source.stg_hubspot__engagement_deal' model. It selects all columns from a temporary table and then creates a macro that defines the structure of the final output with three specific columns (_fivetran_synced, deal_id, and engagement_id) cast to their respective data types. The query then selects all columns from this macro.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__email_event_delivered,"This SQL query performs data type casting and column renaming for the Hubspot email event delivered data. It starts with a base CTE that selects all columns from a temporary staging table. Then, it creates a macro CTE that defines the expected data types for specific columns. Finally, it applies these data type casts and renames some columns in the fields CTE before selecting all resulting columns.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__email_event_spam_report,"This SQL query performs a data transformation on the 'stg_hubspot__email_event_spam_report_tmp' table. It casts specific columns to appropriate data types and renames the 'id' column to 'event_id'. The query uses a series of CTEs (Common Table Expressions) to structure the transformation process, starting with the raw data, applying a macro for type casting, and then finalizing the field selection and renaming.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__contact_list,"This SQL query stages data from a Hubspot contact list source table. It performs type casting on various fields, renames some columns for clarity, and transforms boolean fields into 'is_' prefixed columns. The query doesn't filter, deduplicate, or aggregate data, but primarily focuses on cleaning and standardizing the data format.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__email_event,"This SQL query performs data cleaning and transformation on the 'stg_hubspot__email_event' table. It starts by selecting all columns from a temporary table, then defines a macro with null values for all expected columns. Finally, it casts and renames various columns to standardize data types and improve column naming conventions.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__engagement_contact,"This SQL query creates a template structure for the 'model.hubspot_source.stg_hubspot__engagement_contact' model. It selects all columns from a temporary table and then defines a macro that casts null values to specific data types for three columns: _fivetran_synced, contact_id, and engagement_id. The final output combines these two CTEs, effectively creating a structure with the desired column types, potentially to be used as a base for further data manipulation or as a placeholder for actual data.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__engagement_company,"This SQL query creates a template or skeleton for the 'stg_hubspot__engagement_company' model. It selects all columns from a temporary table and then creates a CTE named 'macro' that defines the structure of the final output with three nullable columns: _fivetran_synced (TIMESTAMP), company_id (INT), and engagement_id (INT). The final SELECT statement returns all columns from the 'macro' CTE.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__email_event_status_change,"This SQL query performs data type casting and column renaming for the Hubspot email event status change data. It starts with a base CTE that selects all columns from a temporary table, then defines a macro CTE with null values and specific data types for each column. Finally, it casts and renames the columns in the fields CTE before selecting all columns from it.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__owner,"This SQL query performs data cleaning and featurization on the 'stg_hubspot__owner' table. It casts several columns to specific data types, renames some columns, and creates a new 'full_name' column by concatenating and trimming the first and last names. The query also sets up a structure to handle potentially missing columns by using a CTE with NULL values.","[""Cleaning"",""Featurization""]"
model.hubspot_source.stg_hubspot__email_event_dropped,"This SQL query performs data type casting and column renaming for the 'stg_hubspot__email_event_dropped' model. It starts by selecting all columns from a temporary table, then defines a structure with null values and specific data types. Finally, it casts and renames columns according to the defined structure, preparing the data for further use in the data pipeline.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__deal_company,"This SQL query creates a staging table for Hubspot deal-company associations. It starts with a base table, then creates a macro CTE to define the structure and data types of the fields. Finally, it selects and casts the fields from the macro CTE to create the final output. The query primarily focuses on data type standardization and structure definition.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__deal_property_history,"This SQL query performs data type casting and column renaming for the Hubspot deal property history data. It starts with a base CTE that selects all columns from a temporary table. Then, it defines a macro CTE with null values and specific data types for each column. Finally, it casts the columns to the appropriate data types and renames some columns in the fields CTE before selecting all columns from it.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__engagement_email,"This SQL query creates a temporary structure with null values for specified columns, casting them to appropriate data types. It appears to be setting up a schema or template for the 'stg_hubspot__engagement_email' model, potentially for testing or as a placeholder for future data.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__email_event_open,"This SQL query performs data type casting and column renaming for the Hubspot email event open data. It starts with a base table, creates a macro with null values and specific data types, then applies the actual data type conversions and column renamings in the fields CTE. The query doesn't filter, deduplicate, or aggregate data, but focuses on cleaning and standardizing the data structure.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__engagement_meeting,"This SQL query creates a CTE named 'base' that selects all columns from a temporary staging table. It then creates another CTE named 'macro' that defines a structure with null values for specific columns, casting them to appropriate data types. The final SELECT statement returns all columns from the 'macro' CTE. This query appears to be setting up a standardized structure for the 'stg_hubspot__engagement_meeting' model, possibly for further processing or as a template.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__deal_stage,"This SQL query performs data type casting and column renaming for the 'stg_hubspot__deal_stage' model. It starts by selecting all columns from a temporary table, then explicitly casts several columns to specific data types (mostly to handle NULL values), and finally renames the 'value' column to 'deal_stage_name' in the final output.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__deal_contact,"This SQL query performs a data type casting operation on a staging table for Hubspot deal-contact relationships. It selects all columns from a temporary table, creates a macro CTE with null values and specific data types, and then casts the columns to their appropriate data types in the final select statement. The query doesn't filter, deduplicate, or aggregate data, but rather focuses on standardizing the data types of the columns.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__email_campaign,"This SQL query performs a series of transformations on data from the 'stg_hubspot__email_campaign_tmp' table. It first creates a CTE with NULL values for all expected columns, then casts and renames columns from the source table. The query primarily focuses on data type casting and column renaming to standardize the output format.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__contact_property_history,"This SQL query is primarily focused on data cleaning and standardization. It starts by selecting all columns from a temporary staging table, then creates a macro CTE with NULL values to define the structure. The fields CTE then casts and renames columns to ensure proper data types and consistent naming conventions. The final SELECT statement returns all columns from the fields CTE.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__email_event_forward,"This SQL query performs data type casting and column renaming on the 'stg_hubspot__email_event_forward_tmp' table. It creates a base CTE from the source table, then a macro CTE that defines the structure with NULL values, and finally a fields CTE that casts and renames columns. The query then selects all columns from the fields CTE.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__property_option,"This SQL query appears to be a staging query that prepares data from a source table for further use. It creates a CTE structure with three parts: 'base' which selects all data from a source table, 'macro' which defines a structure with NULL values for specific columns, and 'fields' which renames some columns. The final SELECT statement returns all columns from the 'fields' CTE.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__company_property_history,"This SQL query performs data type casting and column renaming on the 'stg_hubspot__company_property_history' table. It first creates a base CTE from the temporary table, then defines a macro CTE with null values and appropriate data types. Finally, it casts and renames columns in the fields CTE, preparing the data for further use.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__deal_pipeline,"This SQL query performs data cleaning and transformation on the 'stg_hubspot__deal_pipeline_tmp' table. It casts columns to specific data types, renames some columns, and modifies others (e.g., converting '_fivetran_deleted' to 'is_deal_pipeline_deleted'). The query doesn't filter, deduplicate, or aggregate data, but focuses on standardizing and reformatting the existing columns.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__engagement_task,"This SQL query creates a staging table for Hubspot engagement tasks. It selects all columns from a temporary table and then casts specific columns to defined data types, including setting some to NULL. This appears to be a data type standardization step in an ETL process.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__email_event_click,"This SQL query performs a series of transformations on data from the 'stg_hubspot__email_event_click_tmp' table. It first creates a base CTE with all columns from the source table. Then, it defines a macro CTE that sets up a structure with NULL values for specific columns. Finally, it creates a fields CTE that casts and renames columns from the macro CTE. The main select statement then retrieves all columns from the fields CTE.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__email_event_sent,"This SQL query performs data cleaning and transformation on the 'stg_hubspot__email_event_sent' model. It starts with a base CTE that selects all columns from a temporary table. Then, it defines a macro CTE that sets up the structure with NULL values and specific data types. Finally, it applies field transformations, including casting, renaming, and aliasing of columns to prepare the data for further use.","[""Cleaning"",""Featurization""]"
model.hubspot_source.stg_hubspot__email_event_deferred,"This SQL query performs a series of transformations on data from the 'stg_hubspot__email_event_deferred_tmp' table. It first creates a CTE with all columns from the source table, then defines a macro CTE with NULL values and specific data types for certain columns. Finally, it selects and renames columns from the macro CTE, casting the '_fivetran_synced' column to TIMESTAMP type. The query essentially creates a standardized structure for the email event deferred data.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__contact_list_member,"This SQL query performs data type casting and column renaming for the 'stg_hubspot__contact_list_member' model. It starts with a base CTE that selects all columns from a temporary table. Then, it defines a structure with NULL values and specific data types. Finally, it casts the columns to the desired data types and renames some columns before selecting all fields from the final CTE.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__engagement,"This SQL query performs type casting and column renaming on the 'stg_hubspot__engagement' model. It starts by selecting all columns from a temporary table, then defines a set of columns with specific data types using a CTE named 'macro'. Finally, it selects and renames specific columns from the 'macro' CTE, casting them to the appropriate data types.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__engagement_call,"This SQL query creates a staging table for Hubspot engagement call data. It starts by selecting all columns from a temporary table, then creates a new structure with specific data types for each column, casting all values to NULL. This serves as a template or schema definition for the staging table, ensuring consistent data types and structure.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__email_event_print,"This SQL query performs a series of data transformations on the 'stg_hubspot__email_event_print_tmp' table. It first creates a CTE named 'base' to select all columns from the source table. Then, it defines a 'macro' CTE that establishes the structure and data types for the output. Finally, it creates a 'fields' CTE that casts and renames columns from the 'macro' CTE. The main SELECT statement then retrieves all columns from the 'fields' CTE.","[""Cleaning"",""Other""]"
model.hubspot_source.stg_hubspot__deal,"This SQL query is primarily focused on data cleaning and type casting for a HubSpot deals staging model. It starts with a base CTE that selects all columns from a temporary table. Then, it defines a macro CTE that sets up null values with specific data types for each column. The fields CTE then casts various columns to their appropriate data types and selects specific columns from the macro CTE. Finally, it joins the fields back to themselves (which effectively just selects all columns from the fields CTE) and returns the result.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__contact,"This SQL query is a staging model for HubSpot contact data. It selects and casts specific fields from a temporary table, applies default columns and configured pass-through columns, and prepares the data for further processing. The query includes placeholder logic for calculated fields and allows for customization through variables.","[""Cleaning"",""Integration"",""Other""]"
model.hubspot_source.stg_hubspot__property,"This SQL query performs a series of transformations on the 'stg_hubspot__property_tmp' table. It first creates a base CTE with all columns from the source table. Then, it defines a macro CTE that casts all columns to specific data types, effectively creating a schema. Finally, it selects and renames certain columns in the fields CTE. The query primarily focuses on data type standardization and column renaming.","[""Cleaning""]"
model.hubspot_source.stg_hubspot__email_event_open_tmp,This SQL query selects all columns from the 'email_event_open' table in the 'hubspot' schema of the 'TEST' database. It appears to be a staging query that extracts raw data without any transformations or filtering.,"[""Other""]"
model.hubspot_source.stg_hubspot__engagement_task_tmp,"This SQL query selects all columns from the 'engagement_task' table in the 'hubspot' schema of the 'TEST' database. The query is designed as a staging step, likely part of a dbt (data build tool) project, to create a temporary table that mirrors the source data without any transformations.","[""Integration""]"
model.hubspot_source.stg_hubspot__property_tmp,"This SQL query is designed to select all columns from the 'property' table in the 'hubspot' schema of the 'TEST' database. However, the comment suggests that no columns were returned, possibly because the relation doesn't exist yet or all columns were excluded. The query appears to be a placeholder or template, potentially used in a dbt (data build tool) project, to maintain structure and satisfy SQLFluff linting requirements during compilation.","[""Other""]"
model.hubspot_source.stg_hubspot__contact_list_member_tmp,"This SQL query selects all columns from the 'contact_list_member' table in the 'hubspot' schema of the 'TEST' database. The query appears to be a placeholder or template, as indicated by the comment suggesting that no columns were returned, possibly due to the relation not existing yet or all columns being excluded. The purpose seems to be setting up a staging table for Hubspot contact list member data.","[""Other""]"
model.hubspot_source.stg_hubspot__company_property_history_tmp,This SQL query is a simple select statement that retrieves all columns from the TEST.hubspot.company_property_history table. The comment suggests that this query is part of a dbt compilation process and may be used as a placeholder or for syntax validation purposes.,"[""Other""]"
model.hubspot_source.stg_hubspot__deal_company_tmp,"This SQL query selects all columns from the 'deal_company' table in the 'hubspot' schema of the 'TEST' database. The query is likely a staging step to prepare data for further processing or analysis in a dbt (data build tool) project. The comment suggests that the table might not exist yet or all columns were excluded, and the star (*) is used as a placeholder during dbt compilation.","[""Other""]"
model.hubspot_source.stg_hubspot__engagement_deal_tmp,"This SQL query selects all columns from the engagement_deal table in the TEST.hubspot schema. The comment suggests that this is a placeholder query, possibly used during dbt compilation, and that the actual table or columns might not exist yet.","[""Other""]"
model.hubspot_source.stg_hubspot__email_event_deferred_tmp,This SQL query selects all columns from the 'email_event_deferred' table in the 'hubspot' schema of the 'TEST' database. It appears to be a staging query that extracts raw data without any transformations or filters.,"[""Other""]"
model.hubspot_source.stg_hubspot__email_event_delivered_tmp,"This SQL query selects all columns from the 'email_event_delivered' table in the 'hubspot' schema of the 'TEST' database. The comment suggests that no columns were returned, possibly because the relation doesn't exist yet or all columns were excluded. The query appears to be a placeholder or template, potentially used for dbt compilation and to satisfy SQLFluff requirements.","[""Other""]"
model.hubspot_source.stg_hubspot__engagement_contact_tmp,"This SQL query selects all columns from the TEST.hubspot.engagement_contact table. The comment suggests that no columns were returned, possibly because the relation doesn't exist yet or all columns were excluded. The query is likely a placeholder or template for future use.","[""Other""]"
model.hubspot_source.stg_hubspot__email_event_dropped_tmp,"This query selects all columns from the 'email_event_dropped' table in the 'hubspot' schema of the 'TEST' database. The comment suggests that this might be a placeholder query, possibly used during development or compilation of a dbt model, as it mentions that no columns were returned and the star selection is used to keep SQLFluff (a SQL linter) happy.","[""Other""]"
model.hubspot_source.stg_hubspot__email_event_tmp,"This SQL query is a simple SELECT statement that retrieves all columns from the TEST.hubspot.email_event table. The comment suggests that no columns were returned, possibly because the relation doesn't exist yet or all columns were excluded. The query appears to be a placeholder or template, potentially used for dbt compilation purposes or to satisfy SQLFluff requirements.","[""Other""]"
model.hubspot_source.stg_hubspot__email_event_click_tmp,"This SQL query is a basic SELECT statement that retrieves all columns from the 'email_event_click' table in the 'hubspot' schema of the 'TEST' database. The query doesn't perform any filtering, transformation, or aggregation of the data. It's a straightforward extraction of all available data from the specified table.","[""Other""]"
model.hubspot_source.stg_hubspot__email_event_forward_tmp,This SQL query selects all columns from the 'email_event_forward' table in the 'hubspot' schema of the 'TEST' database. The query is likely used as a staging step to prepare data for further processing or analysis in a dbt (data build tool) pipeline.,"[""Integration""]"
model.hubspot_source.stg_hubspot__contact_list_tmp,"This SQL query is a simple SELECT statement that retrieves all columns from the TEST.hubspot.contact_list table. The comment suggests that no columns were returned, possibly because the relation doesn't exist yet or all columns were excluded. The query is likely a placeholder or template for future development.","[""Other""]"
model.hubspot_source.stg_hubspot__email_event_spam_report_tmp,This SQL query selects all columns from the 'email_event_spam_report' table in the 'hubspot' schema of the 'TEST' database. It appears to be a staging query that extracts raw data from the source table without any transformations.,"[""Other""]"
model.hubspot_source.stg_hubspot__property_option_tmp,"This SQL query selects all columns from the 'property_option' table in the 'hubspot' schema of the 'TEST' database. The query is designed to be a staging step, likely part of a dbt (data build tool) project, to prepare data for further transformation or analysis. The comment suggests that this query might be used as a placeholder or template, especially during the compilation phase of dbt, and it's structured to be compatible with SQLFluff, a SQL linter.","[""Other""]"
model.hubspot_source.stg_hubspot__email_event_sent_tmp,"This SQL query selects all columns from the 'email_event_sent' table in the 'hubspot' schema of the 'TEST' database. The comment suggests that no columns were returned, possibly because the relation doesn't exist yet or all columns were excluded. The query appears to be a template or placeholder, potentially used for staging data from HubSpot's email event sent information.","[""Other""]"
model.hubspot_source.stg_hubspot__email_campaign_tmp,"This SQL query selects all columns from the 'email_campaign' table in the 'hubspot' schema of the 'TEST' database. The comment suggests that this query is part of a dbt model and is used as a placeholder or template, possibly for compilation purposes or to satisfy SQLFluff formatting requirements.","[""Other""]"
model.hubspot_source.stg_hubspot__engagement_note_tmp,"This SQL query selects all columns from the 'engagement_note' table in the 'hubspot' schema of the 'TEST' database. The query is designed as a staging step, likely to prepare data for further transformation or analysis in a data modeling process.","[""Integration""]"
model.hubspot_source.stg_hubspot__owner_tmp,"This SQL query selects all columns from the 'owner' table in the 'hubspot' schema of the 'TEST' database. The query is likely intended to be a staging step for further data processing or analysis of HubSpot owner data. The comment suggests that the table might not exist yet or all columns were excluded, implying this could be a placeholder or template query.","[""Other""]"
model.hubspot_source.stg_hubspot__contact_tmp,This SQL query selects all columns from the 'contact' table in the 'hubspot' schema of the 'TEST' database. The comment suggests that this query is part of a dbt model and is designed to create a temporary staging table for Hubspot contact data. The query itself is simple and doesn't perform any transformations or filtering on the data.,"[""Other""]"
model.hubspot_source.stg_hubspot__email_event_bounce_tmp,This SQL query selects all columns from the 'email_event_bounce' table in the 'hubspot' schema of the 'TEST' database. It appears to be a staging query that extracts raw data without any transformations or filters.,"[""Other""]"
model.hubspot_source.stg_hubspot__engagement_company_tmp,"This SQL query selects all columns from the 'engagement_company' table in the 'hubspot' schema of the 'TEST' database. The query is designed to be a staging step, likely used in a dbt (data build tool) project. The comment suggests that the table might not exist yet or all columns were excluded, and the star (*) is used as a placeholder to keep SQLFluff (a SQL linter) happy during dbt compilation.","[""Other""]"
model.hubspot_source.stg_hubspot__engagement_tmp,"This SQL query is a simple select statement that retrieves all columns from the 'TEST.hubspot.engagement' table. The comment suggests that this is a placeholder query, possibly used during the dbt compile process, and that the actual table or columns may not exist yet.","[""Other""]"
model.hubspot_source.stg_hubspot__deal_tmp,"This SQL query is a simple select statement that retrieves all columns from the 'deal' table in the 'hubspot' schema of the 'TEST' database. The comment suggests that this query is part of a dbt (data build tool) project and is used as a staging step for Hubspot deal data. The asterisk (*) is used as a placeholder to ensure compatibility with SQLFluff, a SQL linting tool.","[""Other""]"
model.hubspot_source.stg_hubspot__deal_property_history_tmp,"This SQL query selects all columns from the 'deal_property_history' table in the 'hubspot' schema of the 'TEST' database. The query appears to be a staging step, likely used to create a temporary or intermediate table for further processing in a dbt model.","[""Integration""]"
model.hubspot_source.stg_hubspot__deal_stage_tmp,"This SQL query selects all columns from the 'deal_stage' table in the 'hubspot' schema of the 'TEST' database. The query is designed as a staging step, likely to be used as an intermediate layer in a data transformation pipeline. The comment suggests that this query might be part of a dbt (data build tool) project and is possibly used as a placeholder or template for future development.","[""Other""]"
model.hubspot_source.stg_hubspot__engagement_email_tmp,"This SQL query selects all columns from the 'engagement_email' table in the 'hubspot' schema of the 'TEST' database. The query is designed as a staging step, likely to be used as an intermediate table in a larger data transformation process. The comment suggests that this query might be a placeholder or template, possibly used during compilation or linting processes.","[""Other""]"
model.hubspot_source.stg_hubspot__company_tmp,"This SQL query selects all columns from the 'company' table in the 'hubspot' schema of the 'TEST' database. The comment suggests that this is a placeholder query, possibly used during dbt compilation, and that the actual table might not exist yet or all columns might have been excluded.","[""Other""]"
model.hubspot_source.stg_hubspot__engagement_call_tmp,"This SQL query is a simple SELECT statement that retrieves all columns from the 'engagement_call' table in the 'hubspot' schema of the 'TEST' database. The query doesn't perform any specific data manipulation or filtering. The comment suggests that this might be a placeholder or template query, possibly used during compilation or to satisfy a linter (SQLFluff).","[""Other""]"
model.hubspot_source.stg_hubspot__engagement_meeting_tmp,This query selects all columns from the 'engagement_meeting' table in the 'hubspot' schema of the 'TEST' database. It appears to be a staging query that retrieves raw data without any transformations or filtering.,"[""Other""]"
model.hubspot_source.stg_hubspot__email_event_status_change_tmp,"This SQL query selects all columns from the 'email_event_status_change' table in the 'hubspot' schema of the 'TEST' database. It appears to be a staging query that's part of a dbt (data build tool) model. The comment suggests that this query might be a placeholder or template, possibly used during compilation or for linting purposes with SQLFluff.","[""Other""]"
model.hubspot_source.stg_hubspot__deal_pipeline_tmp,"This SQL query selects all columns from the 'deal_pipeline' table in the 'hubspot' schema of the 'TEST' database. The query appears to be a placeholder or template, as indicated by the comment suggesting that no columns were returned, possibly because the relation doesn't exist yet or all columns were excluded. The asterisk (*) is used to keep SQLFluff (a SQL linter) happy during dbt compilation.","[""Other""]"
model.hubspot_source.stg_hubspot__contact_property_history_tmp,"This SQL query is a simple SELECT statement that retrieves all columns from the 'contact_property_history' table in the 'hubspot' schema of the 'TEST' database. The query does not perform any filtering, transformation, or aggregation of the data. It's a straightforward extraction of all available data from the specified table.","[""Other""]"
model.hubspot_source.stg_hubspot__deal_contact_tmp,"This SQL query selects all columns from the 'deal_contact' table in the 'hubspot' schema of the 'TEST' database. The query is likely a placeholder or template, as indicated by the comment suggesting that no columns were returned, possibly because the relation doesn't exist yet or all columns were excluded.","[""Other""]"
model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp,This SQL query is a simple SELECT statement that retrieves all columns from the 'deal_pipeline_stage' table in the 'hubspot' schema of the 'TEST' database. The comment suggests that this query is part of a dbt model and may be used as a placeholder or for initial setup purposes.,"[""Other""]"
model.hubspot_source.stg_hubspot__email_event_print_tmp,"This SQL query selects all columns from the 'email_event_print' table in the 'hubspot' schema of the 'TEST' database. The comment suggests that no columns were returned, possibly because the relation doesn't exist yet or all columns were excluded. The query is likely a placeholder or template for staging Hubspot email print event data.","[""Other""]"
