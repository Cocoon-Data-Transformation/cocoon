{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-08-01T01:12:00.789302Z", "invocation_id": "21f0e00e-e0b7-49f4-bb15-ff66b33b4d64", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:57.989365Z", "completed_at": "2024-08-01T01:11:57.997989Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:57.998385Z", "completed_at": "2024-08-01T01:11:57.998400Z"}], "thread_id": "Thread-1", "execution_time": 0.009919404983520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.amplitude_source.stg_amplitude__event_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.amplitude.event", "relation_name": "TEST.PUBLIC__source_amplitude.stg_amplitude__event_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:58.000449Z", "completed_at": "2024-08-01T01:11:58.003648Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:58.004042Z", "completed_at": "2024-08-01T01:11:58.004049Z"}], "thread_id": "Thread-1", "execution_time": 0.0045528411865234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.amplitude_source.stg_amplitude__event_type_tmp", "compiled": true, "compiled_code": "select * \nfrom TEST.amplitude.event_type", "relation_name": "TEST.PUBLIC__source_amplitude.stg_amplitude__event_type_tmp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:58.006054Z", "completed_at": "2024-08-01T01:11:58.869997Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:58.870654Z", "completed_at": "2024-08-01T01:11:58.870668Z"}], "thread_id": "Thread-1", "execution_time": 1.0522503852844238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.amplitude_source.stg_amplitude__event", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC__source_amplitude.stg_amplitude__event_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    _insert_id\n    \n , \n    cast(null as TEXT) as \n    \n    ad_id\n    \n , \n    cast(null as TEXT) as \n    \n    amplitude_id\n    \n , \n    cast(null as TEXT) as \n    \n    app\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as timestamp) as \n    \n    client_event_time\n    \n , \n    cast(null as timestamp) as \n    \n    client_upload_time\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as TEXT) as \n    \n    data\n    \n , \n    cast(null as TEXT) as \n    \n    device_brand\n    \n , \n    cast(null as TEXT) as \n    \n    device_carrier\n    \n , \n    cast(null as TEXT) as \n    \n    device_family\n    \n , \n    cast(null as TEXT) as \n    \n    device_id\n    \n , \n    cast(null as TEXT) as \n    \n    device_manufacturer\n    \n , \n    cast(null as TEXT) as \n    \n    device_model\n    \n , \n    cast(null as TEXT) as \n    \n    device_type\n    \n , \n    cast(null as TEXT) as \n    \n    dma\n    \n , \n    cast(null as TEXT) as \n    \n    event_properties\n    \n , \n    cast(null as timestamp) as \n    \n    event_time\n    \n , \n    cast(null as TEXT) as \n    \n    event_type\n    \n , \n    cast(null as integer) as \n    \n    event_type_id\n    \n , \n    cast(null as TEXT) as \n    \n    group_properties\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    idfa\n    \n , \n    cast(null as TEXT) as \n    \n    ip_address\n    \n , \n    cast(null as boolean) as \n    \n    is_attribution_event\n    \n , \n    cast(null as TEXT) as \n    \n    language\n    \n , \n    cast(null as TEXT) as \n    \n    library\n    \n , \n    cast(null as TEXT) as \n    \n    location_lat\n    \n , \n    cast(null as TEXT) as \n    \n    location_lng\n    \n , \n    cast(null as TEXT) as \n    \n    os_name\n    \n , \n    cast(null as TEXT) as \n    \n    os_version\n    \n , \n    cast(null as boolean) as \n    \n    paying\n    \n , \n    cast(null as TEXT) as \n    \n    platform\n    \n , \n    cast(null as timestamp) as \n    \n    processed_time\n    \n , \n    cast(null as TEXT) as \n    \n    project_name\n    \n , \n    cast(null as TEXT) as \n    \n    region\n    \n , \n    cast(null as integer) as \n    \n    schema\n    \n , \n    cast(null as timestamp) as \n    \n    server_received_time\n    \n , \n    cast(null as timestamp) as \n    \n    server_upload_time\n    \n , \n    cast(null as integer) as \n    \n    session_id\n    \n , \n    cast(null as TEXT) as \n    \n    start_version\n    \n , \n    cast(null as timestamp) as \n    \n    user_creation_time\n    \n , \n    cast(null as TEXT) as \n    \n    user_id\n    \n , \n    cast(null as TEXT) as \n    \n    user_properties\n    \n , \n    cast(null as TEXT) as \n    \n    uuid\n    \n , \n    cast(null as TEXT) as \n    \n    version_name\n    \n , \n    cast(null as TEXT) as group_types \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as event_id,\n        cast(event_time as timestamp) as event_time,\n        cast(date_trunc('day', event_time) as date) as event_day,\n        md5(cast(coalesce(cast(user_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(session_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_session_id,\n        coalesce(cast(user_id as TEXT), (cast(amplitude_id as TEXT))) as amplitude_user_id,\n        event_properties,\n        event_type,\n        event_type_id,\n        group_types,\n        group_properties,\n        session_id,\n        cast(user_id as TEXT) as user_id, \n        user_properties,\n        cast(amplitude_id as TEXT) as amplitude_id,\n        _insert_id,\n        ad_id,\n        app,\n        project_name,\n        cast(client_event_time as timestamp) as client_event_time,\n        cast(client_upload_time as timestamp) as client_upload_time,\n        city,\n        country,\n        data,\n        device_brand,\n        device_carrier,\n        device_family,\n        device_id,\n        device_manufacturer,\n        device_model,\n        device_type,\n        dma,\n        idfa,\n        ip_address,\n        language,\n        location_lat,\n        location_lng,\n        os_name,\n        os_version,\n        is_attribution_event,\n        library,\n        paying as is_paying,\n        platform,\n        cast(processed_time as timestamp) as processed_time,\n        region,\n        schema,\n        cast(server_received_time as timestamp) as server_received_time,\n        cast(server_upload_time as timestamp) as server_upload_time,\n        start_version,\n        cast(user_creation_time as timestamp) as user_creation_time,\n        uuid,\n        version_name,\n        _fivetran_synced\n    from fields\n\n    where cast(date_trunc('day', event_time) as date) >= cast('2020-01-01' as date) -- filter to records past a specific date\n    and cast(date_trunc('day', event_time) as date) <= cast(\n\n    dateadd(\n        month,\n        1,\n        date_trunc('day', \n  current_timestamp::timestamp\n)\n        )\n\n as date) -- filter to records before a specific date\n\n),\n\nsurrogate as (\n\n    select\n        *,\n        md5(cast(coalesce(cast(event_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(device_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(client_event_time as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(amplitude_user_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_event_id\n    from final\n)\n\nselect *\nfrom surrogate", "relation_name": "TEST.PUBLIC__source_amplitude.stg_amplitude__event"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.061105Z", "completed_at": "2024-08-01T01:11:59.633798Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.634201Z", "completed_at": "2024-08-01T01:11:59.634214Z"}], "thread_id": "Thread-1", "execution_time": 0.7564117908477783, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.amplitude_source.stg_amplitude__event_type", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from TEST.PUBLIC__source_amplitude.stg_amplitude__event_type_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    autohidden\n    \n , \n    cast(null as boolean) as \n    \n    deleted\n    \n , \n    cast(null as TEXT) as \n    \n    display\n    \n , \n    cast(null as boolean) as \n    \n    flow_hidden\n    \n , \n    cast(null as boolean) as \n    \n    hidden\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as boolean) as \n    \n    in_waitroom\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as boolean) as \n    \n    non_active\n    \n , \n    cast(null as TEXT) as \n    \n    project_name\n    \n , \n    cast(null as boolean) as \n    \n    timeline_hidden\n    \n , \n    cast(null as integer) as \n    \n    totals\n    \n , \n    cast(null as integer) as \n    \n    totals_delta\n    \n , \n    cast(null as TEXT) as \n    \n    value\n    \n , \n    cast(null as TEXT) as \n    \n    waitroom_approved\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as event_type_id,\n        name as event_type_name,\n        project_name,\n        display,\n        totals,\n        totals_delta,\n        value,\n        flow_hidden as is_flow_hidden,\n        hidden as is_hidden,\n        in_waitroom as is_in_waitroom,\n        non_active as is_non_active,\n        autohidden as is_autohidden,\n        deleted as is_deleted,\n        timeline_hidden as is_timeline_hidden,\n        waitroom_approved as is_waitroom_approved,\n        _fivetran_deleted,\n        _fivetran_synced\n    from fields\n),\n\nsurrogate as (\n\n    select\n        *,\n        md5(cast(coalesce(cast(event_type_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(project_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_event_type_id\n    from final\n)\n\nselect *\nfrom surrogate", "relation_name": "TEST.PUBLIC__source_amplitude.stg_amplitude__event_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.818634Z", "completed_at": "2024-08-01T01:11:59.833960Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.834351Z", "completed_at": "2024-08-01T01:11:59.834359Z"}], "thread_id": "Thread-1", "execution_time": 0.016824722290039062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.amplitude.amplitude__sessions", "compiled": true, "compiled_code": "\n\nwith \n\n\n    \nevent_data_raw as (\n\n    select events.*\n    from TEST.PUBLIC__source_amplitude.stg_amplitude__event as events\n\n    \n),\n\n-- deduplicate\nevent_data as (\n    \n    select * \n    from (\n        select \n            *,\n            case when _insert_id is not null\n                then row_number() over (partition by _insert_id order by client_upload_time desc)\n                else row_number() over (partition by event_id, device_id, client_event_time, amplitude_user_id order by client_upload_time desc)\n            end as nth_event_record\n\n        from event_data_raw\n        ) as duplicates\n    where nth_event_record = 1\n),\n\nsession_agg as (\n\n    select\n        unique_session_id,\n        user_id,\n        count(event_id) as events_per_session,\n        min(event_time) as session_started_at,\n        max(event_time) as session_ended_at,\n        datediff(\n        second,\n        min(event_time),\n        max(event_time)\n        ) / 60 as session_length_in_minutes\n    from event_data\n    group by 1,2\n),\n\nsession_ranking as (\n\n    select \n        unique_session_id,\n        user_id,\n        events_per_session,\n        session_started_at,\n        session_ended_at,\n        session_length_in_minutes,\n        date_trunc('day', session_started_at) as session_started_at_day,\n        date_trunc('day', session_ended_at) as session_ended_at_day,\n        case \n            when user_id is not null then row_number() over (partition by user_id order by session_started_at) \n            else null\n        end as user_session_number\n    from session_agg\n),\n\nsession_lag as (\n    select\n        *, \n        -- determine prior sessions' end time, then in the following cte calculate the difference between current session's start time and last session's end time to determine the time in between sessions\n        case \n            when user_id is not null then lag(session_ended_at,1) over (partition by user_id order by session_ended_at) \n            else null\n        end as last_session_ended_at,\n        case \n            when user_id is not null then lag(session_ended_at_day,1) over (partition by user_id order by session_ended_at_day) \n            else null\n        end as last_session_ended_at_day\n    from session_ranking\n)\n\nselect \n    *,\n    case\n        when user_session_number = 1 then 1\n        else 0\n    end as is_first_user_session,\n    case\n        when user_id is not null then datediff(\n        second,\n        last_session_ended_at,\n        session_started_at\n        ) / 60\n        else null\n    end as minutes_in_between_sessions\nfrom session_lag", "relation_name": "TEST.PUBLIC_amplitude.amplitude__sessions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.836429Z", "completed_at": "2024-08-01T01:11:59.846896Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.847284Z", "completed_at": "2024-08-01T01:11:59.847291Z"}], "thread_id": "Thread-1", "execution_time": 0.011868953704833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude_source.not_null_stg_amplitude__event_unique_event_id.d32937d071", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_event_id\nfrom TEST.PUBLIC__source_amplitude.stg_amplitude__event\nwhere unique_event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.849153Z", "completed_at": "2024-08-01T01:11:59.854941Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.855321Z", "completed_at": "2024-08-01T01:11:59.855328Z"}], "thread_id": "Thread-1", "execution_time": 0.007019758224487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude_source.unique_stg_amplitude__event_unique_event_id.b4262a0e5e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_event_id as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC__source_amplitude.stg_amplitude__event\nwhere unique_event_id is not null\ngroup by unique_event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.857199Z", "completed_at": "2024-08-01T01:11:59.861663Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.862073Z", "completed_at": "2024-08-01T01:11:59.862080Z"}], "thread_id": "Thread-1", "execution_time": 0.005726337432861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude_source.not_null_stg_amplitude__event_type_unique_event_type_id.9921959436", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_event_type_id\nfrom TEST.PUBLIC__source_amplitude.stg_amplitude__event_type\nwhere unique_event_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.863941Z", "completed_at": "2024-08-01T01:11:59.867644Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.868025Z", "completed_at": "2024-08-01T01:11:59.868032Z"}], "thread_id": "Thread-1", "execution_time": 0.0049474239349365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude_source.unique_stg_amplitude__event_type_unique_event_type_id.fcbfdcc721", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_event_type_id as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC__source_amplitude.stg_amplitude__event_type\nwhere unique_event_type_id is not null\ngroup by unique_event_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.869877Z", "completed_at": "2024-08-01T01:11:59.879746Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.880126Z", "completed_at": "2024-08-01T01:11:59.880133Z"}], "thread_id": "Thread-1", "execution_time": 0.011106491088867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.amplitude.amplitude__event_enhanced", "compiled": true, "compiled_code": "\n\nwith \n\n\n\nevent_data_raw as (\n\n    select events.*\n    from TEST.PUBLIC__source_amplitude.stg_amplitude__event as events\n\n    \n),\n\n-- deduplicate\nevent_data as (\n    \n    select * \n    from (\n        select \n            *,\n            case when _insert_id is not null\n                then row_number() over (partition by _insert_id order by client_upload_time desc)\n                else row_number() over (partition by event_id, device_id, client_event_time, amplitude_user_id order by client_upload_time desc)\n            end as nth_event_record\n\n        from event_data_raw\n        ) as duplicates\n    where nth_event_record = 1\n),\n\nevent_type as (\n\n    select * \n    from TEST.PUBLIC__source_amplitude.stg_amplitude__event_type\n),\n\nsession_data as (\n\n    select *\n    from TEST.PUBLIC_amplitude.amplitude__sessions\n),\n\nevent_enhanced as (\n\n    select\n        event_data.unique_event_id\n        , event_data.unique_session_id\n        , cast(event_data.amplitude_user_id as TEXT) as amplitude_user_id\n        , event_data.event_id\n        , event_data.event_type\n        , event_data.event_time\n        , event_data.event_day\n\n        \n\n        , event_type.event_type_id\n        , event_type.event_type_name\n        , event_data.session_id\n        , row_number() over (partition by session_id order by event_time asc) as session_event_number\n        , row_number() over (partition by amplitude_user_id order by event_time asc) as user_event_number\n        , event_data.group_types\n\n        \n\n        , cast(event_data.user_id as TEXT) as user_id\n        , event_data.user_creation_time\n\n        \n\n        , event_data.amplitude_id\n        , event_data.app\n        , event_data.project_name\n        , event_data.version_name\n        , event_data.client_event_time\n        , event_data.client_upload_time\n        , event_data.server_received_time\n        , event_data.server_upload_time\n        , event_data.city\n        , event_data.country\n        , event_data.region\n        , event_data.data\n        , event_data.location_lat\n        , event_data.location_lng\n        , event_data.device_brand\n        , event_data.device_carrier\n        , event_data.device_family\n        , event_data.device_id\n        , event_data.device_manufacturer\n        , event_data.device_model\n        , event_data.device_type\n        , event_data.ip_address\n        , event_data.os_name\n        , event_data.os_version\n        , event_data.platform\n        , event_data.language\n        , event_data.dma\n        , event_data.schema\n        , event_data.start_version\n        , event_type.totals\n        , event_type.value\n        , session_data.events_per_session\n        , session_data.session_started_at\n        , session_data.session_ended_at\n        , session_data.user_session_number\n        , session_data.session_started_at_day\n        , session_data.session_ended_at_day\n        , session_data.session_length_in_minutes\n        , session_data.is_first_user_session\n        , session_data.minutes_in_between_sessions\n\n    from event_data\n    left join event_type\n        on event_data.event_type_id = event_type.event_type_id\n    left join session_data\n        on event_data.unique_session_id = session_data.unique_session_id\n),\n\nfinal as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(unique_event_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_day as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_key\n    from event_enhanced\n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_amplitude.amplitude__event_enhanced"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.882200Z", "completed_at": "2024-08-01T01:11:59.886132Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.886514Z", "completed_at": "2024-08-01T01:11:59.886521Z"}], "thread_id": "Thread-1", "execution_time": 0.005379438400268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude.not_null_amplitude__sessions_unique_session_id.42d35ec70c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_session_id\nfrom TEST.PUBLIC_amplitude.amplitude__sessions\nwhere unique_session_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.888365Z", "completed_at": "2024-08-01T01:11:59.892717Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.893095Z", "completed_at": "2024-08-01T01:11:59.893101Z"}], "thread_id": "Thread-1", "execution_time": 0.005577802658081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude.unique_amplitude__sessions_unique_session_id.a9b2f3faec", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_session_id as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_amplitude.amplitude__sessions\nwhere unique_session_id is not null\ngroup by unique_session_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.894959Z", "completed_at": "2024-08-01T01:11:59.897823Z"}, {"name": "execute", "started_at": "2024-08-01T01:11:59.898205Z", "completed_at": "2024-08-01T01:11:59.898212Z"}], "thread_id": "Thread-1", "execution_time": 0.0040912628173828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.amplitude.amplitude__user_enhanced", "compiled": true, "compiled_code": "with event_enhanced as (\n\n    select * \n    from TEST.PUBLIC_amplitude.amplitude__event_enhanced\n),\n\nsession_data as (\n\n    select *\n    from TEST.PUBLIC_amplitude.amplitude__sessions\n)\n\nselect\n    event_enhanced.amplitude_user_id,\n    min(event_enhanced.user_creation_time) as user_created_at,\n    min(event_enhanced.session_started_at) as first_session_at,\n    max(event_enhanced.session_ended_at) as last_session_at,\n    count(distinct event_enhanced.unique_event_id) as total_events_per_user,\n    count(distinct session_data.unique_session_id) as total_sessions_per_user,\n    avg(session_data.session_length_in_minutes) as average_session_length_in_minutes,\n    avg(session_data.minutes_in_between_sessions) as average_minutes_in_between_sessions\n\nfrom event_enhanced\nleft join session_data\n    on event_enhanced.unique_session_id = session_data.unique_session_id\ngroup by 1", "relation_name": "TEST.PUBLIC_amplitude.amplitude__user_enhanced"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:11:59.900173Z", "completed_at": "2024-08-01T01:12:00.566806Z"}, {"name": "execute", "started_at": "2024-08-01T01:12:00.567209Z", "completed_at": "2024-08-01T01:12:00.567222Z"}], "thread_id": "Thread-1", "execution_time": 0.8411481380462646, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.amplitude.int_amplitude__date_spine", "compiled": true, "compiled_code": "\n\nwith event_data as (\n\n    select * \n    from TEST.PUBLIC_amplitude.amplitude__event_enhanced\n),\n\n-- create end_date_adjust variable\n\n\n\n\n\n        \n\n\n\n\n\n\n\nspine as (\n\n    select spine.* \n\n    from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1674\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2020-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2024-08-01' as date)\n\n)\n\nselect * from filtered\n\n \n    ) as spine\n\n    \n),\n\ndate_spine as (\n\n\n    select\n        distinct event_data.event_type,\n        cast(spine.date_day as date) as event_day,\n        md5(cast(coalesce(cast(spine.date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_data.event_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as date_spine_unique_key\n    from spine \n    join event_data\n        on spine.date_day >= event_data.event_day -- each event_type will have a record for every day since their first day\n)\n\nselect * \nfrom date_spine", "relation_name": "TEST.PUBLIC_int_amplitude.int_amplitude__date_spine"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:12:00.742770Z", "completed_at": "2024-08-01T01:12:00.747168Z"}, {"name": "execute", "started_at": "2024-08-01T01:12:00.747556Z", "completed_at": "2024-08-01T01:12:00.747564Z"}], "thread_id": "Thread-1", "execution_time": 0.005805492401123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude.not_null_amplitude__event_enhanced_unique_event_id.53de42037b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_event_id\nfrom TEST.PUBLIC_amplitude.amplitude__event_enhanced\nwhere unique_event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:12:00.749397Z", "completed_at": "2024-08-01T01:12:00.754343Z"}, {"name": "execute", "started_at": "2024-08-01T01:12:00.754727Z", "completed_at": "2024-08-01T01:12:00.754734Z"}], "thread_id": "Thread-1", "execution_time": 0.00616765022277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude.unique_amplitude__event_enhanced_unique_event_id.03dacb012a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_event_id as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_amplitude.amplitude__event_enhanced\nwhere unique_event_id is not null\ngroup by unique_event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:12:00.756618Z", "completed_at": "2024-08-01T01:12:00.760352Z"}, {"name": "execute", "started_at": "2024-08-01T01:12:00.760731Z", "completed_at": "2024-08-01T01:12:00.760738Z"}], "thread_id": "Thread-1", "execution_time": 0.005015850067138672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude.not_null_amplitude__user_enhanced_amplitude_user_id.bb955eeae0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amplitude_user_id\nfrom TEST.PUBLIC_amplitude.amplitude__user_enhanced\nwhere amplitude_user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:12:00.762571Z", "completed_at": "2024-08-01T01:12:00.766358Z"}, {"name": "execute", "started_at": "2024-08-01T01:12:00.766747Z", "completed_at": "2024-08-01T01:12:00.766754Z"}], "thread_id": "Thread-1", "execution_time": 0.005025148391723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude.unique_amplitude__user_enhanced_amplitude_user_id.56f969f951", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    amplitude_user_id as unique_field,\n    count(*) as n_records\n\nfrom TEST.PUBLIC_amplitude.amplitude__user_enhanced\nwhere amplitude_user_id is not null\ngroup by amplitude_user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:12:00.768582Z", "completed_at": "2024-08-01T01:12:00.775517Z"}, {"name": "execute", "started_at": "2024-08-01T01:12:00.775908Z", "completed_at": "2024-08-01T01:12:00.775915Z"}], "thread_id": "Thread-1", "execution_time": 0.008167266845703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.amplitude.amplitude__daily_performance", "compiled": true, "compiled_code": "\n\nwith event_enhanced as (\n\n    select * \n    from TEST.PUBLIC_amplitude.amplitude__event_enhanced\n),\n\n\n\ndate_spine as (\n    \n    select spine.*\n    from TEST.PUBLIC_int_amplitude.int_amplitude__date_spine as spine\n\n    \n), \n\nagg_event_data as (\n\n    select\n        event_day,\n        event_type,\n        count(distinct unique_event_id) as number_events,\n        count(distinct unique_session_id) as number_sessions,\n        count(distinct amplitude_user_id) as number_users,\n        count(distinct \n                (case when cast( date_trunc('day', user_creation_time) as date) = event_day\n            then amplitude_user_id end)) as number_new_users \n    from event_enhanced\n    group by 1,2\n),\n\nspine_joined as (\n\n    select\n        date_spine.event_day,\n        date_spine.event_type,\n        agg_event_data.number_events,\n        agg_event_data.number_sessions,\n        agg_event_data.number_users,\n        agg_event_data.number_new_users\n    from date_spine\n    left join agg_event_data\n        on date_spine.event_day = agg_event_data.event_day\n        and date_spine.event_type = agg_event_data.event_type\n),\n\nfinal as (\n\n    select\n        event_day,\n        event_type,\n        coalesce(number_events,0) as number_events,\n        coalesce(number_sessions,0) as number_sessions,\n        coalesce(number_users,0) as number_users,\n        coalesce(number_new_users,0) as number_new_users,\n        md5(cast(coalesce(cast(event_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as daily_unique_key\n    from spine_joined\n\n    \n)\n\nselect *\nfrom final", "relation_name": "TEST.PUBLIC_amplitude.amplitude__daily_performance"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-01T01:12:00.778169Z", "completed_at": "2024-08-01T01:12:00.787080Z"}, {"name": "execute", "started_at": "2024-08-01T01:12:00.787470Z", "completed_at": "2024-08-01T01:12:00.787477Z"}], "thread_id": "Thread-1", "execution_time": 0.010234355926513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.amplitude.dbt_utils_unique_combination_of_columns_amplitude__daily_performance_event_day__event_type.163ae17b19", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_day, event_type\n    from TEST.PUBLIC_amplitude.amplitude__daily_performance\n    group by event_day, event_type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 5.2127439975738525, "args": {"use_colors_file": true, "printer_width": 80, "log_path": "/home/zh2408/dbt_projects/dbt_amplitude/logs", "indirect_selection": "eager", "log_format": "default", "exclude": [], "static_parser": true, "require_resource_names_without_spaces": false, "write_json": true, "project_dir": "/home/zh2408/dbt_projects/dbt_amplitude", "version_check": true, "which": "compile", "introspect": true, "require_explicit_package_overrides_for_builtin_materializations": true, "populate_cache": true, "profiles_dir": "/home/zh2408/.dbt", "invocation_command": "dbt compile", "partial_parse_file_diff": true, "vars": {}, "print": true, "empty": false, "quiet": false, "macro_debugging": false, "inject_ephemeral_ctes": true, "show_resource_report": false, "log_file_max_bytes": 10485760, "output": "text", "log_level": "info", "cache_selected_only": false, "select": [], "defer": false, "warn_error_options": {"include": [], "exclude": []}, "send_anonymous_usage_stats": true, "log_level_file": "debug", "log_format_file": "debug", "source_freshness_run_project_hooks": false, "enable_legacy_logger": false, "strict_mode": false, "favor_state": false, "use_colors": true, "partial_parse": true}}