{"main_table": {"summary": {"PATIENT": "Contains personal identification, demographic information, and potentially other personal details such as maiden name and name components.", "DEATH": "Records the mortality details of the patients, including death date.", "LOCATION": "Stores detailed residential address information and geographical coordinates.", "COST": "Details the financial aspects of healthcare services, including healthcare expenses.", "PAYER_PLAN_PERIOD": "Provides information on the patients' insurance coverage details and durations."}}, "one_to_one": {"PATIENT": {"summary": {"1:1": true, "reason": "Each row in both the source and target tables represents information about a single patient, with no indication of splitting or combining rows."}}}, "concept_mapping": {"PATIENT": {"summary": [{"source_columns": ["Id"], "target_columns": ["person_id"], "reason": "Direct mapping of unique patient identifiers"}, {"source_columns": ["BIRTHDATE"], "target_columns": ["year_of_birth", "month_of_birth", "day_of_birth", "birth_datetime"], "reason": "Split BIRTHDATE into year, month, day and map to respective columns including full datetime"}, {"source_columns": ["GENDER"], "target_columns": ["gender_concept_id", "gender_source_value", "gender_source_concept_id"], "reason": "Map gender to concept ID and source values"}, {"source_columns": ["RACE"], "target_columns": ["race_concept_id", "race_source_value", "race_source_concept_id"], "reason": "Map race to concept ID and source values"}, {"source_columns": ["ETHNICITY"], "target_columns": ["ethnicity_concept_id", "ethnicity_source_value", "ethnicity_source_concept_id"], "reason": "Map ethnicity to concept ID and source values"}, {"source_columns": ["ADDRESS", "CITY", "STATE", "COUNTY", "FIPS_CODE", "ZIP_CODE", "LATITUDE", "LONGITUDE"], "target_columns": ["location_id"], "reason": "Combine address components to derive location ID"}]}}, "code_mapping": {"['person_id']['Id']": {"summary": "import pandas as pd\n\ndef transform(input_df):\n    # Create a new DataFrame for the output with one column named 'person_id'\n    # which is a copy of the 'Id' column from the input DataFrame.\n    output_df = pd.DataFrame()\n    output_df['person_id'] = input_df['Id']\n    \n    # Return the transformed DataFrame\n    return output_df"}, "['year_of_birth', 'month_of_birth', 'day_of_birth', 'birth_datetime']['BIRTHDATE']": {"summary": "import pandas as pd\n\ndef transform(input_df):\n    # Create an empty DataFrame for the output\n    output_df = pd.DataFrame()\n    \n    # Check if the input DataFrame is not empty\n    if not input_df.empty:\n        # Extract year, month, and day from the 'BIRTHDATE' column\n        output_df['year_of_birth'] = input_df['BIRTHDATE'].str.slice(start=0, stop=4).astype(int)\n        output_df['month_of_birth'] = input_df['BIRTHDATE'].str.slice(start=5, stop=7).astype(int)\n        output_df['day_of_birth'] = input_df['BIRTHDATE'].str.slice(start=8, stop=10).astype(int)\n        \n        # Since we don't have time of birth, we assume it's midnight (00:00:0000)\n        # We use the 'BIRTHDATE' to create a datetime object\n        output_df['birth_datetime'] = pd.to_datetime(input_df['BIRTHDATE'] + ' 00:00:0000')\n    \n    # Return the transformed DataFrame\n    return output_df"}, "['gender_concept_id', 'gender_source_value']['GENDER']": {"summary": "import pandas as pd\n\ndef transform(input_df):\n    # Create an output DataFrame with the same number of rows as the input DataFrame\n    output_df = pd.DataFrame(index=input_df.index)\n    \n    # Map the 'GENDER' column to 'gender_concept_id' using a dictionary\n    gender_map = {'F': 8532, 'M': 8507}\n    output_df['gender_concept_id'] = input_df['GENDER'].map(gender_map)\n    \n    # Copy the 'GENDER' column to 'gender_source_value'\n    output_df['gender_source_value'] = input_df['GENDER']\n    \n    return output_df"}, "['race_concept_id', 'race_source_value']['RACE']": {"summary": "import pandas as pd\n\ndef transform(input_df):\n    # Create a dictionary to map the source 'RACE' values to 'race_concept_id' values\n    race_mapping = {\n        'white': 8527,\n        'asian': 8515,\n        'black': 8516\n    }\n    \n    # Create the 'race_concept_id' column by applying the mapping to the 'RACE' column\n    input_df['race_concept_id'] = input_df['RACE'].map(race_mapping)\n    \n    # Rename the 'RACE' column to 'race_source_value' to match the target table\n    output_df = input_df.rename(columns={'RACE': 'race_source_value'})\n    \n    return output_df"}, "['ethnicity_concept_id', 'ethnicity_source_value']['ETHNICITY']": {"summary": "import pandas as pd\n\ndef transform(input_df):\n    # Create an output dataframe with the same number of rows as the input dataframe\n    output_df = pd.DataFrame(index=input_df.index)\n    \n    # Map the 'ETHNICITY' values to the corresponding 'ethnicity_concept_id' values\n    # Create a dictionary for the mapping\n    ethnicity_to_concept_id = {\n        'nonhispanic': 38003563,  # 'Not Hispanic or Latino'\n        'hispanic': 38003564      # 'Hispanic or Latino'\n    }\n    \n    # Use the map function to transform the 'ETHNICITY' column\n    output_df['ethnicity_concept_id'] = input_df['ETHNICITY'].map(ethnicity_to_concept_id)\n    \n    # Copy the 'ETHNICITY' column to 'ethnicity_source_value'\n    output_df['ethnicity_source_value'] = input_df['ETHNICITY']\n    \n    return output_df"}}}